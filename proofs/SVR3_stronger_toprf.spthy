theory SVR3 begin

// Function signature and definition of the equational theory E

builtins: xor
functions: KDF/2, PRF/2, blind/1, fst/1, h/1, pair/2, pk/1, sdec/2,
           senc/2, sign/2, snd/1, true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true













predicate: NEQ( x, y )<=>¬(x = y)

predicate: DISTINCT( x, y, z )<=>¬(((x = y) ∨ (x = z)) ∨ (y = z))

rule (modulo E) client_out[color=#ffffff]:
   [ SCClientOut( $client, $server, msg ) ]
  -->
   [ !SCClientKnows( $client, $server, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_in[color=#ffffff]:
   [ !SCClientKnows( $client, $server, msg ) ]
  -->
   [ SCServerIn( $client, $server, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_out[color=#ffffff]:
   [ SCServerOut( $client, $server, msg ) ]
  -->
   [ !SCServerKnows( $client, $server, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) client_in[color=#ffffff]:
   [ !SCServerKnows( $client, $server, msg ) ]
  -->
   [ SCClientIn( $client, $server, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) eavesdrop_server:
   [ !SCClientKnows( $client, $server, msg ), !Compromised( $server )
   ]
  --[ AdversaryAction( ) ]->
   [ Out( msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) impersonate_server:
   [ In( msg ), !Compromised( $server ) ]
  --[ AdversaryAction( ) ]->
   [ SCServerOut( $client, $server, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) adversary_send:
   [ In( msg ), !Server( $server ) ]
  --[ AdversaryAction( ) ]->
   [ SCClientOut( 'adv', $server, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) adversary_recv:
   [ !SCServerKnows( 'adv', $server, msg ) ]
  --[ AdversaryAction( ), SourcesAdversaryRecv( msg ) ]->
   [ Out( msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) create_server:
   [ ] --> [ !Server( $sid ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) compromise_server:
   [ !Server( $sid ) ]
  --[ AdversaryAction( ), !Compromised( $sid ) ]->
   [ !Compromised( $sid ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unblind[derivchecks]:
   [ In( blind(x) ) ]
  --[ SourcesUnblind( x ), AdversaryAction( ), PQAdversaryAction( )
  ]->
   [ Out( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) toprf_evaluate[derivchecks]:
   [
   In( x ), In( blind(koprf1) ), In( blind(koprf2) ),
   In( blind(koprf3) )
   ]
  --[ AdversaryAction( ) ]->
   [ Out( PRF(x, (koprf1⊕koprf2⊕koprf3)) ) ]

  /*
  rule (modulo AC) toprf_evaluate[derivchecks]:
     [
     In( x ), In( blind(koprf1) ), In( blind(koprf2) ),
     In( blind(koprf3) )
     ]
    --[ AdversaryAction( ) ]->
     [ Out( PRF(x, z) ) ]
    variants (modulo AC)
     1. koprf1
              = koprf1.6
        koprf2
              = koprf2.6
        koprf3
              = koprf3.6
        z     = (koprf1.6⊕koprf2.6⊕koprf3.6)
    
     2. koprf1
              = koprf1.6
        koprf2
              = koprf2.6
        koprf3
              = zero
        z     = (koprf1.6⊕koprf2.6)
    
     3. koprf1
              = koprf1.6
        koprf2
              = zero
        koprf3
              = koprf3.6
        z     = (koprf1.6⊕koprf3.6)
    
     4. koprf1
              = x.6
        koprf2
              = x.6
        koprf3
              = koprf3.7
        z     = koprf3.7
    
     5. koprf1
              = x.6
        koprf2
              = koprf2.7
        koprf3
              = x.6
        z     = koprf2.7
    
     6. koprf1
              = x.6
        koprf2
              = x.7
        koprf3
              = (x.6⊕x.7)
        z     = zero
    
     7. koprf1
              = x.6
        koprf2
              = x.7
        koprf3
              = (x.6⊕x.7⊕x.8)
        z     = x.8
    
     8. koprf1
              = x.6
        koprf2
              = koprf2.9
        koprf3
              = (x.6⊕x.8)
        z     = (x.8⊕koprf2.9)
    
     9. koprf1
              = x.6
        koprf2
              = zero
        koprf3
              = (x.6⊕x.7)
        z     = x.7
    
    10. koprf1
              = x.6
        koprf2
              = (x.6⊕x.7)
        koprf3
              = x.7
        z     = zero
    
    11. koprf1
              = x.6
        koprf2
              = (x.6⊕x.7)
        koprf3
              = koprf3.8
        z     = (x.7⊕koprf3.8)
    
    12. koprf1
              = x.6
        koprf2
              = (x.6⊕x.7)
        koprf3
              = zero
        z     = x.7
    
    13. koprf1
              = x.6
        koprf2
              = (x.6⊕x.7)
        koprf3
              = (x.7⊕x.8)
        z     = x.8
    
    14. koprf1
              = x.6
        koprf2
              = (x.6⊕x.7⊕x.8)
        koprf3
              = x.7
        z     = x.8
    
    15. koprf1
              = x.6
        koprf2
              = (x.6⊕x.7⊕x.8)
        koprf3
              = (x.7⊕x.9)
        z     = (x.8⊕x.9)
    
    16. koprf1
              = x.6
        koprf2
              = (x.7⊕x.8)
        koprf3
              = (x.6⊕x.7)
        z     = x.8
    
    17. koprf1
              = x.6
        koprf2
              = (x.7⊕x.8)
        koprf3
              = (x.6⊕x.7⊕x.9)
        z     = (x.8⊕x.9)
    
    18. koprf1
              = koprf1.7
        koprf2
              = x.6
        koprf3
              = x.6
        z     = koprf1.7
    
    19. koprf1
              = koprf1.8
        koprf2
              = x.6
        koprf3
              = (x.6⊕x.7)
        z     = (x.7⊕koprf1.8)
    
    20. koprf1
              = koprf1.8
        koprf2
              = (x.6⊕x.7)
        koprf3
              = x.6
        z     = (x.7⊕koprf1.8)
    
    21. koprf1
              = koprf1.9
        koprf2
              = (x.6⊕x.7)
        koprf3
              = (x.6⊕x.8)
        z     = (x.7⊕x.8⊕koprf1.9)
    
    22. koprf1
              = zero
        koprf2
              = koprf2.6
        koprf3
              = koprf3.6
        z     = (koprf2.6⊕koprf3.6)
    
    23. koprf1
              = zero
        koprf2
              = x.6
        koprf3
              = (x.6⊕x.7)
        z     = x.7
    
    24. koprf1
              = zero
        koprf2
              = (x.6⊕x.7)
        koprf3
              = x.6
        z     = x.7
    
    25. koprf1
              = zero
        koprf2
              = (x.6⊕x.7)
        koprf3
              = (x.6⊕x.8)
        z     = (x.7⊕x.8)
    
    26. koprf1
              = (x.6⊕x.7)
        koprf2
              = x.6
        koprf3
              = x.7
        z     = zero
    
    27. koprf1
              = (x.6⊕x.7)
        koprf2
              = x.6
        koprf3
              = koprf3.8
        z     = (x.7⊕koprf3.8)
    
    28. koprf1
              = (x.6⊕x.7)
        koprf2
              = x.6
        koprf3
              = zero
        z     = x.7
    
    29. koprf1
              = (x.6⊕x.7)
        koprf2
              = x.6
        koprf3
              = (x.7⊕x.8)
        z     = x.8
    
    30. koprf1
              = (x.6⊕x.7)
        koprf2
              = koprf2.8
        koprf3
              = x.6
        z     = (x.7⊕koprf2.8)
    
    31. koprf1
              = (x.6⊕x.7)
        koprf2
              = x.8
        koprf3
              = (x.6⊕x.8)
        z     = x.7
    
    32. koprf1
              = (x.6⊕x.7)
        koprf2
              = x.8
        koprf3
              = (x.6⊕x.8⊕x.9)
        z     = (x.7⊕x.9)
    
    33. koprf1
              = (x.6⊕x.7)
        koprf2
              = koprf2.10
        koprf3
              = (x.6⊕x.9)
        z     = (x.7⊕x.9⊕koprf2.10)
    
    34. koprf1
              = (x.6⊕x.7)
        koprf2
              = zero
        koprf3
              = x.6
        z     = x.7
    
    35. koprf1
              = (x.6⊕x.7)
        koprf2
              = zero
        koprf3
              = (x.6⊕x.8)
        z     = (x.7⊕x.8)
    
    36. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8)
        koprf3
              = x.7
        z     = x.8
    
    37. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8)
        koprf3
              = x.8
        z     = x.7
    
    38. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8)
        koprf3
              = koprf3.9
        z     = (x.7⊕x.8⊕koprf3.9)
    
    39. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8)
        koprf3
              = zero
        z     = (x.7⊕x.8)
    
    40. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8)
        koprf3
              = (x.7⊕x.8)
        z     = zero
    
    41. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8)
        koprf3
              = (x.7⊕x.8⊕x.9)
        z     = x.9
    
    42. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8)
        koprf3
              = (x.7⊕x.9)
        z     = (x.8⊕x.9)
    
    43. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8)
        koprf3
              = (x.8⊕x.9)
        z     = (x.7⊕x.9)
    
    44. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8⊕x.9)
        koprf3
              = x.8
        z     = (x.7⊕x.9)
    
    45. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8⊕x.9)
        koprf3
              = (x.7⊕x.8)
        z     = x.9
    
    46. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8⊕x.9)
        koprf3
              = (x.7⊕x.8⊕x.10)
        z     = (x.9⊕x.10)
    
    47. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.6⊕x.8⊕x.9)
        koprf3
              = (x.8⊕x.10)
        z     = (x.7⊕x.9⊕x.10)
    
    48. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.8⊕x.9)
        koprf3
              = (x.6⊕x.8)
        z     = (x.7⊕x.9)
    
    49. koprf1
              = (x.6⊕x.7)
        koprf2
              = (x.8⊕x.9)
        koprf3
              = (x.6⊕x.8⊕x.10)
        z     = (x.7⊕x.9⊕x.10)
    
    50. koprf1
              = (x.6⊕x.7⊕x.8)
        koprf2
              = x.6
        koprf3
              = x.7
        z     = x.8
    
    51. koprf1
              = (x.6⊕x.7⊕x.8)
        koprf2
              = x.6
        koprf3
              = (x.7⊕x.9)
        z     = (x.8⊕x.9)
    
    52. koprf1
              = (x.6⊕x.7⊕x.8)
        koprf2
              = (x.6⊕x.9)
        koprf3
              = x.7
        z     = (x.8⊕x.9)
    
    53. koprf1
              = (x.6⊕x.7⊕x.8)
        koprf2
              = (x.6⊕x.9)
        koprf3
              = (x.7⊕x.9)
        z     = x.8
    
    54. koprf1
              = (x.6⊕x.7⊕x.8)
        koprf2
              = (x.6⊕x.9)
        koprf3
              = (x.7⊕x.9⊕x.10)
        z     = (x.8⊕x.10)
    
    55. koprf1
              = (x.6⊕x.7⊕x.8)
        koprf2
              = (x.6⊕x.9)
        koprf3
              = (x.7⊕x.10)
        z     = (x.8⊕x.9⊕x.10)
    
    56. koprf1
              = (x.6⊕x.7⊕x.8)
        koprf2
              = (x.6⊕x.9⊕x.10)
        koprf3
              = (x.7⊕x.9)
        z     = (x.8⊕x.10)
    
    57. koprf1
              = (x.6⊕x.7⊕x.8)
        koprf2
              = (x.6⊕x.9⊕x.10)
        koprf3
              = (x.7⊕x.9⊕x.11)
        z     = (x.8⊕x.10⊕x.11)
  */

restriction Restr_client_initialise_1:
  "∀ x #NOW.
    (Restr_client_initialise_1( x ) @ #NOW) ⇒ (¬(x = 'adv'))"
  // safety formula

rule (modulo E) client_initialise:
   [ Fr( ~pw ), Fr( ~secret ) ]
  --[ Restr_client_initialise_1( $cid ) ]->
   [ Client_0( $cid, ~pw, ~secret ) ]

  /* has exactly the trivial AC variant */

restriction Restr_client_register_1:
  "∀ x #NOW x.1 x.2 x.3 x.4 x.5.
    (Restr_client_register_1( x, x.1, x.2, x.3, x.4, x.5 ) @ #NOW) ⇒
    (¬(((x = x.1) ∨ (x.2 = x.3)) ∨ (x.4 = x.5)))"
  // safety formula

rule (modulo E) client_register:
   [
   Client_0( $cid, ~pw, ~secret ), Fr( ~koprf1 ), Fr( ~koprf2 ),
   Fr( ~koprf3 ), Fr( ~s_enc1 ), Fr( ~s_enc2 ), Fr( ~s_enc3 ),
   !Server( $sid1 ), !Server( $sid2 ), !Server( $sid3 )
   ]
  --[
  ClientRegister( $cid, ~pw, ~secret ), SourceC( blind(~koprf1) ),
  SourceC( blind(~koprf2) ), SourceC( blind(~koprf3) ),
  SourceC( ~s_enc1 ), SourceC( ~s_enc2 ), SourceC( ~s_enc3 ),
  SourceB( h(~pw) ), SourceB( ~koprf1 ), SourceB( ~koprf2 ),
  SourceB( ~koprf3 ),
  Secret( 'koprf', (~koprf1⊕~koprf2⊕~koprf3), $cid, $sid1, $sid2,
          $sid3
  ),
  Secret( 'kauth', PRF(~pw, (~koprf1⊕~koprf2⊕~koprf3)), $cid, $sid1,
          $sid2, $sid3
  ),
  Secret( 'kenc',
          KDF((~s_enc1⊕~s_enc2⊕~s_enc3),
              PRF(~pw, (~koprf1⊕~koprf2⊕~koprf3))),
          $cid, $sid1, $sid2, $sid3
  ),
  Secret( 'secret', ~secret, $cid, $sid1, $sid2, $sid3 ),
  Restr_client_register_1( $sid1, $sid2, $sid1, $sid3, $sid2, $sid3 )
  ]->
   [
   Out( senc(~secret,
             KDF((~s_enc1⊕~s_enc2⊕~s_enc3),
                 PRF(~pw, (~koprf1⊕~koprf2⊕~koprf3))))
   ),
   SCClientOut( $cid, $sid1,
                <$cid, ~koprf1, ~s_enc1, 
                 pk(KDF(PRF(~pw, (~koprf1⊕~koprf2⊕~koprf3)), '1'))>
   ),
   SCClientOut( $cid, $sid2,
                <$cid, ~koprf2, ~s_enc2, 
                 pk(KDF(PRF(~pw, (~koprf1⊕~koprf2⊕~koprf3)), '2'))>
   ),
   SCClientOut( $cid, $sid3,
                <$cid, ~koprf3, ~s_enc3, 
                 pk(KDF(PRF(~pw, (~koprf1⊕~koprf2⊕~koprf3)), '3'))>
   ),
   !Client_1( $cid, ~pw, $sid1, $sid2, $sid3 )
   ]

  /*
  rule (modulo AC) client_register:
     [
     Client_0( $cid, ~pw, ~secret ), Fr( ~koprf1 ), Fr( ~koprf2 ),
     Fr( ~koprf3 ), Fr( ~s_enc1 ), Fr( ~s_enc2 ), Fr( ~s_enc3 ),
     !Server( $sid1 ), !Server( $sid2 ), !Server( $sid3 )
     ]
    --[
    ClientRegister( $cid, ~pw, ~secret ), SourceC( blind(~koprf1) ),
    SourceC( blind(~koprf2) ), SourceC( blind(~koprf3) ),
    SourceC( ~s_enc1 ), SourceC( ~s_enc2 ), SourceC( ~s_enc3 ),
    SourceB( h(~pw) ), SourceB( ~koprf1 ), SourceB( ~koprf2 ),
    SourceB( ~koprf3 ),
    Secret( 'koprf', z.1, $cid, $sid1, $sid2, $sid3 ),
    Secret( 'kauth', PRF(~pw, z.1), $cid, $sid1, $sid2, $sid3 ),
    Secret( 'kenc', KDF(z, PRF(~pw, z.1)), $cid, $sid1, $sid2, $sid3 ),
    Secret( 'secret', ~secret, $cid, $sid1, $sid2, $sid3 ),
    Restr_client_register_1( $sid1, $sid2, $sid1, $sid3, $sid2, $sid3 )
    ]->
     [
     Out( senc(~secret, KDF(z, PRF(~pw, z.1))) ),
     SCClientOut( $cid, $sid1,
                  <$cid, ~koprf1, ~s_enc1, pk(KDF(PRF(~pw, z.1), '1'))>
     ),
     SCClientOut( $cid, $sid2,
                  <$cid, ~koprf2, ~s_enc2, pk(KDF(PRF(~pw, z.1), '2'))>
     ),
     SCClientOut( $cid, $sid3,
                  <$cid, ~koprf3, ~s_enc3, pk(KDF(PRF(~pw, z.1), '3'))>
     ),
     !Client_1( $cid, ~pw, $sid1, $sid2, $sid3 )
     ]
    variants (modulo AC)
     1. ~koprf1
              = ~koprf1.21
        ~koprf2
              = ~koprf1.21
        ~koprf3
              = ~koprf3.23
        ~s_enc1
              = ~s_enc1.25
        ~s_enc2
              = ~s_enc2.26
        ~s_enc3
              = ~s_enc1.25
        z     = ~s_enc2.26
        z.1   = ~koprf3.23
    
     2. ~koprf1
              = ~koprf1.21
        ~koprf2
              = ~koprf1.21
        ~koprf3
              = ~koprf3.23
        ~s_enc1
              = ~s_enc1.25
        ~s_enc2
              = ~s_enc2.26
        ~s_enc3
              = ~s_enc2.26
        z     = ~s_enc1.25
        z.1   = ~koprf3.23
    
     3. ~koprf1
              = ~koprf1.21
        ~koprf2
              = ~koprf2.22
        ~koprf3
              = ~koprf1.21
        ~s_enc1
              = ~s_enc1.25
        ~s_enc2
              = ~s_enc2.26
        ~s_enc3
              = ~s_enc1.25
        z     = ~s_enc2.26
        z.1   = ~koprf2.22
    
     4. ~koprf1
              = ~koprf1.21
        ~koprf2
              = ~koprf2.22
        ~koprf3
              = ~koprf1.21
        ~s_enc1
              = ~s_enc1.25
        ~s_enc2
              = ~s_enc2.26
        ~s_enc3
              = ~s_enc2.26
        z     = ~s_enc1.25
        z.1   = ~koprf2.22
    
     5. ~koprf1
              = ~koprf1.21
        ~koprf2
              = ~koprf2.22
        ~koprf3
              = ~koprf2.22
        ~s_enc1
              = ~s_enc1.25
        ~s_enc2
              = ~s_enc2.26
        ~s_enc3
              = ~s_enc1.25
        z     = ~s_enc2.26
        z.1   = ~koprf1.21
    
     6. ~koprf1
              = ~koprf1.21
        ~koprf2
              = ~koprf2.22
        ~koprf3
              = ~koprf2.22
        ~s_enc1
              = ~s_enc1.25
        ~s_enc2
              = ~s_enc2.26
        ~s_enc3
              = ~s_enc2.26
        z     = ~s_enc1.25
        z.1   = ~koprf1.21
    
     7. ~koprf1
              = ~koprf1.21
        ~koprf2
              = ~koprf2.22
        ~koprf3
              = ~koprf3.23
        ~s_enc1
              = ~s_enc1.25
        ~s_enc2
              = ~s_enc2.26
        ~s_enc3
              = ~s_enc1.25
        z     = ~s_enc2.26
        z.1   = (~koprf1.21⊕~koprf2.22⊕~koprf3.23)
    
     8. ~koprf1
              = ~koprf1.21
        ~koprf2
              = ~koprf2.22
        ~koprf3
              = ~koprf3.23
        ~s_enc1
              = ~s_enc1.25
        ~s_enc2
              = ~s_enc2.26
        ~s_enc3
              = ~s_enc2.26
        z     = ~s_enc1.25
        z.1   = (~koprf1.21⊕~koprf2.22⊕~koprf3.23)
    
     9. ~koprf1
              = ~koprf1.22
        ~koprf2
              = ~koprf1.22
        ~koprf3
              = ~koprf3.24
        ~s_enc1
              = ~s_enc1.26
        ~s_enc2
              = ~s_enc1.26
        ~s_enc3
              = ~s_enc3.28
        z     = ~s_enc3.28
        z.1   = ~koprf3.24
    
    10. ~koprf1
              = ~koprf1.22
        ~koprf2
              = ~koprf1.22
        ~koprf3
              = ~koprf3.24
        ~s_enc1
              = ~s_enc1.26
        ~s_enc2
              = ~s_enc2.27
        ~s_enc3
              = ~s_enc3.28
        z     = (~s_enc1.26⊕~s_enc2.27⊕~s_enc3.28)
        z.1   = ~koprf3.24
    
    11. ~koprf1
              = ~koprf1.22
        ~koprf2
              = ~koprf2.23
        ~koprf3
              = ~koprf1.22
        ~s_enc1
              = ~s_enc1.26
        ~s_enc2
              = ~s_enc1.26
        ~s_enc3
              = ~s_enc3.28
        z     = ~s_enc3.28
        z.1   = ~koprf2.23
    
    12. ~koprf1
              = ~koprf1.22
        ~koprf2
              = ~koprf2.23
        ~koprf3
              = ~koprf1.22
        ~s_enc1
              = ~s_enc1.26
        ~s_enc2
              = ~s_enc2.27
        ~s_enc3
              = ~s_enc3.28
        z     = (~s_enc1.26⊕~s_enc2.27⊕~s_enc3.28)
        z.1   = ~koprf2.23
    
    13. ~koprf1
              = ~koprf1.22
        ~koprf2
              = ~koprf2.23
        ~koprf3
              = ~koprf2.23
        ~s_enc1
              = ~s_enc1.26
        ~s_enc2
              = ~s_enc1.26
        ~s_enc3
              = ~s_enc3.28
        z     = ~s_enc3.28
        z.1   = ~koprf1.22
    
    14. ~koprf1
              = ~koprf1.22
        ~koprf2
              = ~koprf2.23
        ~koprf3
              = ~koprf2.23
        ~s_enc1
              = ~s_enc1.26
        ~s_enc2
              = ~s_enc2.27
        ~s_enc3
              = ~s_enc3.28
        z     = (~s_enc1.26⊕~s_enc2.27⊕~s_enc3.28)
        z.1   = ~koprf1.22
    
    15. ~koprf1
              = ~koprf1.22
        ~koprf2
              = ~koprf2.23
        ~koprf3
              = ~koprf3.24
        ~s_enc1
              = ~s_enc1.26
        ~s_enc2
              = ~s_enc1.26
        ~s_enc3
              = ~s_enc3.28
        z     = ~s_enc3.28
        z.1   = (~koprf1.22⊕~koprf2.23⊕~koprf3.24)
    
    16. ~koprf1
              = ~koprf1.22
        ~koprf2
              = ~koprf2.23
        ~koprf3
              = ~koprf3.24
        ~s_enc1
              = ~s_enc1.26
        ~s_enc2
              = ~s_enc2.27
        ~s_enc3
              = ~s_enc3.28
        z     = (~s_enc1.26⊕~s_enc2.27⊕~s_enc3.28)
        z.1   = (~koprf1.22⊕~koprf2.23⊕~koprf3.24)
  */

rule (modulo E) server_register:
   [
   !Server( $sid ),
   SCServerIn( $client, $sid, <$cid, koprf_share, s_enc_share, kvfy> )
   ]
  --[ ServerAction( ), SourceC( blind(koprf_share) ) ]->
   [ !Server_1( $sid, $cid, koprf_share, s_enc_share, kvfy ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) client_reconstruct_phase1:
   [ !Client_1( $cid, ~pw, $sid1, $sid2, $sid3 ) ]
  --[ ClientReconstructPhase1( $cid, ~pw ) ]->
   [
   SCClientOut( $cid, $sid1, <$cid, blind(h(~pw))> ),
   SCClientOut( $cid, $sid2, <$cid, blind(h(~pw))> ),
   SCClientOut( $cid, $sid3, <$cid, blind(h(~pw))> ),
   Client_2( $cid, ~pw, $sid1, $sid2, $sid3 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_reconstruct_phase1:
   [
   !Server_1( $sid, $cid, koprf_share, s_enc_share, kvfy ),
   SCServerIn( $client, $sid, <$cid, bhpw> )
   ]
  --[ ServerAction( ), ServerReconstructPhase1( $sid ) ]->
   [
   SCServerOut( $client, $sid, blind(koprf_share) ),
   Server_2( $sid, $cid, s_enc_share, kvfy, bhpw )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) client_reconstruct_phase2[derivchecks]:
   [
   Client_2( $cid, ~pw, $sid1, $sid2, $sid3 ),
   SCClientIn( $cid, $sid1, blind(koprf1) ),
   SCClientIn( $cid, $sid2, blind(koprf2) ),
   SCClientIn( $cid, $sid3, blind(koprf3) )
   ]
  --[ ClientReconstructPhase2( $cid, ~pw ) ]->
   [
   SCClientOut( $cid, $sid1,
                sign(h(blind(h(~pw))), KDF(PRF(~pw, (koprf1⊕koprf2⊕koprf3)), '1'))
   ),
   SCClientOut( $cid, $sid2,
                sign(h(blind(h(~pw))), KDF(PRF(~pw, (koprf1⊕koprf2⊕koprf3)), '2'))
   ),
   SCClientOut( $cid, $sid3,
                sign(h(blind(h(~pw))), KDF(PRF(~pw, (koprf1⊕koprf2⊕koprf3)), '3'))
   ),
   Client_3( $cid, ~pw, PRF(~pw, (koprf1⊕koprf2⊕koprf3)), $sid1,
             $sid2, $sid3
   )
   ]

  /*
  rule (modulo AC) client_reconstruct_phase2[derivchecks]:
     [
     Client_2( $cid, ~pw, $sid1, $sid2, $sid3 ),
     SCClientIn( $cid, $sid1, blind(koprf1) ),
     SCClientIn( $cid, $sid2, blind(koprf2) ),
     SCClientIn( $cid, $sid3, blind(koprf3) )
     ]
    --[ ClientReconstructPhase2( $cid, ~pw ) ]->
     [
     SCClientOut( $cid, $sid1,
                  sign(h(blind(h(~pw))), KDF(PRF(~pw, z), '1'))
     ),
     SCClientOut( $cid, $sid2,
                  sign(h(blind(h(~pw))), KDF(PRF(~pw, z), '2'))
     ),
     SCClientOut( $cid, $sid3,
                  sign(h(blind(h(~pw))), KDF(PRF(~pw, z), '3'))
     ),
     Client_3( $cid, ~pw, PRF(~pw, z), $sid1, $sid2, $sid3 )
     ]
    variants (modulo AC)
     1. koprf1
              = koprf1.12
        koprf2
              = koprf2.13
        koprf3
              = koprf1.12
        z     = koprf2.13
    
     2. koprf1
              = koprf1.12
        koprf2
              = koprf2.13
        koprf3
              = koprf2.13
        z     = koprf1.12
    
     3. koprf1
              = koprf1.12
        koprf2
              = koprf2.13
        koprf3
              = zero
        z     = (koprf1.12⊕koprf2.13)
    
     4. koprf1
              = koprf1.12
        koprf2
              = koprf2.13
        koprf3
              = (koprf1.12⊕koprf2.13)
        z     = zero
    
     5. koprf1
              = koprf1.13
        koprf2
              = koprf1.13
        koprf3
              = koprf3.15
        z     = koprf3.15
    
     6. koprf1
              = koprf1.13
        koprf2
              = koprf2.14
        koprf3
              = koprf3.15
        z     = (koprf1.13⊕koprf2.14⊕koprf3.15)
    
     7. koprf1
              = koprf1.13
        koprf2
              = zero
        koprf3
              = koprf3.15
        z     = (koprf1.13⊕koprf3.15)
    
     8. koprf1
              = koprf1.13
        koprf2
              = (koprf1.13⊕koprf3.15)
        koprf3
              = koprf3.15
        z     = zero
    
     9. koprf1
              = koprf1.14
        koprf2
              = koprf2.15
        koprf3
              = (koprf1.14⊕koprf2.15⊕z.17)
        z     = z.17
    
    10. koprf1
              = koprf1.14
        koprf2
              = zero
        koprf3
              = (koprf1.14⊕z.17)
        z     = z.17
    
    11. koprf1
              = koprf1.14
        koprf2
              = (koprf1.14⊕koprf3.16⊕z.17)
        koprf3
              = koprf3.16
        z     = z.17
    
    12. koprf1
              = koprf1.14
        koprf2
              = (koprf1.14⊕z.17)
        koprf3
              = zero
        z     = z.17
    
    13. koprf1
              = koprf1.26
        koprf2
              = koprf2.27
        koprf3
              = (koprf2.27⊕x.45)
        z     = (koprf1.26⊕x.45)
    
    14. koprf1
              = koprf1.26
        koprf2
              = (koprf1.26⊕x.45)
        koprf3
              = koprf3.28
        z     = (koprf3.28⊕x.45)
    
    15. koprf1
              = koprf1.26
        koprf2
              = (koprf1.26⊕x.45)
        koprf3
              = (z.29⊕x.45)
        z     = z.29
    
    16. koprf1
              = koprf1.26
        koprf2
              = (koprf3.28⊕x.45)
        koprf3
              = koprf3.28
        z     = (koprf1.26⊕x.45)
    
    17. koprf1
              = koprf1.26
        koprf2
              = (z.29⊕x.45)
        koprf3
              = (koprf1.26⊕x.45)
        z     = z.29
    
    18. koprf1
              = koprf1.27
        koprf2
              = koprf2.28
        koprf3
              = (koprf1.27⊕x.47)
        z     = (koprf2.28⊕x.47)
    
    19. koprf1
              = koprf1.27
        koprf2
              = (x.45⊕x.46)
        koprf3
              = (x.45⊕x.47)
        z     = (koprf1.27⊕x.46⊕x.47)
    
    20. koprf1
              = koprf1.28
        koprf2
              = (koprf1.28⊕x.47⊕x.48)
        koprf3
              = (x.47⊕x.49)
        z     = (x.48⊕x.49)
    
    21. koprf1
              = koprf1.28
        koprf2
              = (x.47⊕x.48)
        koprf3
              = (koprf1.28⊕x.47⊕x.49)
        z     = (x.48⊕x.49)
    
    22. koprf1
              = zero
        koprf2
              = koprf2.12
        koprf3
              = koprf3.13
        z     = (koprf2.12⊕koprf3.13)
    
    23. koprf1
              = zero
        koprf2
              = koprf2.13
        koprf3
              = (koprf2.13⊕z.15)
        z     = z.15
    
    24. koprf1
              = zero
        koprf2
              = (koprf3.12⊕z.13)
        koprf3
              = koprf3.12
        z     = z.13
    
    25. koprf1
              = zero
        koprf2
              = (x.13⊕x.14)
        koprf3
              = (x.13⊕x.15)
        z     = (x.14⊕x.15)
    
    26. koprf1
              = (koprf2.12⊕koprf3.13)
        koprf2
              = koprf2.12
        koprf3
              = koprf3.13
        z     = zero
    
    27. koprf1
              = (koprf3.12⊕z.13)
        koprf2
              = zero
        koprf3
              = koprf3.12
        z     = z.13
    
    28. koprf1
              = (koprf2.13⊕koprf3.14⊕z.15)
        koprf2
              = koprf2.13
        koprf3
              = koprf3.14
        z     = z.15
    
    29. koprf1
              = (koprf2.13⊕z.15)
        koprf2
              = koprf2.13
        koprf3
              = zero
        z     = z.15
    
    30. koprf1
              = (x.13⊕x.14)
        koprf2
              = zero
        koprf3
              = (x.13⊕x.15)
        z     = (x.14⊕x.15)
    
    31. koprf1
              = (x.13⊕x.14)
        koprf2
              = (x.13⊕x.15)
        koprf3
              = zero
        z     = (x.14⊕x.15)
    
    32. koprf1
              = (x.13⊕x.14)
        koprf2
              = (x.13⊕x.15)
        koprf3
              = (x.14⊕x.15)
        z     = zero
    
    33. koprf1
              = (x.14⊕x.15)
        koprf2
              = (x.14⊕x.16)
        koprf3
              = (x.15⊕x.17)
        z     = (x.16⊕x.17)
    
    34. koprf1
              = (x.14⊕x.15)
        koprf2
              = (x.14⊕x.16)
        koprf3
              = (x.16⊕x.17)
        z     = (x.15⊕x.17)
    
    35. koprf1
              = (x.14⊕x.15)
        koprf2
              = (x.16⊕x.17)
        koprf3
              = (x.14⊕x.16)
        z     = (x.15⊕x.17)
    
    36. koprf1
              = (x.15⊕x.16)
        koprf2
              = (x.15⊕x.17⊕x.18)
        koprf3
              = (x.16⊕x.17⊕x.19)
        z     = (x.18⊕x.19)
    
    37. koprf1
              = (x.15⊕x.16)
        koprf2
              = (x.15⊕x.17⊕x.18)
        koprf3
              = (x.17⊕x.19)
        z     = (x.16⊕x.18⊕x.19)
    
    38. koprf1
              = (x.15⊕x.16)
        koprf2
              = (x.17⊕x.18)
        koprf3
              = (x.15⊕x.17⊕x.19)
        z     = (x.16⊕x.18⊕x.19)
    
    39. koprf1
              = (x.15⊕x.16⊕x.17)
        koprf2
              = (x.15⊕x.18)
        koprf3
              = (x.16⊕x.18⊕x.19)
        z     = (x.17⊕x.19)
    
    40. koprf1
              = (x.15⊕x.16⊕x.17)
        koprf2
              = (x.15⊕x.18)
        koprf3
              = (x.16⊕x.19)
        z     = (x.17⊕x.18⊕x.19)
    
    41. koprf1
              = (x.15⊕x.16⊕x.17)
        koprf2
              = (x.15⊕x.18⊕x.19)
        koprf3
              = (x.16⊕x.18)
        z     = (x.17⊕x.19)
    
    42. koprf1
              = (x.16⊕x.17⊕x.18)
        koprf2
              = (x.16⊕x.19⊕x.20)
        koprf3
              = (x.17⊕x.19⊕x.21)
        z     = (x.18⊕x.20⊕x.21)
    
    43. koprf1
              = (koprf3.21⊕x.33)
        koprf2
              = (z.22⊕x.33)
        koprf3
              = koprf3.21
        z     = z.22
    
    44. koprf1
              = (z.22⊕x.31⊕x.32)
        koprf2
              = (x.31⊕x.34)
        koprf3
              = (x.32⊕x.34)
        z     = z.22
    
    45. koprf1
              = (z.22⊕x.33)
        koprf2
              = (koprf3.21⊕x.33)
        koprf3
              = koprf3.21
        z     = z.22
    
    46. koprf1
              = (koprf2.24⊕x.40)
        koprf2
              = koprf2.24
        koprf3
              = koprf3.25
        z     = (koprf3.25⊕x.40)
    
    47. koprf1
              = (koprf2.24⊕x.40)
        koprf2
              = koprf2.24
        koprf3
              = (z.26⊕x.40)
        z     = z.26
    
    48. koprf1
              = (koprf3.24⊕x.36⊕x.38)
        koprf2
              = (x.36⊕x.39)
        koprf3
              = koprf3.24
        z     = (x.38⊕x.39)
    
    49. koprf1
              = (koprf3.25⊕x.40)
        koprf2
              = koprf2.24
        koprf3
              = koprf3.25
        z     = (koprf2.24⊕x.40)
    
    50. koprf1
              = (z.25⊕x.38)
        koprf2
              = koprf2.23
        koprf3
              = (koprf2.23⊕x.38)
        z     = z.25
    
    51. koprf1
              = (koprf2.26⊕x.42⊕x.43)
        koprf2
              = koprf2.26
        koprf3
              = (x.42⊕x.44)
        z     = (x.43⊕x.44)
    
    52. koprf1
              = (x.30⊕x.31)
        koprf2
              = (z.21⊕x.30⊕x.32)
        koprf3
              = (x.31⊕x.32)
        z     = z.21
    
    53. koprf1
              = (x.30⊕x.31)
        koprf2
              = (x.30⊕x.32)
        koprf3
              = (z.21⊕x.31⊕x.32)
        z     = z.21
    
    54. koprf1
              = (x.35⊕x.36)
        koprf2
              = (x.35⊕x.37)
        koprf3
              = koprf3.23
        z     = (koprf3.23⊕x.36⊕x.37)
    
    55. koprf1
              = (x.36⊕x.37)
        koprf2
              = (koprf3.24⊕x.36⊕x.39)
        koprf3
              = koprf3.24
        z     = (x.37⊕x.39)
    
    56. koprf1
              = (x.41⊕x.42)
        koprf2
              = koprf2.26
        koprf3
              = (koprf2.26⊕x.41⊕x.44)
        z     = (x.42⊕x.44)
    
    57. koprf1
              = (x.41⊕x.42)
        koprf2
              = koprf2.26
        koprf3
              = (x.41⊕x.44)
        z     = (koprf2.26⊕x.42⊕x.44)
  */

restriction Restr_server_reconstruct_phase2_1:
  "∀ x #NOW.
    (Restr_server_reconstruct_phase2_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) server_reconstruct_phase2:
   [
   Server_2( $sid, $cid, s_enc_share, kvfy, bhpw ),
   SCServerIn( $client, $sid, sig )
   ]
  --[
  ServerAction( ),
  Restr_server_reconstruct_phase2_1( verify(sig, h(bhpw), kvfy) )
  ]->
   [ SCServerOut( $client, $sid, s_enc_share ) ]

  // loop breaker: [1]
  /*
  rule (modulo AC) server_reconstruct_phase2:
     [
     Server_2( $sid, $cid, s_enc_share, kvfy, bhpw ),
     SCServerIn( $client, $sid, sig )
     ]
    --[ ServerAction( ), Restr_server_reconstruct_phase2_1( z ) ]->
     [ SCServerOut( $client, $sid, s_enc_share ) ]
    variants (modulo AC)
    1. bhpw  = bhpw.9
       kvfy  = kvfy.9
       sig   = sig.9
       z     = verify(sig.9, h(bhpw.9), kvfy.9)
    
    2. bhpw  = x.9
       kvfy  = pk(x.10)
       sig   = sign(h(x.9), x.10)
       z     = true
    // loop breaker: [1]
  */

rule (modulo E) client_reconstruct_finish:
   [
   Client_3( $cid, ~pw, kauth, $sid1, $sid2, $sid3 ),
   SCClientIn( $cid, $sid1, s_enc1 ),
   SCClientIn( $cid, $sid2, s_enc2 ),
   SCClientIn( $cid, $sid3, s_enc3 ), In( encrypted_secret )
   ]
  --[
  ClientReconstructFinish( $cid, ~pw,
                           sdec(encrypted_secret, KDF((s_enc1⊕s_enc2⊕s_enc3), kauth))
  )
  ]->
   [ ]

  /*
  rule (modulo AC) client_reconstruct_finish:
     [
     Client_3( $cid, ~pw, kauth, $sid1, $sid2, $sid3 ),
     SCClientIn( $cid, $sid1, s_enc1 ),
     SCClientIn( $cid, $sid2, s_enc2 ),
     SCClientIn( $cid, $sid3, s_enc3 ), In( encrypted_secret )
     ]
    --[ ClientReconstructFinish( $cid, ~pw, z ) ]->
     [ ]
    variants (modulo AC)
      1. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = s_enc1.12
         s_enc2
               = s_enc2.12
         s_enc3
               = s_enc3.12
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc1.12⊕s_enc2.12⊕s_enc3.12), kauth.12))
    
      2. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = s_enc1.12
         s_enc2
               = s_enc2.12
         s_enc3
               = zero
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc1.12⊕s_enc2.12), kauth.12))
    
      3. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = s_enc1.12
         s_enc2
               = zero
         s_enc3
               = s_enc3.12
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc1.12⊕s_enc3.12), kauth.12))
    
      4. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = zero
         s_enc2
               = s_enc2.12
         s_enc3
               = s_enc3.12
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc2.12⊕s_enc3.12), kauth.12))
    
      5. encrypted_secret
               = encrypted_secret.13
         kauth = kauth.13
         s_enc1
               = x.12
         s_enc2
               = x.12
         s_enc3
               = s_enc3.13
         z     = sdec(encrypted_secret.13, KDF(s_enc3.13, kauth.13))
    
      6. encrypted_secret
               = encrypted_secret.13
         kauth = kauth.13
         s_enc1
               = x.12
         s_enc2
               = s_enc2.13
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.13, KDF(s_enc2.13, kauth.13))
    
      7. encrypted_secret
               = encrypted_secret.13
         kauth = kauth.13
         s_enc1
               = s_enc1.13
         s_enc2
               = x.12
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.13, KDF(s_enc1.13, kauth.13))
    
      8. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = x.13
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF(zero, kauth.14))
    
      9. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = zero
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     10. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.14, KDF(zero, kauth.14))
    
     11. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = s_enc3.14
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc3.14), kauth.14))
    
     12. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = zero
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     13. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = s_enc1.14
         s_enc2
               = x.12
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc1.14), kauth.14))
    
     14. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = s_enc1.14
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc1.14), kauth.14))
    
     15. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = zero
         s_enc2
               = x.12
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     16. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = zero
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     17. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.14, KDF(zero, kauth.14))
    
     18. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = s_enc3.14
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc3.14), kauth.14))
    
     19. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = zero
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     20. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = s_enc2.14
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc2.14), kauth.14))
    
     21. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = zero
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     22. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = x.13
         s_enc3
               = (x.12⊕x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     23. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = s_enc2.15
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF((x.14⊕s_enc2.15), kauth.15))
    
     24. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = (x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     25. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13⊕x.14)
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     26. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = (x.13⊕x.14)
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     27. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = s_enc1.15
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15,
                      KDF((x.13⊕x.14⊕s_enc1.15), kauth.15))
    
     28. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = zero
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF((x.13⊕x.14), kauth.15))
    
     29. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = (x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     30. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.14
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.13, kauth.15))
    
     31. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = zero
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF((x.13⊕x.14), kauth.15))
    
     32. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     33. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = x.14
         z     = sdec(encrypted_secret.15, KDF(x.13, kauth.15))
    
     34. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = s_enc3.15
         z     = sdec(encrypted_secret.15,
                      KDF((x.13⊕x.14⊕s_enc3.15), kauth.15))
    
     35. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = zero
         z     = sdec(encrypted_secret.15, KDF((x.13⊕x.14), kauth.15))
    
     36. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(zero, kauth.15))
    
     37. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = x.12
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     38. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13⊕x.14)
         s_enc3
               = (x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     39. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = x.12
         s_enc2
               = (x.13⊕x.14)
         s_enc3
               = (x.12⊕x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     40. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.14
         s_enc3
               = (x.12⊕x.14⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     41. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = s_enc2.16
         s_enc3
               = (x.12⊕x.15)
         z     = sdec(encrypted_secret.16,
                      KDF((x.13⊕x.15⊕s_enc2.16), kauth.16))
    
     42. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.13⊕x.14⊕x.15)
         z     = sdec(encrypted_secret.16, KDF(x.15, kauth.16))
    
     43. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     44. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.14⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     45. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = x.14
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     46. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = (x.13⊕x.14)
         z     = sdec(encrypted_secret.16, KDF(x.15, kauth.16))
    
     47. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.14⊕x.15)
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     48. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = x.12
         s_enc3
               = (x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     49. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.12⊕x.15)
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     50. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.12⊕x.15)
         s_enc3
               = (x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF(x.14, kauth.16))
    
     51. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = (x.13⊕x.14⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.15⊕x.16), kauth.17))
    
     52. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = (x.14⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.13⊕x.15⊕x.16), kauth.17))
    
     53. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.14⊕x.15)
         s_enc3
               = (x.12⊕x.14⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.13⊕x.15⊕x.16), kauth.17))
    
     54. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.12⊕x.15)
         s_enc3
               = (x.13⊕x.15⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.14⊕x.16), kauth.17))
    
     55. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.12⊕x.15)
         s_enc3
               = (x.13⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.14⊕x.15⊕x.16), kauth.17))
    
     56. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.12⊕x.15⊕x.16)
         s_enc3
               = (x.13⊕x.15)
         z     = sdec(encrypted_secret.17, KDF((x.14⊕x.16), kauth.17))
    
     57. encrypted_secret
               = encrypted_secret.18
         kauth = kauth.18
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.12⊕x.15⊕x.16)
         s_enc3
               = (x.13⊕x.15⊕x.17)
         z     = sdec(encrypted_secret.18, KDF((x.14⊕x.16⊕x.17), kauth.18))
    
     58. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.13
         s_enc2
               = x.15
         s_enc3
               = x.15
         z     = x.12
    
     59. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = x.13
         s_enc3
               = x.15
         z     = x.12
    
     60. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = x.15
         s_enc3
               = x.13
         z     = x.12
    
     61. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = x.16
         s_enc3
               = (x.13⊕x.15⊕x.16)
         z     = x.12
    
     62. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = zero
         s_enc3
               = (x.13⊕x.15)
         z     = x.12
    
     63. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = zero
         z     = x.12
    
     64. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.13⊕x.15⊕x.16)
         s_enc3
               = x.16
         z     = x.12
    
     65. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = (x.15⊕x.16)
         z     = x.12
    
     66. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.15⊕x.16)
         s_enc3
               = (x.13⊕x.16)
         z     = x.12
    
     67. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = zero
         s_enc2
               = x.15
         s_enc3
               = (x.13⊕x.15)
         z     = x.12
    
     68. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = zero
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = x.15
         z     = x.12
    
     69. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = x.15
         s_enc3
               = zero
         z     = x.12
    
     70. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = x.16
         s_enc3
               = (x.15⊕x.16)
         z     = x.12
    
     71. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = zero
         s_enc3
               = x.15
         z     = x.12
    
     72. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = (x.15⊕x.16)
         s_enc3
               = x.16
         z     = x.12
    
     73. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15⊕x.16)
         s_enc2
               = x.15
         s_enc3
               = x.16
         z     = x.12
    
     74. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15⊕x.16)
         s_enc2
               = (x.15⊕x.17)
         s_enc3
               = (x.16⊕x.17)
         z     = x.12
    
     75. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = x.15
         s_enc3
               = (x.13⊕x.16)
         z     = x.12
    
     76. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = x.16
         z     = x.12
    
     77. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = (x.13⊕x.15⊕x.17)
         s_enc3
               = (x.16⊕x.17)
         z     = x.12
    
     78. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = (x.15⊕x.17)
         s_enc3
               = (x.13⊕x.16⊕x.17)
         z     = x.12
    
     79. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = x.14
         s_enc2
               = x.15
         s_enc3
               = (x.14⊕x.15)
         z     = x.12
    
     80. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = x.14
         s_enc2
               = (x.14⊕x.15)
         s_enc3
               = x.15
         z     = x.12
    
     81. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = (x.14⊕x.15)
         s_enc2
               = x.14
         s_enc3
               = x.15
         z     = x.12
    
     82. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = (x.14⊕x.15)
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = (x.15⊕x.16)
         z     = x.12
    
     83. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = x.14
         s_enc3
               = zero
         z     = x.12
    
     84. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = x.16
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     85. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = zero
         s_enc3
               = x.14
         z     = x.12
    
     86. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = x.16
         z     = x.12
    
     87. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = x.13
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     88. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = x.14
         z     = x.12
    
     89. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = (x.13⊕x.16⊕x.17)
         s_enc3
               = (x.14⊕x.17)
         z     = x.12
    
     90. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = (x.13⊕x.17)
         s_enc3
               = (x.14⊕x.16⊕x.17)
         z     = x.12
    
     91. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = zero
         s_enc2
               = x.13
         s_enc3
               = x.14
         z     = x.12
    
     92. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = zero
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     93. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = x.14
         s_enc3
               = x.16
         z     = x.12
    
     94. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = x.16
         s_enc3
               = x.14
         z     = x.12
    
     95. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = x.17
         s_enc3
               = (x.14⊕x.16⊕x.17)
         z     = x.12
    
     96. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = zero
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     97. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = zero
         z     = x.12
    
     98. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.14⊕x.16⊕x.17)
         s_enc3
               = x.17
         z     = x.12
    
     99. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.14⊕x.17)
         s_enc3
               = (x.16⊕x.17)
         z     = x.12
    
    100. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.16⊕x.17)
         s_enc3
               = (x.14⊕x.17)
         z     = x.12
    
    101. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = x.16
         s_enc3
               = (x.14⊕x.17)
         z     = x.12
    
    102. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = x.17
         z     = x.12
    
    103. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = (x.14⊕x.16⊕x.18)
         s_enc3
               = (x.17⊕x.18)
         z     = x.12
    
    104. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = (x.16⊕x.18)
         s_enc3
               = (x.14⊕x.17⊕x.18)
         z     = x.12
    
    105. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.16⊕x.17)
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = (x.14⊕x.17)
         z     = x.12
    
    106. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.16⊕x.17)
         s_enc2
               = (x.13⊕x.16⊕x.18)
         s_enc3
               = (x.14⊕x.17⊕x.18)
         z     = x.12
    
    107. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = x.13
         s_enc2
               = x.14
         s_enc3
               = x.15
         z     = x.12
    
    108. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = x.13
         s_enc2
               = (x.14⊕x.17)
         s_enc3
               = (x.15⊕x.17)
         z     = x.12
    
    109. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = x.14
         s_enc3
               = (x.15⊕x.17)
         z     = x.12
    
    110. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = (x.14⊕x.17)
         s_enc3
               = x.15
         z     = x.12
    
    111. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = (x.14⊕x.17⊕x.18)
         s_enc3
               = (x.15⊕x.18)
         z     = x.12
    
    112. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = (x.14⊕x.18)
         s_enc3
               = (x.15⊕x.17⊕x.18)
         z     = x.12
    
    113. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17⊕x.18)
         s_enc2
               = (x.14⊕x.17)
         s_enc3
               = (x.15⊕x.18)
         z     = x.12
    
    114. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17⊕x.18)
         s_enc2
               = (x.14⊕x.17⊕x.19)
         s_enc3
               = (x.15⊕x.18⊕x.19)
         z     = x.12
  */

restriction servers_offline:
  "∀ #i #j.
    ((PQAdversaryAction( ) @ #i) ∧ (ServerAction( ) @ #j)) ⇒ (#j < #i)"
  // safety formula

lemma types [sources]:
  all-traces
  "(∀ msg #i.
     (SourcesAdversaryRecv( msg ) @ #i) ⇒
     ((∃ #j. (SourceC( msg ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (!KU( msg ) @ #j) ∧ (#j < #i)))) ∧
   (∀ msg #i.
     (SourcesUnblind( msg ) @ #i) ⇒
     ((∃ #j. (SourceB( msg ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (!KU( msg ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ msg #i.
    (SourcesAdversaryRecv( msg ) @ #i)
   ∧
    (∀ #j. (SourceC( msg ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( msg ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ msg #i.
    (SourcesUnblind( msg ) @ #i)
   ∧
    (∀ #j. (SourceB( msg ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( msg ) @ #j) ⇒ ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ msg #i.
           (SourcesAdversaryRecv( msg ) @ #i)
          ∧
           (∀ #j. (SourceC( msg ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (!KU( msg ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ msg #i.
           (SourcesUnblind( msg ) @ #i)
          ∧
           (∀ #j. (SourceB( msg ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (!KU( msg ) @ #j) ⇒ ¬(#j < #i))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (SourceC( msg ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (!KU( msg ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !SCServerKnows( 'adv', $server, msg ) ▶₀ #i )
        case server_out_case_1
        by contradiction /* from formulas */
      next
        case server_out_case_2
        by contradiction /* from formulas */
      next
        case server_out_case_3
        solve( SCServerIn( $client.1, $server,
                           <$cid, koprf_share, msg, pk(x)>
               ) ▶₁ #vr.3 )
          case server_in_case_1
          by contradiction /* from formulas */
        next
          case server_in_case_2
          by contradiction /* from formulas */
        next
          case server_in_case_3
          by contradiction /* from formulas */
        next
          case server_in_case_4
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #j. (SourceB( msg ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (!KU( msg ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !KU( blind(msg) ) @ #vk )
        case adversary_recv_case_1
        solve( SCServerIn( $client, $server, <$cid, msg, s_enc_share, kvfy>
               ) ▶₁ #vr.3 )
          case server_in_case_1
          by contradiction /* from formulas */
        next
          case server_in_case_2
          by contradiction /* from formulas */
        next
          case server_in_case_3
          by contradiction /* from formulas */
        next
          case server_in_case_4
          by contradiction /* from formulas */
        qed
      next
        case adversary_recv_case_2
        solve( SCServerIn( $client.1, $server,
                           <$cid, koprf_share, t, pk(x)>
               ) ▶₁ #vr.4 )
          case server_in_case_1
          by contradiction /* cyclic */
        next
          case server_in_case_2
          by contradiction /* impossible chain */
        next
          case server_in_case_3
          by contradiction /* impossible chain */
        next
          case server_in_case_4
          by contradiction /* impossible chain */
        qed
      next
        case c_blind
        by contradiction /* from formulas */
      next
        case eavesdrop_server_case_1
        by contradiction /* from formulas */
      next
        case eavesdrop_server_case_2
        by contradiction /* from formulas */
      next
        case eavesdrop_server_case_3
        by contradiction /* from formulas */
      next
        case unblind
        solve( (∃ #j. (SourceB( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
               (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr)) )
          case case_1
          solve( SourceB( t ) @ #j )
            case client_register_case_1
            by contradiction /* impossible chain */
          next
            case client_register_case_2
            by contradiction /* impossible chain */
          next
            case client_register_case_3
            by contradiction /* impossible chain */
          next
            case client_register_case_4
            by contradiction /* impossible chain */
          qed
        next
          case case_2
          by contradiction /* cyclic */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma executability:
  exists-trace
  "((((¬(∃ #i. AdversaryAction( ) @ #i)) ∧
      (∀ cid pw1 pw2 secret1 secret2 #i #j.
        ((ClientRegister( cid, pw1, secret1 ) @ #i) ∧
         (ClientRegister( cid, pw2, secret2 ) @ #j)) ⇒
        (#i = #j))) ∧
     (∀ cid pw1 pw2 #i #j.
       ((ClientReconstructPhase1( cid, pw1 ) @ #i) ∧
        (ClientReconstructPhase1( cid, pw2 ) @ #j)) ⇒
       (#i = #j))) ∧
    (∀ sid #i #j.
      ((ServerReconstructPhase1( sid ) @ #i) ∧
       (ServerReconstructPhase1( sid ) @ #j)) ⇒
      (#i = #j))) ∧
   (∃ cid pw secret #i #j #k #l.
     (((ClientRegister( cid, pw, secret ) @ #i) ∧
       (ClientReconstructPhase1( cid, pw ) @ #j)) ∧
      (ClientReconstructPhase2( cid, pw ) @ #k)) ∧
     (ClientReconstructFinish( cid, pw, secret ) @ #l))"
/*
guarded formula characterizing all satisfying traces:
"(∀ #i. (AdversaryAction( ) @ #i) ⇒ ⊥) ∧
 (∀ cid pw1 pw2 secret1 secret2 #i #j.
   (ClientRegister( cid, pw1, secret1 ) @ #i) ∧
   (ClientRegister( cid, pw2, secret2 ) @ #j)
  ⇒
   #i = #j) ∧
 (∀ cid pw1 pw2 #i #j.
   (ClientReconstructPhase1( cid, pw1 ) @ #i) ∧
   (ClientReconstructPhase1( cid, pw2 ) @ #j)
  ⇒
   #i = #j) ∧
 (∀ sid #i #j.
   (ServerReconstructPhase1( sid ) @ #i) ∧
   (ServerReconstructPhase1( sid ) @ #j)
  ⇒
   #i = #j) ∧
 (∃ cid pw secret #i #j #k #l.
   (ClientRegister( cid, pw, secret ) @ #i) ∧
   (ClientReconstructPhase1( cid, pw ) @ #j) ∧
   (ClientReconstructPhase2( cid, pw ) @ #k) ∧
   (ClientReconstructFinish( cid, pw, secret ) @ #l))"
*/
simplify
solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
  case client_initialise
  solve( !Server( $sid1 ) ▶₇ #i )
    case create_server
    solve( !Server( $sid2 ) ▶₈ #i )
      case create_server
      solve( !Server( $sid3 ) ▶₉ #i )
        case create_server
        solve( !Client_1( $cid, ~pw, $sid1.1, $sid2.1, $sid3.1 ) ▶₀ #j )
          case client_register
          solve( Client_2( $cid, ~pw, $sid1.1, $sid2.1, $sid3.1 ) ▶₀ #k )
            case client_reconstruct_phase1
            solve( SCClientIn( $cid, $sid1, blind(koprf1.1) ) ▶₁ #k )
              case client_in_case_1
              by contradiction /* from formulas */
            next
              case client_in_case_2
              solve( SCClientIn( $cid, $sid2, blind(koprf2.1) ) ▶₂ #k )
                case client_in_case_1
                by contradiction /* from formulas */
              next
                case client_in_case_2
                solve( SCClientIn( $cid, $sid3, blind(koprf3.1) ) ▶₃ #k )
                  case client_in_case_1
                  by contradiction /* from formulas */
                next
                  case client_in_case_2
                  solve( Client_3( $cid, ~pw, kauth, $sid1.1, $sid2.1, $sid3.1
                         ) ▶₀ #l )
                    case client_reconstruct_phase2
                    solve( SCClientIn( $cid, $sid1, s_enc1.1 ) ▶₁ #l )
                      case client_in_case_1
                      by contradiction /* from formulas */
                    next
                      case client_in_case_2
                      by sorry
                    next
                      case client_in_case_3
                      solve( SCClientIn( $cid, $sid2, s_enc2.1 ) ▶₂ #l )
                        case client_in_case_1
                        by contradiction /* from formulas */
                      next
                        case client_in_case_2
                        by sorry
                      next
                        case client_in_case_3
                        solve( SCClientIn( $cid, $sid3, s_enc3.1 ) ▶₃ #l )
                          case client_in_case_1
                          by contradiction /* from formulas */
                        next
                          case client_in_case_2
                          by sorry
                        next
                          case client_in_case_3
                          solve( !KU( senc(~secret, KDF(x, PRF(~pw, z.2))) ) @ #vk )
                            case c_senc
                            by sorry
                          next
                            case client_register
                            solve( splitEqs(0) )
                              case split
                              solve( SCServerIn( $cid, $sid1, <$cid.1, bhpw> ) ▶₁ #vr.6 )
                                case server_in_case_1
                                by contradiction /* from formulas */
                              next
                                case server_in_case_2
                                by sorry
                              next
                                case server_in_case_3
                                by contradiction /* from formulas */
                              next
                                case server_in_case_4
                                by contradiction /* from formulas */
                              next
                                case server_in_case_5
                                solve( SCServerIn( $client, $sid1,
                                                   <$cid, koprf1.1, s_enc_share, pk(x)>
                                       ) ▶₁ #vr.7 )
                                  case server_in_case_1
                                  by contradiction /* from formulas */
                                next
                                  case server_in_case_2
                                  solve( SCServerIn( $cid, $sid2, <$cid.1, bhpw> ) ▶₁ #vr.11 )
                                    case server_in_case_1
                                    by contradiction /* from formulas */
                                  next
                                    case server_in_case_2
                                    by sorry
                                  next
                                    case server_in_case_3
                                    by contradiction /* from formulas */
                                  next
                                    case server_in_case_4
                                    solve( SCServerIn( $client, $sid2,
                                                       <$cid, koprf2.1, s_enc2.1, pk(x)>
                                           ) ▶₁ #vr.12 )
                                      case server_in_case_1
                                      by contradiction /* from formulas */
                                    next
                                      case server_in_case_2
                                      solve( SCServerIn( $cid, $sid3, <$cid.1, bhpw> ) ▶₁ #vr.16 )
                                        case server_in_case_1
                                        by contradiction /* from formulas */
                                      next
                                        case server_in_case_2
                                        by sorry
                                      next
                                        case server_in_case_3
                                        solve( SCServerIn( $client, $sid3,
                                                           <$cid, ~koprf3, ~s_enc3, pk(x)>
                                               ) ▶₁ #vr.17 )
                                          case server_in_case_1
                                          by contradiction /* from formulas */
                                        next
                                          case server_in_case_2
                                          solve( SCServerIn( $cid, $sid1,
                                                             sign(h(blind(h(~pw))),
                                                                  KDF(PRF(~pw,
                                                                          (~koprf1⊕~koprf2⊕~koprf3
                                                                          )),
                                                                      '1'))
                                                 ) ▶₁ #vr.21 )
                                            case server_in_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case server_in_case_2
                                            solve( SCServerIn( $cid, $sid2,
                                                               sign(h(blind(h(~pw))),
                                                                    KDF(PRF(~pw,
                                                                            (~koprf1⊕~koprf2⊕~koprf3
                                                                            )),
                                                                        '2'))
                                                   ) ▶₁ #vr.24 )
                                              case server_in_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case server_in_case_2
                                              solve( SCServerIn( $cid, $sid3,
                                                                 sign(h(blind(h(~pw))),
                                                                      KDF(PRF(~pw,
                                                                              (~koprf1⊕~koprf2⊕
                                                                               ~koprf3)),
                                                                          '3'))
                                                     ) ▶₁ #vr.27 )
                                                case server_in_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case server_in_case_2
                                                SOLVED // trace found
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                next
                                  case server_in_case_3
                                  by contradiction /* from formulas */
                                next
                                  case server_in_case_4
                                  by contradiction /* from formulas */
                                qed
                              next
                                case server_in_case_6
                                by contradiction /* from formulas */
                              next
                                case server_in_case_7
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case client_in_case_3
                  by sorry
                qed
              next
                case client_in_case_3
                by sorry
              qed
            next
              case client_in_case_3
              by sorry
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_koprf_pre_quantum:
  all-traces
  "∀ koprf cid sid1 sid2 sid3 #i.
    (Secret( 'koprf', koprf, cid, sid1, sid2, sid3 ) @ #i) ⇒
    (((¬(∃ #j. K( koprf ) @ #j)) ∨
      (∃ #j #k #l.
        ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
        (!Compromised( sid3 ) @ #l))) ∨
     (∃ #j. PQAdversaryAction( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ koprf cid sid1 sid2 sid3 #i.
  (Secret( 'koprf', koprf, cid, sid1, sid2, sid3 ) @ #i)
 ∧
  (∃ #j. (K( koprf ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥) ∧
  (∀ #j. (PQAdversaryAction( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Secret( 'koprf', koprf, cid, sid1, sid2, sid3 ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !Server( $sid1 ) ▶₇ #i )
      case create_server
      solve( !Server( $sid2 ) ▶₈ #i )
        case create_server
        solve( !Server( $sid3 ) ▶₉ #i )
          case create_server
          solve( splitEqs(0) )
            case split
            solve( !KU( (~koprf1⊕~koprf2⊕~koprf3) ) @ #vk )
              case c_xor_case_1
              solve( !KU( ~koprf2 ) @ #vk.2 )
                case eavesdrop_server
                solve( !KU( (~koprf1⊕~koprf3) ) @ #vk.2 )
                  case c_xor
                  solve( !KU( ~koprf3 ) @ #vk.3 )
                    case eavesdrop_server
                    solve( !KU( ~koprf1 ) @ #vk.4 )
                      case eavesdrop_server
                      by contradiction /* from formulas */
                    next
                      case unblind
                      by contradiction /* from formulas */
                    qed
                  next
                    case unblind
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~koprf1⊕~koprf3) ) ▶₀ #vk.2 )
                    case adversary_recv
                    solve( !SCServerKnows( 'adv', $server, t ) ▶₀ #vr.10 )
                      case server_out_case_1
                      by contradiction /* cyclic */
                    next
                      case server_out_case_2
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case server_out_case_3
                      solve( SCServerIn( $client.1, $server,
                                         <$cid.1, koprf_share, t, pk(x)>
                             ) ▶₁ #vr.14 )
                        case server_in_case_1
                        by contradiction /* cyclic */
                      next
                        case server_in_case_2
                        by contradiction /* impossible chain */
                      next
                        case server_in_case_3
                        by contradiction /* impossible chain */
                      next
                        case server_in_case_4
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case client_register
                    solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                      case d_0_sdec
                      by contradiction /* impossible chain */
                    qed
                  next
                    case eavesdrop_server
                    solve( !SCClientKnows( $client, $server, t ) ▶₀ #vr.10 )
                      case client_out_case_01
                      by contradiction /* cyclic */
                    next
                      case client_out_case_02
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.17, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      qed
                    next
                      case client_out_case_03
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.17, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      qed
                    next
                      case client_out_case_04
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.17, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      qed
                    next
                      case client_out_case_05
                      by contradiction /* impossible chain */
                    next
                      case client_out_case_06
                      by contradiction /* impossible chain */
                    next
                      case client_out_case_07
                      by contradiction /* impossible chain */
                    next
                      case client_out_case_08
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_09
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_10
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_11
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_12
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_13
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_14
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_15
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_16
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_17
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_18
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_19
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_20
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_21
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_22
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_23
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_24
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_25
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_26
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_27
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_28
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_29
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_30
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_31
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_32
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_33
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_34
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_35
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_36
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_37
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_38
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_39
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_40
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_41
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_42
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_43
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_44
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_45
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_46
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_47
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_48
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_49
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_50
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_51
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_52
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_53
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_54
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_55
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_56
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_57
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_58
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_59
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_60
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_61
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_62
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_63
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_64
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_65
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_66
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_67
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_68
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_69
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_70
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_71
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_72
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_73
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_74
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_75
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_76
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_77
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_78
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_79
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_80
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_81
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_82
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_83
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_84
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_85
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_86
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_87
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_88
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    qed
                  next
                    case toprf_evaluate
                    by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                  next
                    case unblind
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case unblind
                by contradiction /* from formulas */
              qed
            next
              case c_xor_case_2
              solve( !KU( ~koprf1 ) @ #vk.2 )
                case eavesdrop_server
                solve( !KU( (~koprf2⊕~koprf3) ) @ #vk.2 )
                  case c_xor
                  solve( !KU( ~koprf3 ) @ #vk.3 )
                    case eavesdrop_server
                    solve( !KU( ~koprf2 ) @ #vk.4 )
                      case eavesdrop_server
                      by contradiction /* from formulas */
                    next
                      case unblind
                      by contradiction /* from formulas */
                    qed
                  next
                    case unblind
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~koprf2⊕~koprf3) ) ▶₀ #vk.2 )
                    case adversary_recv
                    solve( !SCServerKnows( 'adv', $server, t ) ▶₀ #vr.10 )
                      case server_out_case_1
                      by contradiction /* cyclic */
                    next
                      case server_out_case_2
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case server_out_case_3
                      solve( SCServerIn( $client.1, $server,
                                         <$cid.1, koprf_share, t, pk(x)>
                             ) ▶₁ #vr.14 )
                        case server_in_case_1
                        by contradiction /* cyclic */
                      next
                        case server_in_case_2
                        by contradiction /* impossible chain */
                      next
                        case server_in_case_3
                        by contradiction /* impossible chain */
                      next
                        case server_in_case_4
                        by contradiction /* impossible chain */
                      qed
                    qed
                  next
                    case client_register
                    solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                      case d_0_sdec
                      by contradiction /* impossible chain */
                    qed
                  next
                    case eavesdrop_server
                    solve( !SCClientKnows( $client, $server, t ) ▶₀ #vr.10 )
                      case client_out_case_01
                      by contradiction /* cyclic */
                    next
                      case client_out_case_02
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.17, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      qed
                    next
                      case client_out_case_03
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.17, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      qed
                    next
                      case client_out_case_04
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.17, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      qed
                    next
                      case client_out_case_05
                      by contradiction /* impossible chain */
                    next
                      case client_out_case_06
                      by contradiction /* impossible chain */
                    next
                      case client_out_case_07
                      by contradiction /* impossible chain */
                    next
                      case client_out_case_08
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_09
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_10
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_11
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_12
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_13
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_14
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_15
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_16
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_17
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_18
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_19
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_20
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_21
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_22
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_23
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_24
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_25
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_26
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_27
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_28
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_29
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_30
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_31
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_32
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_33
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_34
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_35
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_36
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_37
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_38
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_39
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_40
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_41
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_42
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_43
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_44
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_45
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_46
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_47
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_48
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_49
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_50
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_51
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_52
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_53
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_54
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_55
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_56
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_57
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_58
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_59
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_60
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_61
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_62
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_63
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_64
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_65
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_66
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_67
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_68
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_69
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_70
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_71
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_72
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_73
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_74
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_75
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_76
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_77
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_78
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_79
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_80
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_81
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_82
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_83
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_84
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_85
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_86
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_87
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_88
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    qed
                  next
                    case toprf_evaluate
                    by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                  next
                    case unblind
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case unblind
                by contradiction /* from formulas */
              qed
            next
              case c_xor_case_3
              solve( !KU( ~koprf3 ) @ #vk.1 )
                case eavesdrop_server
                solve( !KU( (~koprf1⊕~koprf2) ) @ #vk.2 )
                  case c_xor
                  solve( !KU( ~koprf2 ) @ #vk.3 )
                    case eavesdrop_server
                    solve( !KU( ~koprf1 ) @ #vk.4 )
                      case eavesdrop_server
                      by contradiction /* from formulas */
                    next
                      case unblind
                      by contradiction /* from formulas */
                    qed
                  next
                    case unblind
                    by contradiction /* from formulas */
                  qed
                next
                  case coerce
                  solve( !KD( (~koprf1⊕~koprf2) ) ▶₀ #vk.2 )
                    case adversary_recv
                    solve( !SCServerKnows( 'adv', $server, t ) ▶₀ #vr.10 )
                      case server_out_case_1
                      by contradiction /* cyclic */
                    next
                      case server_out_case_2
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case server_out_case_3
                      solve( SCServerIn( 'adv', $server, sign(h(bhpw), x) ) ▶₁ #vr.12 )
                        case server_in_case_01
                        solve( SCServerIn( $client.1, $server,
                                           <$cid.1, koprf_share, t, pk(x)>
                               ) ▶₁ #vr.14 )
                          case server_in_case_1
                          by contradiction /* cyclic */
                        next
                          case server_in_case_2
                          by contradiction /* impossible chain */
                        next
                          case server_in_case_3
                          by contradiction /* impossible chain */
                        next
                          case server_in_case_4
                          by contradiction /* impossible chain */
                        qed
                      next
                        case server_in_case_02
                        by contradiction /* from formulas */
                      next
                        case server_in_case_03
                        by contradiction /* from formulas */
                      next
                        case server_in_case_04
                        by contradiction /* from formulas */
                      next
                        case server_in_case_05
                        by contradiction /* from formulas */
                      next
                        case server_in_case_06
                        by contradiction /* from formulas */
                      next
                        case server_in_case_07
                        by contradiction /* from formulas */
                      next
                        case server_in_case_08
                        by contradiction /* from formulas */
                      next
                        case server_in_case_09
                        by contradiction /* from formulas */
                      next
                        case server_in_case_10
                        by contradiction /* from formulas */
                      next
                        case server_in_case_11
                        by contradiction /* from formulas */
                      next
                        case server_in_case_12
                        by contradiction /* from formulas */
                      next
                        case server_in_case_13
                        by contradiction /* from formulas */
                      next
                        case server_in_case_14
                        by contradiction /* from formulas */
                      next
                        case server_in_case_15
                        by contradiction /* from formulas */
                      next
                        case server_in_case_16
                        by contradiction /* from formulas */
                      next
                        case server_in_case_17
                        by contradiction /* from formulas */
                      next
                        case server_in_case_18
                        by contradiction /* from formulas */
                      next
                        case server_in_case_19
                        by contradiction /* from formulas */
                      next
                        case server_in_case_20
                        by contradiction /* from formulas */
                      next
                        case server_in_case_21
                        by contradiction /* from formulas */
                      next
                        case server_in_case_22
                        by contradiction /* from formulas */
                      next
                        case server_in_case_23
                        by contradiction /* from formulas */
                      next
                        case server_in_case_24
                        by contradiction /* from formulas */
                      next
                        case server_in_case_25
                        by contradiction /* from formulas */
                      next
                        case server_in_case_26
                        by contradiction /* from formulas */
                      next
                        case server_in_case_27
                        by contradiction /* from formulas */
                      next
                        case server_in_case_28
                        by contradiction /* from formulas */
                      next
                        case server_in_case_29
                        by contradiction /* from formulas */
                      next
                        case server_in_case_30
                        by contradiction /* from formulas */
                      next
                        case server_in_case_31
                        by contradiction /* from formulas */
                      next
                        case server_in_case_32
                        by contradiction /* from formulas */
                      next
                        case server_in_case_33
                        by contradiction /* from formulas */
                      next
                        case server_in_case_34
                        by contradiction /* from formulas */
                      next
                        case server_in_case_35
                        by contradiction /* from formulas */
                      next
                        case server_in_case_36
                        by contradiction /* from formulas */
                      next
                        case server_in_case_37
                        by contradiction /* from formulas */
                      next
                        case server_in_case_38
                        by contradiction /* from formulas */
                      next
                        case server_in_case_39
                        by contradiction /* from formulas */
                      next
                        case server_in_case_40
                        by contradiction /* from formulas */
                      next
                        case server_in_case_41
                        by contradiction /* from formulas */
                      next
                        case server_in_case_42
                        by contradiction /* from formulas */
                      next
                        case server_in_case_43
                        by contradiction /* from formulas */
                      next
                        case server_in_case_44
                        by contradiction /* from formulas */
                      next
                        case server_in_case_45
                        by contradiction /* from formulas */
                      next
                        case server_in_case_46
                        by contradiction /* from formulas */
                      next
                        case server_in_case_47
                        by contradiction /* from formulas */
                      next
                        case server_in_case_48
                        by contradiction /* from formulas */
                      next
                        case server_in_case_49
                        by contradiction /* from formulas */
                      next
                        case server_in_case_50
                        by contradiction /* from formulas */
                      next
                        case server_in_case_51
                        by contradiction /* from formulas */
                      next
                        case server_in_case_52
                        by contradiction /* from formulas */
                      next
                        case server_in_case_53
                        by contradiction /* from formulas */
                      next
                        case server_in_case_54
                        by contradiction /* from formulas */
                      next
                        case server_in_case_55
                        by contradiction /* from formulas */
                      next
                        case server_in_case_56
                        by contradiction /* from formulas */
                      next
                        case server_in_case_57
                        by contradiction /* from formulas */
                      next
                        case server_in_case_58
                        by contradiction /* from formulas */
                      next
                        case server_in_case_59
                        by contradiction /* from formulas */
                      next
                        case server_in_case_60
                        by contradiction /* from formulas */
                      next
                        case server_in_case_61
                        by contradiction /* from formulas */
                      next
                        case server_in_case_62
                        by contradiction /* from formulas */
                      next
                        case server_in_case_63
                        by contradiction /* from formulas */
                      next
                        case server_in_case_64
                        by contradiction /* from formulas */
                      next
                        case server_in_case_65
                        by contradiction /* from formulas */
                      next
                        case server_in_case_66
                        by contradiction /* from formulas */
                      next
                        case server_in_case_67
                        by contradiction /* from formulas */
                      next
                        case server_in_case_68
                        by contradiction /* from formulas */
                      next
                        case server_in_case_69
                        by contradiction /* from formulas */
                      next
                        case server_in_case_70
                        by contradiction /* from formulas */
                      next
                        case server_in_case_71
                        by contradiction /* from formulas */
                      next
                        case server_in_case_72
                        by contradiction /* from formulas */
                      next
                        case server_in_case_73
                        by contradiction /* from formulas */
                      next
                        case server_in_case_74
                        by contradiction /* from formulas */
                      next
                        case server_in_case_75
                        by contradiction /* from formulas */
                      next
                        case server_in_case_76
                        by contradiction /* from formulas */
                      next
                        case server_in_case_77
                        by contradiction /* from formulas */
                      next
                        case server_in_case_78
                        by contradiction /* from formulas */
                      next
                        case server_in_case_79
                        by contradiction /* from formulas */
                      next
                        case server_in_case_80
                        by contradiction /* from formulas */
                      next
                        case server_in_case_81
                        by contradiction /* from formulas */
                      next
                        case server_in_case_82
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case client_register
                    solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                      case d_0_sdec
                      by contradiction /* impossible chain */
                    qed
                  next
                    case eavesdrop_server
                    solve( !SCClientKnows( $client, $server, t ) ▶₀ #vr.10 )
                      case client_out_case_01
                      by contradiction /* cyclic */
                    next
                      case client_out_case_02
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.17, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      qed
                    next
                      case client_out_case_03
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.17, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      qed
                    next
                      case client_out_case_04
                      solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                        case d_0_fst
                        by contradiction /* forbidden KD-fact */
                      next
                        case d_0_snd
                        solve( (#vr.17, 0) ~~> (#vk.2, 0) )
                          case d_0_fst
                          by contradiction /* impossible chain */
                        next
                          case d_0_snd
                          solve( (#vr.18, 0) ~~> (#vk.2, 0) )
                            case d_0_fst
                            by contradiction /* impossible chain */
                          next
                            case d_0_snd
                            by solve( (#vr.19, 0) ~~> (#vk.2, 0) )
                          qed
                        qed
                      qed
                    next
                      case client_out_case_05
                      by contradiction /* impossible chain */
                    next
                      case client_out_case_06
                      by contradiction /* impossible chain */
                    next
                      case client_out_case_07
                      by contradiction /* impossible chain */
                    next
                      case client_out_case_08
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_09
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_10
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_11
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_12
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_13
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_14
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_15
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_16
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_17
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_18
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_19
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_20
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_21
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_22
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_23
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_24
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_25
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_26
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_27
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_28
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_29
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_30
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_31
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_32
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_33
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_34
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_35
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_36
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_37
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_38
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_39
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_40
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_41
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_42
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_43
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_44
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_45
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_46
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_47
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_48
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_49
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_50
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_51
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_52
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_53
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_54
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_55
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_56
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_57
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_58
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_59
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_60
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_61
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_62
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_63
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_64
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_65
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_66
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_67
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_68
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_69
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_70
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_71
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_72
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_73
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_74
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_75
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_76
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_77
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_78
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_79
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_80
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_81
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_82
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_83
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_84
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_85
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_86
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_87
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    next
                      case client_out_case_88
                      by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                    qed
                  next
                    case toprf_evaluate
                    by solve( (#vl.1, 0) ~~> (#vk.2, 0) )
                  next
                    case unblind
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case unblind
                by contradiction /* from formulas */
              qed
            next
              case coerce
              solve( !KD( (~koprf1⊕~koprf2⊕~koprf3) ) ▶₀ #vk )
                case adversary_recv
                solve( !SCServerKnows( 'adv', $server, t ) ▶₀ #vr.4 )
                  case server_out_case_1
                  by contradiction /* cyclic */
                next
                  case server_out_case_2
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case server_out_case_3
                  solve( SCServerIn( $client.1, $server,
                                     <$cid.1, koprf_share, t, pk(x)>
                         ) ▶₁ #vr.8 )
                    case server_in_case_1
                    by contradiction /* cyclic */
                  next
                    case server_in_case_2
                    by contradiction /* impossible chain */
                  next
                    case server_in_case_3
                    by contradiction /* impossible chain */
                  next
                    case server_in_case_4
                    by contradiction /* impossible chain */
                  qed
                qed
              next
                case client_register
                solve( (#vl, 0) ~~> (#vk, 0) )
                  case d_0_sdec
                  by contradiction /* impossible chain */
                qed
              next
                case eavesdrop_server
                solve( !SCClientKnows( $client, $server, t ) ▶₀ #vr.4 )
                  case client_out_case_01
                  by contradiction /* cyclic */
                next
                  case client_out_case_02
                  solve( (#vl, 0) ~~> (#vk, 0) )
                    case d_0_fst
                    by contradiction /* forbidden KD-fact */
                  next
                    case d_0_snd
                    solve( (#vr.11, 0) ~~> (#vk, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      solve( (#vr.12, 0) ~~> (#vk, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.13, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case client_out_case_03
                  solve( (#vl, 0) ~~> (#vk, 0) )
                    case d_0_fst
                    by contradiction /* forbidden KD-fact */
                  next
                    case d_0_snd
                    solve( (#vr.11, 0) ~~> (#vk, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      solve( (#vr.12, 0) ~~> (#vk, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.13, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case client_out_case_04
                  solve( (#vl, 0) ~~> (#vk, 0) )
                    case d_0_fst
                    by contradiction /* forbidden KD-fact */
                  next
                    case d_0_snd
                    solve( (#vr.11, 0) ~~> (#vk, 0) )
                      case d_0_fst
                      by contradiction /* impossible chain */
                    next
                      case d_0_snd
                      solve( (#vr.12, 0) ~~> (#vk, 0) )
                        case d_0_fst
                        by contradiction /* impossible chain */
                      next
                        case d_0_snd
                        by solve( (#vr.13, 0) ~~> (#vk, 0) )
                      qed
                    qed
                  qed
                next
                  case client_out_case_05
                  by contradiction /* impossible chain */
                next
                  case client_out_case_06
                  by contradiction /* impossible chain */
                next
                  case client_out_case_07
                  by contradiction /* impossible chain */
                next
                  case client_out_case_08
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_09
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_10
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_11
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_12
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_13
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_14
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_15
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_16
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_17
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_18
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_19
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_20
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_21
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_22
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_23
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_24
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_25
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_26
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_27
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_28
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_29
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_30
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_31
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_32
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_33
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_34
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_35
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_36
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_37
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_38
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_39
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_40
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_41
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_42
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_43
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_44
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_45
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_46
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_47
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_48
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_49
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_50
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_51
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_52
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_53
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_54
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_55
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_56
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_57
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_58
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_59
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_60
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_61
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_62
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_63
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_64
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_65
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_66
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_67
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_68
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_69
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_70
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_71
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_72
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_73
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_74
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_75
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_76
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_77
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_78
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_79
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_80
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_81
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_82
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_83
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_84
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_85
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_86
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_87
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                next
                  case client_out_case_88
                  by solve( (#vl, 0) ~~> (#vk, 0) )
                qed
              next
                case toprf_evaluate
                by solve( (#vl, 0) ~~> (#vk, 0) )
              next
                case unblind
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_kauth_pre_quantum:
  all-traces
  "∀ kauth cid sid1 sid2 sid3 #i.
    (Secret( 'kauth', kauth, cid, sid1, sid2, sid3 ) @ #i) ⇒
    (((¬(∃ #j. K( kauth ) @ #j)) ∨
      (∃ #j #k #l.
        ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
        (!Compromised( sid3 ) @ #l))) ∨
     (∃ #j. PQAdversaryAction( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ kauth cid sid1 sid2 sid3 #i.
  (Secret( 'kauth', kauth, cid, sid1, sid2, sid3 ) @ #i)
 ∧
  (∃ #j. (K( kauth ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥) ∧
  (∀ #j. (PQAdversaryAction( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Secret( 'kauth', kauth, cid, sid1, sid2, sid3 ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !Server( $sid1 ) ▶₇ #i )
      case create_server
      solve( !Server( $sid2 ) ▶₈ #i )
        case create_server
        solve( !Server( $sid3 ) ▶₉ #i )
          case create_server
          solve( !KU( PRF(~pw, z.1) ) @ #vk )
            case c_PRF
            by solve( !KU( ~pw ) @ #vk.1 )
          next
            case toprf_evaluate
            by solve( !KU( ~pw ) @ #vk.1 )
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_kenc_pre_quantum:
  all-traces
  "∀ kenc cid sid1 sid2 sid3 #i.
    (Secret( 'kenc', kenc, cid, sid1, sid2, sid3 ) @ #i) ⇒
    (((¬(∃ #j. K( kenc ) @ #j)) ∨
      (∃ #j #k #l.
        ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
        (!Compromised( sid3 ) @ #l))) ∨
     (∃ #j. PQAdversaryAction( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ kenc cid sid1 sid2 sid3 #i.
  (Secret( 'kenc', kenc, cid, sid1, sid2, sid3 ) @ #i)
 ∧
  (∃ #j. (K( kenc ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥) ∧
  (∀ #j. (PQAdversaryAction( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Secret( 'kenc', kenc, cid, sid1, sid2, sid3 ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !Server( $sid1 ) ▶₇ #i )
      case create_server
      solve( !Server( $sid2 ) ▶₈ #i )
        case create_server
        solve( !Server( $sid3 ) ▶₉ #i )
          case create_server
          solve( !KU( KDF(z, PRF(~pw, z.1)) ) @ #vk )
            case c_KDF
            solve( !KU( PRF(~pw, z.1) ) @ #vk.2 )
              case c_PRF
              by solve( !KU( ~pw ) @ #vk.3 )
            next
              case toprf_evaluate
              by solve( !KU( ~pw ) @ #vk.3 )
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_secret_pre_quantum:
  all-traces
  "∀ secret cid sid1 sid2 sid3 #i.
    (Secret( 'secret', secret, cid, sid1, sid2, sid3 ) @ #i) ⇒
    (((¬(∃ #j. K( secret ) @ #j)) ∨
      (∃ #j #k #l.
        ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
        (!Compromised( sid3 ) @ #l))) ∨
     (∃ #j. PQAdversaryAction( ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ secret cid sid1 sid2 sid3 #i.
  (Secret( 'secret', secret, cid, sid1, sid2, sid3 ) @ #i)
 ∧
  (∃ #j. (K( secret ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥) ∧
  (∀ #j. (PQAdversaryAction( ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Secret( 'secret', secret, cid, sid1, sid2, sid3 ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !Server( $sid1 ) ▶₇ #i )
      case create_server
      solve( !Server( $sid2 ) ▶₈ #i )
        case create_server
        solve( !Server( $sid3 ) ▶₉ #i )
          case create_server
          solve( !KU( ~secret ) @ #vk )
            case client_register
            solve( !KU( PRF(~pw, z.1) ) @ #vk.3 )
              case c_PRF
              by solve( !KU( ~pw ) @ #vk.4 )
            next
              case toprf_evaluate
              by solve( !KU( ~pw ) @ #vk.4 )
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_koprf_post_quantum:
  all-traces
  "∀ koprf cid sid1 sid2 sid3 #i.
    (Secret( 'koprf', koprf, cid, sid1, sid2, sid3 ) @ #i) ⇒
    ((¬(∃ #j. K( koprf ) @ #j)) ∨
     (∃ #j #k #l.
       ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
       (!Compromised( sid3 ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ koprf cid sid1 sid2 sid3 #i.
  (Secret( 'koprf', koprf, cid, sid1, sid2, sid3 ) @ #i)
 ∧
  (∃ #j. (K( koprf ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥)"
*/
simplify
solve( Secret( 'koprf', koprf, cid, sid1, sid2, sid3 ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !Server( $sid1 ) ▶₇ #i )
      case create_server
      solve( !Server( $sid2 ) ▶₈ #i )
        case create_server
        solve( !Server( $sid3 ) ▶₉ #i )
          case create_server
          solve( splitEqs(0) )
            case split
            solve( !KU( (~koprf1⊕~koprf2⊕~koprf3) ) @ #vk )
              case c_xor_case_1
              solve( !KU( ~koprf2 ) @ #vk.2 )
                case eavesdrop_server
                solve( !KU( (~koprf1⊕~koprf3) ) @ #vk.2 )
                  case c_xor
                  solve( !KU( ~koprf3 ) @ #vk.3 )
                    case eavesdrop_server
                    solve( !KU( ~koprf1 ) @ #vk.4 )
                      case unblind
                      solve( !KU( blind(~koprf1) ) @ #vk.5 )
                        case adversary_recv_case_1
                        solve( SCServerIn( 'adv', $server, <$cid.1, bhpw> ) ▶₁ #vr.19 )
                          case server_in_case_1
                          solve( SCServerIn( $client, $server,
                                             <$cid.1, ~koprf1, s_enc_share, kvfy>
                                 ) ▶₁ #vr.20 )
                            case server_in_case_2
                            SOLVED // trace found
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_kauth_post_quantum:
  all-traces
  "∀ kauth cid sid1 sid2 sid3 #i.
    (Secret( 'kauth', kauth, cid, sid1, sid2, sid3 ) @ #i) ⇒
    ((¬(∃ #j. K( kauth ) @ #j)) ∨
     (∃ #j #k #l.
       ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
       (!Compromised( sid3 ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ kauth cid sid1 sid2 sid3 #i.
  (Secret( 'kauth', kauth, cid, sid1, sid2, sid3 ) @ #i)
 ∧
  (∃ #j. (K( kauth ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥)"
*/
simplify
solve( Secret( 'kauth', kauth, cid, sid1, sid2, sid3 ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !Server( $sid1 ) ▶₇ #i )
      case create_server
      solve( !Server( $sid2 ) ▶₈ #i )
        case create_server
        solve( !Server( $sid3 ) ▶₉ #i )
          case create_server
          solve( !KU( PRF(~pw, z.1) ) @ #vk )
            case c_PRF
            by solve( !KU( ~pw ) @ #vk.1 )
          next
            case toprf_evaluate
            by solve( !KU( ~pw ) @ #vk.1 )
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_kenc_post_quantum:
  all-traces
  "∀ kenc cid sid1 sid2 sid3 #i.
    (Secret( 'kenc', kenc, cid, sid1, sid2, sid3 ) @ #i) ⇒
    ((¬(∃ #j. K( kenc ) @ #j)) ∨
     (∃ #j #k #l.
       ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
       (!Compromised( sid3 ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ kenc cid sid1 sid2 sid3 #i.
  (Secret( 'kenc', kenc, cid, sid1, sid2, sid3 ) @ #i)
 ∧
  (∃ #j. (K( kenc ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥)"
*/
simplify
solve( Secret( 'kenc', kenc, cid, sid1, sid2, sid3 ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !Server( $sid1 ) ▶₇ #i )
      case create_server
      solve( !Server( $sid2 ) ▶₈ #i )
        case create_server
        solve( !Server( $sid3 ) ▶₉ #i )
          case create_server
          solve( !KU( KDF(z, PRF(~pw, z.1)) ) @ #vk )
            case c_KDF
            solve( !KU( PRF(~pw, z.1) ) @ #vk.2 )
              case c_PRF
              by solve( !KU( ~pw ) @ #vk.3 )
            next
              case toprf_evaluate
              by solve( !KU( ~pw ) @ #vk.3 )
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secret_secret_post_quantum:
  all-traces
  "∀ secret cid sid1 sid2 sid3 #i.
    (Secret( 'secret', secret, cid, sid1, sid2, sid3 ) @ #i) ⇒
    ((¬(∃ #j. K( secret ) @ #j)) ∨
     (∃ #j #k #l.
       ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
       (!Compromised( sid3 ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ secret cid sid1 sid2 sid3 #i.
  (Secret( 'secret', secret, cid, sid1, sid2, sid3 ) @ #i)
 ∧
  (∃ #j. (K( secret ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥)"
*/
simplify
solve( Secret( 'secret', secret, cid, sid1, sid2, sid3 ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !Server( $sid1 ) ▶₇ #i )
      case create_server
      solve( !Server( $sid2 ) ▶₈ #i )
        case create_server
        solve( !Server( $sid3 ) ▶₉ #i )
          case create_server
          solve( !KU( ~secret ) @ #vk )
            case client_register
            solve( !KU( PRF(~pw, z.1) ) @ #vk.3 )
              case c_PRF
              by solve( !KU( ~pw ) @ #vk.4 )
            next
              case toprf_evaluate
              by solve( !KU( ~pw ) @ #vk.4 )
            qed
          qed
        qed
      qed
    qed
  qed
qed



























/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.10.0
Maude version 2.7.1
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2024-10-30 14:56:23.355649243 UTC
*/

end