theory Threshold_XOR

// Differences to threshold-crypto2:
// - XOR secret sharing instead of a combine/3 function
// - share1(x), share2(x), share3(x) instead of share(i, x)

begin

builtins: xor

predicates: LT(x, y) <=> x ⊏ y
          , EQ(x, y) <=> x = y
          , LEQ(x, y) <=> x ⊏ y | x = y
          , IS_IN(el, set) <=> el << set | el = set

functions:
    // NOT USED CURRENTLY
    share1/1
  , share2/1
  , share3/1

//equations:
    // None of these variants work!
    //x ⊕ y = x
    //x XOR y = x
    //share1(secret) ⊕ (share2(secret) ⊕ share3(secret)) = secret
    //share1(secret) XOR (share2(secret) XOR share3(secret)) = secret
    //XOR(share1(secret), XOR(share2(secret), share3(secret))) = secret

    // Solution Idea: create shares: (secret + noise1, noise2, noise3) where:
    // - share1 XOR share2 XOR share3 = secret
    // - noise1 XOR noise2 XOR noise3 = zero

    // Implementation: noise2 and noise3 are sampled fresh, set noise1 = noise2 XOR noise3
    // Question: Is lack of symmetry a problem? 

// create environment
rule create_server:
    []
  --[]->
    [ !Server($sid) ]

// protocol run

rule client_0: // initialise the client and prepare for communication with server
    [ Fr(~pw), Fr(~cid), Fr(~secret), Fr(~koprf) ]
  --[ Secret(~cid, ~koprf) ]->
    [ Client_0(~pw, ~cid, ~koprf) ]

rule client_1: // TODO: Think about enforcing that client communicates with EVERY server EXACTLY ONCE
    [ Client_0(~pw, ~cid, ~koprf), !Server($sid1), !Server($sid2), !Server($sid3), Fr(~n2), Fr(~n3) ]
  --[ ]->
    // Allocation of shares to servers is completely non-deterministically as the "adversary" can chose which server has sid1, etc.
    [ Client_1(~pw, ~cid), Out(<$sid1, ~koprf XOR ~n2 XOR ~n3>), Out(<$sid2, ~n2>), Out(<$sid3, ~n3>) ]

rule client_2: // receive shares and recombine them
    [ Client_1(~pw, ~cid), In(shr1), In(shr2), In(shr3) ]
  --[ ClientKnows(~cid, shr1 XOR shr2 XOR shr3) ]->
    [ Client_2(~pw, ~cid), ClientShare(~cid, shr1 XOR shr2 XOR shr3) ]

// other rules


lemma executable2: // works
    exists-trace "Ex cid koprf #i. Secret(cid, koprf)@#i"

lemma executable3: // works
    exists-trace "Ex cid koprf #i #j. Secret(cid, koprf)@#i & K(koprf)@#j"

lemma executable4: // works
    exists-trace "Ex cid koprf #i #j. Secret(cid, koprf)@#i & ClientKnows(cid, koprf)@#j"

end