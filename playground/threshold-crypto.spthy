theory Threshold

begin

builtins: natural-numbers, multiset

predicates: LT(x, y) <=> x ⊏ y
          , EQ(x, y) <=> x = y
          , LEQ(x, y) <=> x ⊏ y | x = y
          , IS_IN(el, set) <=> el << set | el = set

functions:
    // TODO: Should multiple groups be supported? If yes, carry around a ~gid.
    // TODO: Should creating shares twice in a row produce the same "shares object"? If not, add another fresh id.
    // The function is private s.t. we can maintain invariants:
    // - share_members is a set of size %a
    // - share_members is a subset of the members in the group
    // Make sure to only ever create shares of the form share(members, %n, secret) where !Group(members, %n, %t), 
    // the combination/splitting rules will take care of share aggregation
    share/3 [private] // share_members, share_amount, secret


// create environment
rule create_group:
    [ Fr(~sid1), Fr(~sid2), Fr(~sid3) ]
  --[
        CreatedGroup(~sid1 ++ ~sid2 ++ ~sid3, %1 %+ %1 %+ %1, %1 %+ %1 %+ %1)
      , OnlyOnce('group_creation') // ensure that there is only one group for now
    ]->
    [ !Group(~sid1 ++ ~sid2 ++ ~sid3, %1 %+ %1 %+ %1, %1 %+ %1 %+ %1)
    , !Server(~sid1), !Server(~sid2), !Server(~sid3)
    , Out(~sid1), Out(~sid2), Out(~sid3) ]


// Threshold Logic:
// Provide a way to "store" shares for every agent (including the adversary)
// Shares are tagged with a purpose to allow retrieving without knowing the exact secret (see retrieve rules)

rule combine_shares:
    [ !Share(agent, purpose, share(other_members, %a, secret)), !Share(agent, purpose, share(~sid, %1, secret)), !Server(~sid) ]
  --[
        _restrict(not IS_IN(~sid, other_members)) // maintain the invariant that the member_list is a set
    ]->
    [ !Share(agent, purpose, share(other_members ++ ~sid, %a %+ %1, secret)) ]

rule split_shares:
    [ !Share(agent, purpose, share(other_members ++ ~sid, %a %+ %1, secret)), !Server(~sid) ]
  --[]->
    [ !Share(agent, purpose, share(other_members, %a, secret)), !Share(agent, purpose, share(~sid, %1, secret)) ]

rule retrieve_complete:
    [ !Share(agent, purpose, share(share_members, %a, secret)), !Group(members, %n, %t) ]
  --[
        _restrict(LEQ(%t, %a)) // sufficient number of shares present
      , RetrievedComplete(agent, purpose, secret)
    ]->
    [ CompleteSecret(agent, purpose, secret) ]

rule retrieve_partial:
    [ !Share(agent, purpose, share(share_members, %a, secret)) ]
  --[
        RetrievedPartial(agent, purpose, share_members, secret)
    ]->
    [ PartialSecret(agent, purpose, share_members, share(share_members, %a, secret)) ]


// adversary interaction with shares
rule adversary_create: // way for the adversary to create shares, even though the function is private
    [ In(secret), !Group(members, %n, %t) ]
  --[]->
    [ Out(share(members, %n, secret)) ]

rule adversary_insert:
    [ In(<purpose, share(share_members, %a, secret)>) ]
  --[]->
    [ !Share('adv', purpose, share(share_members, %a, secret)) ]

rule adversary_retrieve_complete:
    [ CompleteSecret('adv', purpose, secret) ]
  --[ ]->
    [ Out(secret) ]

rule adversary_retrieve_partial:
    [ PartialSecret('adv', purpose, share_members, share(share_members, %a, secret)) ]
  --[]->
    [ Out(share(share_members, %a, secret)) ]



// protocol run

rule client_0: // initialise the client and prepare for communication with server
    [ Fr(~pw), Fr(~cid), Fr(~secret), Fr(~koprf), !Group(members, %n, %t) ]
  --[ Secret(~cid, ~koprf) ]->
    [ Client_0(~pw, ~cid), !Share(~cid, 'koprf', share(members, %n, ~koprf)) ]

rule client_0_send: // TODO: Think about enforcing that client communicates with EVERY server EXACTLY ONCE
    [ Client_0(~pw, ~cid), PartialSecret(~cid, 'koprf', ~sid, shr), !Server(~sid) ]
  --[ ]->
    [ Client_0(~pw, ~cid), Out(<~sid, shr>) ]

rule client_1:
    [ Client_0(~pw, ~cid) ]
  --[]->
    [ Client_1(~pw, ~cid) ]


// other rules


// restrictions
restriction OnlyOnce:
    "All #i #j v. OnlyOnce(v)@#i & OnlyOnce(v)@#j ==> #i = #j"


lemma executable: // works
    exists-trace "Ex sid1 sid2 sid3 #i. CreatedGroup(sid1 ++ sid2 ++ sid3, %1 %+ %1 %+ %1, %1 %+ %1 %+ %1)@#i"

lemma executable2: // works
    exists-trace "Ex cid koprf #i. Secret(cid, koprf)@#i"

lemma executable3: // can be autoproven, but requires quite some time
    exists-trace "Ex cid sid1 sid2 sid3 n t koprf #i #j #k.
        CreatedGroup(sid1 ++ sid2 ++ sid3, n, t)@#i & Secret(cid, koprf)@#j & RetrievedPartial(cid, 'koprf', sid1, koprf)@#k"

lemma executable4: // works
    exists-trace "Ex cid sid1 sid2 sid3 n t koprf #i #j #k.
        CreatedGroup(sid1 ++ sid2 ++ sid3, n, t)@#i & Secret(cid, koprf)@#j & RetrievedPartial(cid, 'koprf', sid1 ++ sid2 ++ sid3, koprf)@#k"

lemma executable5: // works
    exists-trace "Ex cid sid1 sid2 sid3 n t koprf #i #j #k.
        CreatedGroup(sid1 ++ sid2 ++ sid3, n, t)@#i & Secret(cid, koprf)@#j & RetrievedComplete(cid, 'koprf', koprf)@#k"

lemma executable6: // can't be autoproven
    exists-trace "Ex cid koprf #i #j. Secret(cid, koprf)@#i & K(koprf)@#j"

end