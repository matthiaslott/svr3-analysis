theory SecureChannel

begin

// world building
// Note: !Server behaves similarly to a certificate
rule create_server:
    []
  --[]->
    [ !Server($sid) ]

// secure channel
// ~sessionid specifies which client is sending data, server specifies with whom the client is communicating
// purpose is used to tag messages, e.g. 'client_hello', 'server_hello', ...
// TODO: Can the adversary replay messages?
rule secure_channel:
    [ SCOut(~sessionid, server, purpose, msg) ]
  --[]->
    [ SCIn(~sessionid, server, purpose, msg) ]

rule channel_out_adversary:
    // TODO: Consider forcing sessionids to be fresh and servers to be public
    [ In(sessionid), In(server), In(purpose), In(msg) ]
  --[]->
    [ SCOut(sessionid, server, purpose, msg) ]

rule channel_in_adversary:
    // adversary can intercept the message if he knows the session id and server (server is public anyway)
    [ SCIn(sessionid, server, purpose, msg), In(sessionid), In(server) ]
  --[]->
    [ Out(purpose), Out(msg) ] // TODO: Consider removing purpose, its a constant anyway

// protocol
// TODO: Consider implications of cid being public/fresh. Fresh: A client can only participate in 1 protocol run.
rule client_0:
    [ Fr(~secret) ]
  --[ SecretCreated($cid, ~secret) ]->
    [ Client_0($cid, ~secret) ]

rule client_1:
    [ Client_0($cid, ~secret), Fr(~sessionid), !Server($sid) ]
  --[ ]->
    [ Client_1($cid, ~secret, ~sessionid, $sid), SCOut(~sessionid, $sid, 'client_request', <$cid, ~secret>)]


// in theory, a server is able to handle multiple clients
rule server_0:
    [ !Server($sid) ]
  --[]->
    [ Server_0($sid) ]

rule server_1:
    [ Server_0($sid), SCIn(sessionid, $sid, 'client_request', <cid, secret>) ]
  --[ SecretStored($sid, cid, secret) ]->
    [ Server_1($sid, sessionid, cid, secret), SCOut(sessionid, $sid, 'server_response', <$sid, 'received'>) ]


rule client_2:
    [ Client_1($cid, ~secret, ~sessionid, $sid), SCIn(~sessionid, $sid, 'server_response', <$sid, 'received'>) ]
  --[ ClientFinished($cid, $sid, ~secret) ]->
    [ Client_2($cid, ~secret, ~sessionid, $sid) ]



lemma executable:
    exists-trace
        "Ex cid secret sid #i #j #k. SecretCreated(cid, secret)@#i & SecretStored(sid, cid, secret)@#j & ClientFinished(cid, sid, secret)@#k"


// Note: server compromise is not considered which is why the lemma holds
lemma secrecy_and_storage:
    "All cid sid secret #i. ClientFinished(cid, sid, secret)@#i ==> Ex #j. SecretStored(sid, cid, secret)@#j & not (Ex #k. K(secret)@#k)"

end