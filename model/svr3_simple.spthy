theory SVR3_Simple

// Models a simpler underapproximation of the SVR3 protocol:
// - No key rotation is modelled
// - No Noise.ExportedAuthenticator
// - TOPRF has neither password hash nor key shares blinded
// - Signature instead of ZKP
// - Client reuses sid from registration phase
//   Justification: In the "real world", client needs to remember the sids to avoid sending signatures to the wrong servers.
//   In the real world, this is "public" information?

// Neglects certain adversary capabilities:
// - brute force attack of password (and thus the secret) might be possible, simply by compromising one server and comparing against h(pw). But this isn't modelled

// Adversary capabilities:
// - Server compromise: Observe all the secrets that were stored on the server as well as send/receive messages on its behalf
// - Access to client identifiers due to compromise of authentication server
// - Interact with the servers on its own.
// - Access to Quantum Computer that solves DLOG. Not modelled yet because simpler protocol doesn't use DLOGs.


// Issues/Todos:
// - PQ behaviour of adversary
// - bruteforce attacks?


begin

builtins: xor, hashing, symmetric-encryption, signing

predicates:
    NEQ(x, y) <=> not (x = y)
  , DISTINCT(x, y, z) <=> not (x = y | x = z | y = z)

functions:
    // PRF: modelled explicitly instead of h(pw||[koprf]h(pw)) because it would require a function anyway for [koprf]h(pw)
    // the relevant property is given: can only be evaluated if pw and koprf are known. Knowing koprf is equivalent to having enough of its shares.
    PRF/2
  , KDF/2

// provides: SCClientOut, SCClientIn, SCServerOut, SCServerIn
// uses: !Server, !Compromised
#include "src/securechannel.spthy"

// create environment
// Exactly 3 valid servers
/*rule create_servers:
    []
  --[
      OnlyOnce('setup_environment')
    , _restrict(DISTINCT($sid1, $sid2, $sid3))
    ]->
    [ !Server($sid1), !Server($sid2), !Server($sid3) ]
*/

rule create_server:
    []
  --[
      ServerCreate($sid) // TODO: Consider Removing
    ]->
    [ !Server($sid) ]


// adversary capabilities
rule compromise_server:
    [ !Server($sid) ]
  --[
      AdversaryAction()
    , Compromise($sid)
    ]->
    [ !Compromised($sid) ]


// Protocol
// Initialisation of the client with password and secret to be protected.
// Each client can store and register multiple secrets. Nondeterminism ensures that it is possible to get the right responses back from the servers.
rule client_initialise:
    [
      Fr(~pw), Fr(~secret)
    ]
  --[
      _restrict(NEQ($cid, 'adv')) // The adversary may contact the servers, but can't operate as its own client. Without this restriction, it would be as if the adversary could compromise 1 client.
    ]->
    [
      Client_0($cid, ~pw, ~secret)
    ]

// Client Registration    
rule client_register:
    let
        koprf = ~koprf1 XOR ~koprf2 XOR ~koprf3
        s_enc = ~s_enc1 XOR ~s_enc2 XOR ~s_enc3
        kauth = PRF(koprf, ~pw) // not modelled using hash functions (see definition of PRF for reason)
        kenc = KDF(s_enc, kauth)
        ksign1 = KDF(kauth, '1')
        ksign2 = KDF(kauth, '2')
        ksign3 = KDF(kauth, '3')
        kvfy1 = pk(ksign1)
        kvfy2 = pk(ksign2)
        kvfy3 = pk(ksign3)
        // why not AEAD: AEAD doesn't make the adversary weaker because he can still derive the same messages.
        // In a sense, the adversary works together with Tamarin and may try infinitely many keys. Tamarin will be telling us if the adversary "won".
        // Furthermore, this only weakens the client, as he doesn't work with Tamarin and no longer knows if decryption was successful.
        encrypted_secret = senc(~secret, kenc)  
    in
    [
      Client_0($cid, ~pw, ~secret)
    , Fr(~koprf1), Fr(~koprf2), Fr(~koprf3)
    , Fr(~s_enc1), Fr(~s_enc2), Fr(~s_enc3)
    , !Server($sid1), !Server($sid2), !Server($sid3)
    ]
  --[
      _restrict(DISTINCT($sid1, $sid2, $sid3))
    , ClientRegister($cid, ~pw, ~secret)
    , Source(~koprf1), Source(~koprf2), Source(~koprf3)
    , Source(~s_enc1), Source(~s_enc2), Source(~s_enc3)
    , Secret('koprf', koprf)
    , Secret('kauth', kauth)
    , Secret('kenc', kenc)
    , Secret('secret', ~secret)
    ]->
    [ 
      Out(encrypted_secret) // Q: should this be annotated with $cid? IMO not needed as long as we don't strive for success guarantees
    , SCClientOut($cid, $sid1, <$cid, ~koprf1, ~s_enc1, kvfy1>)
    , SCClientOut($cid, $sid2, <$cid, ~koprf2, ~s_enc2, kvfy2>)
    , SCClientOut($cid, $sid3, <$cid, ~koprf3, ~s_enc3, kvfy3>)
    , !Client_1($cid, ~pw, $sid1, $sid2, $sid3) // forget the secret
    ]

// Server Registration
rule server_register:
    [
      !Server($sid)
    , SCServerIn($client, $sid, <$cid, koprf_share, s_enc_share, kvfy>) // Note: $client and $cid don't necessarily match because the client isn't authenticated.
    ]
  --[
      //ServerInitialise($sid, $cid, koprf_share, s_enc_share, kvfy)
    ]->
    [
      !Server_1($sid, $cid, koprf_share, s_enc_share, kvfy)
    ]



// Client Reconstruction (Phase 1)
rule client_reconstruct_phase1:
    [
      !Client_1($cid, ~pw, $sid1, $sid2, $sid3)
    ]
  --[
      ClientReconstructPhase1($cid, ~pw)
    ]->
    [ 
      SCClientOut($cid, $sid1, <$cid, h(~pw)>)
    , SCClientOut($cid, $sid2, <$cid, h(~pw)>)
    , SCClientOut($cid, $sid3, <$cid, h(~pw)>)
    , Client_2($cid, ~pw, $sid1, $sid2, $sid3)
    ]

    
rule server_reconstruct_phase1:
    [
      !Server_1($sid, $cid, koprf_share, s_enc_share, kvfy)
    , SCServerIn($client, $sid, <$cid, hpw>) // Note: $client and $cid don't necessarily match because the client isn't authenticated.
    ]
  --[
      ServerReconstructPhase1($sid)
    ]->
    [
      SCServerOut($client, $sid, koprf_share)
    , Server_2($sid, $cid, s_enc_share, kvfy, hpw)
    ]



rule client_reconstruct_phase2:
    let
        koprf = koprf1 XOR koprf2 XOR koprf3
        kauth = PRF(koprf, ~pw)
        ksign1 = KDF(kauth, '1')
        ksign2 = KDF(kauth, '2')
        ksign3 = KDF(kauth, '3')
        c = h(h(~pw)) // Q: Think about how to model Noise.ExportedAuthenticator and if it even needs to be modelled!
        sig1 = sign(c, ksign1)
        sig2 = sign(c, ksign2)
        sig3 = sign(c, ksign3)
    in 
    [
      Client_2($cid, ~pw, $sid1, $sid2, $sid3)
    , SCClientIn($cid, $sid1, koprf1)
    , SCClientIn($cid, $sid2, koprf2)
    , SCClientIn($cid, $sid3, koprf3)
    ]
  --[
      ClientReconstructPhase2($cid, ~pw)
    ]->
    [
      SCClientOut($cid, $sid1, sig1)
    , SCClientOut($cid, $sid2, sig2)
    , SCClientOut($cid, $sid3, sig3)
    , Client_3($cid, ~pw, kauth, $sid1, $sid2, $sid3)
    ]
    
rule server_reconstruct_phase2:
    let
        c = h(hpw) // Change if Noise.ExportedAuthenticator is modelled!
    in
    [
      Server_2($sid, $cid, s_enc_share, kvfy, hpw)
    , SCServerIn($client, $sid, sig) // Note: $client and $cid don't necessarily match because the client isn't authenticated.
    ]
  --[
      _restrict(verify(sig, c, kvfy) = true)
    ]->
    [
      SCServerOut($client, $sid, s_enc_share)
    ]


rule client_reconstruct_finish:
    let
        s_enc = s_enc1 XOR s_enc2 XOR s_enc3
        kenc = KDF(s_enc, kauth)
        secret = sdec(encrypted_secret, kenc)
    in
    [ 
      Client_3($cid, ~pw, kauth, $sid1, $sid2, $sid3)
    , SCClientIn($cid, $sid1, s_enc1)
    , SCClientIn($cid, $sid2, s_enc2)
    , SCClientIn($cid, $sid3, s_enc3)
    , In(encrypted_secret)
    ]
  --[
      ClientReconstructFinish($cid, ~pw, secret)
    ]->
    []


//restriction OnlyOnce:
//    "All #i #j v. OnlyOnce(v)@#i & OnlyOnce(v)@#j ==> #i = #j"

/*restriction NumServers: // Allows at most 3 servers
    // Given three distinct servers sid1, sid2, sid3, the 4th server must be one of the other 3.
    "All sid1 sid2 sid3 sid4 #i #j #k #l.
      ServerCreate(sid1)@#i & ServerCreate(sid2)@#j & ServerCreate(sid3)@#k & ServerCreate(sid4)@#l
      & DISTINCT(sid1, sid2, sid3)
      ==> sid4 = sid1 | sid4 = sid2 | sid4 = sid3"*/

restriction NumCompromised: // Allows at most 2 compromised servers
    // Given "three" compromised servers, 2 of them must be equal
    "All sid1 sid2 sid3 #i #j #k. Compromise(sid1)@#i & Compromise(sid2)@#j & Compromise(sid3)@#k
      ==> sid1 = sid2 | sid1 = sid3 | sid2 = sid3"


// Sources lemma:
// There are 22 partial deconstructions because of adversary_recv.
// Tamarin believes any msg can be derived using that rule.
// But:
// - Out comes from !SCServerKnows
// - !SCServerKnows comes from SCServerOut
// - SCServerOut comes from various protocol rules, but all the data came in via SCServerIn
// - SCServerIn comes from !SCClientKnows
// - !SCClientKnows comes from SCClientOut
// - SCClientOut comes from various protocol rules or from adversary_send
// - All this boils down to the initial koprf and s_enc shares

lemma types [sources]:
    "(All msg #i.
      SourcesAdversaryRecv(msg)@#i
      ==>
      ( (Ex #j. Source(msg)@#j & #j < #i)
      | (Ex #j. !KU(msg)@#j & #j < #i)
      )
    )"

lemma executability:
    exists-trace "
      // adversary doesn't do anything
      not (Ex #i. AdversaryAction()@#i)
      &
      // client only registers once
      (All cid pw1 pw2 secret1 secret2 #i #j. ClientRegister(cid, pw1, secret1)@#i & ClientRegister(cid, pw2, secret2)@#j ==> #i = #j)
      &
      // client only reconstructs once
      (All cid pw1 pw2 #i #j. ClientReconstructPhase1(cid, pw1)@#i & ClientReconstructPhase1(cid, pw2)@#j ==> #i = #j)
      &
      // servers only run once
      (All sid #i #j. ServerReconstructPhase1(sid)@#i & ServerReconstructPhase1(sid)@#j ==> #i = #j)
      &
      Ex cid pw secret #i #j #k #l.
      ( ClientRegister(cid, pw, secret)@#i 
      & ClientReconstructPhase1(cid, pw)@#j
      & ClientReconstructPhase2(cid, pw)@#k
      & ClientReconstructFinish(cid, pw, secret)@#l
      )
    "

lemma secret_koprf:
    "All koprf #i. Secret('koprf', koprf)@#i ==> (not Ex #j. K(koprf)@#j)"

lemma secret_kauth:
    "All kauth #i. Secret('kauth', kauth)@#i ==> (not Ex #j. K(kauth)@#j)"

lemma secret_kenc:
    "All kenc #i. Secret('kenc', kenc)@#i ==> (not Ex #j. K(kenc)@#j)"

lemma secret_secret:
    "All secret #i. Secret('secret', secret)@#i ==> (not Ex #j. K(secret)@#j)"
end