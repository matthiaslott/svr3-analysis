// Secure Channel:
// - It is not modelled symmetrically. The servers can be authenticated because they run inside a TEE that can be validated.
//   Clients cannot be authenticated. They are nevertheless denoted with a public value.
//   To avoid "upgrading" this into an authenticated channel, the servers should never pattern match the "$client" variable in another part of a rule
//   and only use it to send back a response.
// - The adversary can act on behalf of a compromised server.
// - The adversary can act on behalf of a client (e.g. inside attacker that has access to authentication server)
// - The adversary may not replay or reflect messages if the server isn't compromised.
//   This is not an issue because protection against these attacks only requires adding tags/sequence numbers to messages.
//   Once the server is compromised or the adversary is impersonating an honest client, replays/reflections are possible.

// SCClientOut -> !SCClientToServer -> SCServerIn
// SCServerOut -> !SCServerToClient -> SCClientIn
rule client_out[color=#ffffff]:
    [ SCClientOut($client, $server, msg) ]-->[ SCServerIn($client, $server, msg), !SCClientToServer($client, $server, msg) ]

rule server_out[color=#ffffff]:
    [ SCServerOut($server, $client, msg) ]-->[ SCClientIn($server, $client, msg), !SCServerToClient($server, $client, msg) ]


// Adversary Compromise

// A secure channel with a compromised server: The adversary can read all the messages that the server received.
// Because a server starts out with no state, everything it might ever want to send can be derived from the messages it receives.
// It is thus not necessary to eavesdrop on outgoing messages
rule eavesdrop_server[color=#e0afb5]:
    [ !SCClientToServer($client, $server, msg), !Compromised($server) ]
  --[ AdversaryAction() ]->
    [ Out(msg) ]

// A secure channel with a compromised server: The adversary can send arbitrary messages in the name of the server.
rule impersonate_server[color=#e0afb5]:
    [ In(msg), !Compromised($server) ]
  --[ AdversaryAction() ]->
    [ SCServerOut($server, $client, msg) ]


// Adversary Interaction

// Adversary sends a message
rule adversary_send[color=#e0afb5]:
    [ In(msg), !Server($server) ]
  --[ AdversaryAction() ]->
    [ SCClientOut('adv', $server, msg) ]

// Adversary receives a message
rule adversary_recv[color=#e0afb5]:
    [ SCClientIn($server, 'adv', msg) ]
  --[ AdversaryAction()
    , SourcesAdversaryRecv(msg) ]->
    [ Out(msg) ]

