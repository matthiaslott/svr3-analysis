// Secure Channel:
// - It is not modelled symmetrically. The servers can be authenticated because they run inside a TEE that can be validated.
//   Clients cannot be authenticated. They are nevertheless denoted with a public value.
//   To avoid "upgrading" this into an authenticated channel, the servers should never use that variable except for sending a response back.
// - The adversary can act on behalf of a compromised server.
// - The adversary can act on behalf of a user (e.g. inside attacker that has access to authentication server)
// TODO: Consider whether the adversary may replay messages

// ClientOut -> !ClientKnows -> ServerIn
// ClientIn <- !ServerKnows <- ServerOut

// Client -> Server
rule client_out[color=#FFFFFF]:
    [ SCClientOut($client, $server, msg) ]
  --[]->
    [ !SCClientKnows($client, $server, msg) ]

rule server_in[color=#FFFFFF]:
    [ !SCClientKnows($client, $server, msg) ]
  --[]->
    [ SCServerIn($client, $server, msg) ]

// Server -> Client
rule server_out[color=#FFFFFF]:
    [ SCServerOut($client, $server, msg) ]
  --[]->
    [ !SCServerKnows($client, $server, msg) ]

rule client_in[color=#FFFFFF]:
    [ !SCServerKnows($client, $server, msg) ]
  --[]->
    [ SCClientIn($client, $server, msg) ]


// Adversary Compromise

// A secure channel with a compromised server: The adversary can read all the messages that the server received.
// Because a server starts out with no state, everything it might ever want to send can be derived from the messages it receives.
// It is thus not necessary to eavesdrop on outgoing messages
rule eavesdrop_server:
    [ !SCClientKnows($client, $server, msg), !Compromised($server) ]
  --[ AdversaryAction() ]->
    [ Out(msg) ]

// A secure channel with a compromised server: The adversary can send arbitrary messages in the name of the server.
rule impersonate_server:
    [ In(msg), !Compromised($server) ]
  --[ AdversaryAction() ]->
    [ SCServerOut($client, $server, msg) ]


// Adversary Interaction

// Adversary sends a message
rule adversary_send:
    [ In(msg), !Server($server) ]
  --[ AdversaryAction() ]->
    [ SCClientOut('adv', $server, msg) ]

// Adversary receives a message
rule adversary_recv:
    [ !SCServerKnows('adv', $server, msg) ]
  --[ 
      AdversaryAction()
    , SourcesAdversaryRecv(msg)
    ]->
    [ Out(msg) ]

