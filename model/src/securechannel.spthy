// Secure Channel:
// - The channel is not modelled symmetrically. The servers can be authenticated, while clients cannot be. They are nevertheless denoted with a public value.
//   To avoid "upgrading" this into an authenticated channel, the servers should never pattern match the "$sender" variable in another part of a rule
//   and only use it to send back a response.
// - The adversary can act on behalf of a compromised server.
// - The adversary can impersonate a client (e.g. inside attacker that has access to authentication server)
// - The adversary may not replay or reflect messages if the server isn't compromised.
//   This is not an issue because protection against these attacks only requires adding tags/sequence numbers to messages.
//   Once the server is compromised or the adversary is impersonating an honest client, replays/reflections are possible.

rule forward[color=#ffffff]:
    [ SCOut($sender, $receiver, msg) ]
  --[ Communication($sender, $receiver) ]->
    [ SCIn($sender, $receiver, msg), !SCKnows($sender, msg), !SCKnows($receiver, msg) ]

// Communication happens between clients (or 'adv') and the servers.
// Thus, no two servers communicate with each other.
restriction communication_between_clients_and_servers:
    "All s r #i #j #k. Communication(s, r)@#i & !Server(s)@#j & !Server(r)@#k ==> F"


// Adversary Compromises Server

// The adversary can read all the messages that a compromised server received or sent.
rule eavesdrop_server[color=#e0afb5]:
    [ !SCKnows($server, msg), !Compromised($server) ]
  --[ AdversaryAction()
    , SourcesAdversaryRecv(msg) ]->
    [ Out(msg) ]

// The adversary can send arbitrary messages in the name of a compromised server.
rule impersonate_server[color=#e0afb5]:
    [ In(msg), !Compromised($server) ]
  --[ AdversaryAction() ]->
    [ SCOut($server, $client, msg) ]


// Adversary Interaction

// Adversary sends a message
rule adversary_send[color=#e0afb5]:
    [ In(msg) ]
  --[ AdversaryAction() ]->
    [ SCOut('adv', $receiver, msg) ]

// Adversary receives a message
rule adversary_recv[color=#e0afb5]:
    [ SCIn($sender, 'adv', msg) ]
  --[ AdversaryAction()
    , SourcesAdversaryRecv(msg) ]->
    [ Out(msg) ]

