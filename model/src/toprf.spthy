// Scalar Multiplication for TOPRF:
// - mul(f, x) stands for the multiplication of point x with factors f
// - f is a multiset of factors
// - mul is modelled as a private function because we want to ensure that all factors are fresh and have a corresponding !Factor fact.
// - Combination of T-OPRF responses is modelled in rule combine
// - Rules add/remove/extract model multiplication with adversarially known factors (or their inverses)

functions:
    mul/2 [private] // scalar multiplication


// Adversary can create multiplications
rule create_factor:
    [ Fr(~f) ]-->[ !Factor(~f), Out(~f) ]

rule create_mul:
    [ !Factor(~f), In(~f), In(x) ]--[ KMul(mul(~f, x)) ]->[ Out(mul(~f, x)) ]


rule mul_down[no_derivcheck, color=#d66f7c]:
    [ In(mul(f, x)) ]-->[ !MulD(mul(f, x)) ]

rule mul_coerce[no_derivcheck, color=#d66f7c]: // similar to coerce rule (KD -> KU)
    [ !MulD(mul(f, x)) ]--[ KMul(mul(f, x)) ]->[ !MulU(mul(f, x)) ]

rule mul_up[no_derivcheck, color=#d66f7c]:
    [ !MulU(mul(f, x)) ]-->[ Out(mul(f, x)) ]


// Construction Rules
rule combine[no_derivcheck, color=#d66f7c]: // [a]x, [b]x -> [a+b]x
    [ !MulU(mul(a, x)), !MulU(mul(b, x)) ]
  --[ AdversaryAction()
    , KMul(mul(a ++ b, x))
    , SourcesPoint(x) ]->
    [ !MulU(mul(a ++ b, x)) ]

rule add[no_derivcheck, color=#d66f7c]: // a, [b]x -> [a*b]x
    [ !Factor(~a), In(~a), !MulU(mul(b, x)) ]
  --[ AdversaryAction()
    , KMul(mul(~a ++ b, x))
    , SourcesPoint(x) ]->
    [ !MulU(mul(~a ++ b, x)) ]

// Deconstruction Rules
rule remove[no_derivcheck, color=#d66f7c]: // a, [a*b]x -> [b]x
    [ In(a), !MulD(mul(a ++ b, x)) ]
  --[ AdversaryAction()
    , KMul(mul(b, x))
    , SourcesPoint(x) ]->
    [ !MulD(mul(b, x)) ]

rule extract[no_derivcheck, color=#d66f7c]: // a, [a]x -> x
    [ In(a), !MulD(mul(a, x)) ]
  --[ AdversaryAction()
    , KMul(mul(a, x))
    , SourcesPoint(x) ]->
    [ Out(x) ]