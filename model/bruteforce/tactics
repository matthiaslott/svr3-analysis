// Sources Lemma
tactic: sources_lemma

// First part: Secure Channel
prio:
    isFactName "SCServerIn" & regex ", msg, "

// Second part: Point
prio: // Prioritise IH specifying how point x looks like
    regex "SourceP\( x"
prio: // Prioritise finding out more about variable t
    isFactName "SCServerIn" & regex ", t, "


// Mul Invariant
tactic: mul_invariant

prio: // apply IH to make progress
    regex "HumanGenerated\( ~pw \)"
prio:
    regex "BlindingFactor" & not regex "âˆƒ"
prio: // leads to contradiction because adversary doesn't know the factors
    regex "!KU\( ~b \)"
prio:
    regex "!KU\( ~a \)" | regex "!KU\( ~koprf_share \)"

    


// Pre Quantum Password Secrecy (ONLY AUTOMATES PART OF THE PROOF)
tactic: pw_pre_quantum_secrecy

prio: 
    isFactName "BlindingFactor"
prio: // apply mul_invariant lemma
    regex "HumanGenerated"

// Senc Share
tactic: senc_share_secrecy

prio: // Find out how the adversary knows the s_enc share
    regex "!KU\( ~s_enc"
prio: // Prioritise finding out how x looks like
    isFactName "SCServerIn" & regex ", pk\(x\)"
prio: // Investigate how the the adversary faked the signature
    regex "SCServerIn\( 'adv'"
prio: // Find out how the adversary knew the signature
    regex "!KU\( revealSign" | regex "!KU\( KDF" | regex "!KU\( h\(<~pw"


// Senc
tactic: senc_secrecy

prio: // Proof Start
    regex "splitEqs\(0\)"

// First Part: !KU
prio: // Find out how the adversary knows XORs of s_enc shares
    regex "!KU\( \(~s_enc"

// Second Part: !KD
prio: // Find out how the adversary knows XORs of s_enc shares
    regex "!KD\( \(~s_enc"

prio: // various cases
    regex "~~>"
prio: // continue solving case adversary_recv and solve_dlog
    isFactName "SCServerIn" & regex ", t, "
prio: // case adversary_recv
    isFactName "SCClientIn" & regex ", 'adv', "
prio: // case bruteforce
    regex "!HumanGenerated"
prio: // case eavesdrop_server
    regex "SCClientToServer"
prio: // case extract
    regex "SourceP"
prio: // case solve_dlog
    regex "Factor"
