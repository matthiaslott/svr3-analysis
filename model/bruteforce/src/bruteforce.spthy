// Bruteforce Attacks:
// - Allows the adversary to deduce cryptographically weak fresh values (human generated passwords).
// - Bruteforce(~v, x) allows the adversary to extract ~v given x if the adversary *might* know x.
// - Deconstruction rules need not be considered because the adversary can apply them on their own before attempting to bruteforce.


// Simplifications:
// - The "target" for the bruteforce attack must be deduced from the messages that are sent over the channel.
// - Only the messages that are sent by the client must be considered.
//   - The server's response in the first reconstruction phase adds a factor, which makes a bruteforce attack more difficult (the adversary must know yet another factor!)
//   - The server's response in the second reconstruction phase was previously sent over the channel. The adversary might as well bruteforce it there already.
// - The adversary need not have knowledge of the bruteforce target, it suffices that the message was sent over the channel.
// - To simplify adversarial reasoning, we reward the adversary already if they can complete part of the bruteforce attack.
//   Below is the list of messages sent by the client and the milestone that is required for the attack to be considered succesful.
//   This milestone is what is written in the !BruteforceCandidate facts.

// Rule client_register:
// - Encrypted secret: senc(~secret, KDF(~s_enc1 XOR ~s_enc2 XOR ~s_enc3, kauth)):
//   kauth is a smaller subterm that completely contains the password. The adversary need not know ~secret or ~s_enci for the attack to succeed.
// - Server State: <$cid, ~koprfi, ~s_enci, pk(KDF(kauth, '<i>'))>
//   kauth is a smaller subterm that completely contains the password. The adversary need not know ~koprfi or ~s_enci for the attack to succeed.
// 
// Rule client_reconstruct_phase1:
// - Blinded password hash: mul(~b, h(~pw)):
//   not simplified
// 
// Rule client_reconstruct_phase2:
// - Signature of kvfyi: revealSign(h(mul(~b, h(~pw))), KDF(kauth, '<i>')):
//   both immediate subterms contain the password. We simplify by making the attack succeed if the adversary can bruteforce
//   either h(mul(~b, h(~pw))) or kauth.



// Adversary can bruteforce a human generated value if the "weakness" propagates all the way to a target that the adversary might know
rule bruteforce: // !HumanGenerated(~v) is repeated here to remind Tamarin that only human generated values can be bruteforced.
    [ !HumanGenerated(~v), !BruteforceCandidate(t), !Bruteforce(~v, t) ]
  --[ AdversaryAction()
    , _restrict(~v << t)
    , BruteforceAttack(~v, t) ]->
    [ Out(~v) ]


// Base Case: If ~v is known, extracting ~v is trivial
rule bruteforce_hg: // considers only fresh values because human generated values must be fresh
    [ !HumanGenerated(~v) ]--[ !Bruteforce(~v, ~v) ]->[ !Bruteforce(~v, ~v) ]

// pair
rule bruteforce_pair: // combine two bruteforce attacks: iterate over candidates (~v, ~w) and verify against <x, y> 
    [ !Bruteforce(~v, x), !Bruteforce(~w, y) ]--[ !Bruteforce(~v, <x, y>), !Bruteforce(~w, <x, y>) ]->[ !Bruteforce(~v, <x, y>), !Bruteforce(~w, <x, y>) ]
rule bruteforce_pair_left: // extend attack by using a known term
    [ !Bruteforce(~v, x), In(y) ]--[ !Bruteforce(~v, <x, y>) ]->[ !Bruteforce(~v, <x, y>) ]
rule bruteforce_pair_right: // extend attack by using a known term
    [ !In(x), !Bruteforce(~v, y) ]--[ !Bruteforce(~v, <x, y>) ]->[ !Bruteforce(~v, <x, y>) ]
// fst/snd need not be considered because the equational theory "rewrites them away"

// XOR
/*rule bruteforce_xor:
    [ !Bruteforce(~v, x), !Bruteforce(~w, y) ]--[ _restrict(not (x = zero | y = zero)) ]->[ !Bruteforce(~v, x XOR y), !Bruteforce(~w, x XOR y) ]
rule bruteforce_xor_left:
    [ !Bruteforce(~v, x), In(y) ]--[ _restrict(not (x = zero | y = zero)) ]->[ !Bruteforce(~v, x XOR y) ]
rule bruteforce_xor_right:
    [ In(x), !Bruteforce(~v, y) ]--[ _restrict(not (x = zero | y = zero)) ]->[ !Bruteforce(~v, x XOR y) ]*/

// hashing
rule bruteforce_hash:
    [ !Bruteforce(~v, x) ]--[ !Bruteforce(~v, h(x)) ]->[ !Bruteforce(~v, h(x)) ]

// symmetric-encryption
rule bruteforce_senc:
    [ !Bruteforce(~v, m), !Bruteforce(~w, k) ]-->[ !Bruteforce(~v, senc(m, k)), !Bruteforce(~w, senc(m, k)) ]
rule bruteforce_senc_left:
    [ !Bruteforce(~v, m), In(k) ]-->[ !Bruteforce(~v, senc(m, k)) ]
rule bruteforce_senc_right:
    [ In(m), !Bruteforce(~v, k) ]-->[ !Bruteforce(~v, senc(m, k)) ]
// sdec need not be considered because it doesn't occur in the messages that are sent on the channel.

// revealing-signing
rule bruteforce_sign:
    [ !Bruteforce(~v, m), !Bruteforce(~w, k) ]-->[ !Bruteforce(~v, revealSign(m, k)), !Bruteforce(~w, revealSign(m, k)) ]
rule bruteforce_sign_left:
    [ !Bruteforce(~v, m), In(k) ]-->[ !Bruteforce(~v, revealSign(m, k)) ]
rule bruteforce_sign_right:
    [ In(m), !Bruteforce(~v, k) ]-->[ !Bruteforce(~v, revealSign(m, k)) ]
rule bruteforce_pk:
    [ !Bruteforce(~v, k) ]-->[ !Bruteforce(~v, pk(k)) ]  
// verify and getMessage need not be considered because they don't occur in messages that are send on the channel.

// multiset
rule bruteforce_concat:
    [ !Bruteforce(~v, x), !Bruteforce(~w, y) ]-->[ !Bruteforce(~v, x ++ y), !Bruteforce(~w, x ++ y) ]
rule bruteforce_concat_left:
    [ !Bruteforce(~v, x), In(y) ]-->[ !Bruteforce(~v, x ++ y) ]
rule bruteforce_concat_right:
    [ In(x), !Bruteforce(~v, y) ]-->[ !Bruteforce(~v, x ++ y) ]

// mul
// TODO!!!
// The bruteforce candidates only contain human generated subterms in the right argument.
rule bruteforce_mul:
    [ In(f), !Bruteforce(~v, x) ]--[ !Bruteforce(~v, mul(f, x)) ]->[ !Bruteforce(~v, mul(f, x)) ]
// Hypthetical: If the bruteforce candidates had multiple factors, we would have to think about how we deal with rules such as "mul(a, mul(f, x)) = mul(f ++ a, x)".
// We might be tempted to add a rule [ In(a), !Bruteforce(~v, mul(f, x)) ]->[ !Bruteforce(~v, mul(f ++ a, x)) ]. Luckily, this is not needed because the password
// must always be a subterm of the elliptic curve point and EVERY bruteforce attack must have knowledge of all factors f ++ a. 
// Therefore, the above rule would also suffice in such an extended setting.

// kdf
rule bruteforce_kdf:
    [ !Bruteforce(~v, x), !Bruteforce(~w, y) ]-->[ !Bruteforce(~v, KDF(x, y)), !Bruteforce(~w, KDF(x, y)) ]
rule bruteforce_kdf_left:
    [ !Bruteforce(~v, x), In(y) ]-->[ !Bruteforce(~v, KDF(x, y))]
rule bruteforce_kdf_right:
    [ In(x), !Bruteforce(~v, y) ]-->[ !Bruteforce(~v, KDF(x, y)) ]