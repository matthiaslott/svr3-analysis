theory SVR3 begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: KDF/2, fst/1, getMessage/1, h/1, mul/2, pair/2, pk/1,
           revealSign/2, revealVerify/3, sdec/2, senc/2, snd/1, true/0
equations:
    fst(<x.1, x.2>) = x.1,
    getMessage(revealSign(x.1, x.2)) = x.1,
    revealVerify(revealSign(x.1, x.2), x.1, pk(x.2)) = true,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

tactic: sources_lemma
presort: s
prio: {id}
  isFactName"SCServerIn" & regex",msg,"
prio: {id}
  regex"SourceP\(x"
prio: {id}
  isFactName"SCServerIn" & regex",t,"


tactic: mul_invariant
presort: s
prio: {id}
  regex"HumanGenerated\(~pw\)"
prio: {id}
  regex"BlindingFactor" & not regex"∃"
prio: {id}
  regex"!KU\(~b\)" | regex"!KU\(~a\)" | regex"!KU\(~koprf_share\)"


tactic: pw_pre_quantum_secrecy
presort: s
prio: {id}
  isFactName"BlindingFactor"
prio: {id}
  regex"HumanGenerated"


tactic: senc_share_secrecy
presort: s
prio: {id}
  regex"!KU\(~s_enc"
prio: {id}
  isFactName"SCServerIn" & regex",pk\(x\)"
prio: {id}
  regex"SCServerIn\('adv'"
prio: {id}
  regex"!KU\(revealSign" | regex"!KU\(KDF" | regex"!KU\(h\(<~pw"


tactic: senc_secrecy
presort: s
prio: {id}
  regex"splitEqs\(0\)"
prio: {id}
  regex"!KU\(\(~s_enc"
prio: {id}
  regex"!KD\(\(~s_enc"
prio: {id}
  regex"~~>"
prio: {id}
  isFactName"SCServerIn" & regex",t,"
prio: {id}
  isFactName"SCClientIn" & regex",'adv',"
prio: {id}
  regex"!HumanGenerated"
prio: {id}
  regex"SCClientToServer"
prio: {id}
  regex"SourceP"
prio: {id}
  regex"Factor"















predicate: NEQ( x, y )<=>¬(x = y)

predicate: DISTINCT( x, y, z )<=>¬(((x = y) ∨ (x = z)) ∨ (y = z))

rule (modulo E) client_out[color=#ffffff]:
   [ SCClientOut( $client, $server, msg ) ]
  -->
   [
   SCServerIn( $client, $server, msg ),
   !SCClientToServer( $client, $server, msg )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_out[color=#ffffff]:
   [ SCServerOut( $server, $client, msg ) ]
  -->
   [
   SCClientIn( $server, $client, msg ),
   !SCServerToClient( $server, $client, msg )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) eavesdrop_server[color=#e0afb5]:
   [
   !SCClientToServer( $client, $server, msg ), !Compromised( $server )
   ]
  --[ AdversaryAction( ) ]->
   [ Out( msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) impersonate_server[color=#e0afb5]:
   [ In( msg ), !Compromised( $server ) ]
  --[ AdversaryAction( ) ]->
   [ SCServerOut( $server, $client, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) adversary_send[color=#e0afb5]:
   [ In( msg ), !Server( $server ) ]
  --[ AdversaryAction( ) ]->
   [ SCClientOut( 'adv', $server, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) adversary_recv[color=#e0afb5]:
   [ SCClientIn( $server, 'adv', msg ) ]
  --[ AdversaryAction( ), SourcesAdversaryRecv( msg ) ]->
   [ Out( msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) mul_down[derivchecks, color=#d66f7c]:
   [ In( mul(f, x) ) ] --> [ !MulD( mul(f, x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) mul_coerce[derivchecks, color=#d66f7c]:
   [ !MulD( mul(f, x) ) ]
  --[ !KMul( mul(f, x) ) ]->
   [ !MulU( mul(f, x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) mul_up[derivchecks, color=#d66f7c]:
   [ !MulU( mul(f, x) ) ] --> [ Out( mul(f, x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) combine[derivchecks, color=#d66f7c]:
   [ !MulU( mul(a, x) ), !MulU( mul(b, x) ) ]
  --[ AdversaryAction( ), SourcesPoint( x ), !KMul( mul((a++b), x) )
  ]->
   [ !MulU( mul((a++b), x) ) ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) add[derivchecks, color=#d66f7c]:
   [ In( a ), !MulU( mul(b, x) ) ]
  --[ AdversaryAction( ), SourcesPoint( x ), !KMul( mul((a++b), x) )
  ]->
   [ !MulU( mul((a++b), x) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) remove[derivchecks, color=#d66f7c]:
   [ In( a ), !MulD( mul((a++b), x) ) ]
  --[ AdversaryAction( ), SourcesPoint( x ), !KMul( mul(b, x) ) ]->
   [ !MulD( mul(b, x) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) extract[derivchecks, color=#d66f7c]:
   [ In( a ), !MulD( mul(a, x) ) ]
  --[ AdversaryAction( ), SourcesPoint( x ), !KMul( mul(a, x) ) ]->
   [ Out( x ) ]

  /* has exactly the trivial AC variant */

restriction Restr_bruteforce_1:
  "∀ x #NOW x.1. (Restr_bruteforce_1( x, x.1 ) @ #NOW) ⇒ (x ⊏ x.1)"
  // safety formula

rule (modulo E) bruteforce:
   [
   !HumanGenerated( ~v ), !BruteforceCandidate( t ),
   !Bruteforce( ~v, t )
   ]
  --[
  AdversaryAction( ), BruteforceAttack( ~v, t ),
  Restr_bruteforce_1( ~v, t )
  ]->
   [ Out( ~v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_hg:
   [ !HumanGenerated( ~v ) ]
  --[ !Bruteforce( ~v, ~v ) ]->
   [ !Bruteforce( ~v, ~v ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_pair:
   [ !Bruteforce( ~v, x ), !Bruteforce( ~w, y ) ]
  --[ !Bruteforce( ~v, <x, y> ), !Bruteforce( ~w, <x, y> ) ]->
   [ !Bruteforce( ~v, <x, y> ), !Bruteforce( ~w, <x, y> ) ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_pair_left:
   [ !Bruteforce( ~v, x ), In( y ) ]
  --[ !Bruteforce( ~v, <x, y> ) ]->
   [ !Bruteforce( ~v, <x, y> ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_pair_right:
   [ In( x ), !Bruteforce( ~v, y ) ]
  --[ !Bruteforce( ~v, <x, y> ) ]->
   [ !Bruteforce( ~v, <x, y> ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_hash:
   [ !Bruteforce( ~v, x ) ]
  --[ !Bruteforce( ~v, h(x) ) ]->
   [ !Bruteforce( ~v, h(x) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_senc:
   [ !Bruteforce( ~v, m ), !Bruteforce( ~w, k ) ]
  -->
   [ !Bruteforce( ~v, senc(m, k) ), !Bruteforce( ~w, senc(m, k) ) ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_senc_left:
   [ !Bruteforce( ~v, m ), In( k ) ]
  -->
   [ !Bruteforce( ~v, senc(m, k) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_senc_right:
   [ In( m ), !Bruteforce( ~v, k ) ]
  -->
   [ !Bruteforce( ~v, senc(m, k) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_sign:
   [ !Bruteforce( ~v, m ), !Bruteforce( ~w, k ) ]
  -->
   [
   !Bruteforce( ~v, revealSign(m, k) ),
   !Bruteforce( ~w, revealSign(m, k) )
   ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_sign_left:
   [ !Bruteforce( ~v, m ), In( k ) ]
  -->
   [ !Bruteforce( ~v, revealSign(m, k) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_sign_right:
   [ In( m ), !Bruteforce( ~v, k ) ]
  -->
   [ !Bruteforce( ~v, revealSign(m, k) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_pk:
   [ !Bruteforce( ~v, k ) ] --> [ !Bruteforce( ~v, pk(k) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_concat:
   [ !Bruteforce( ~v, x ), !Bruteforce( ~w, y ) ]
  -->
   [ !Bruteforce( ~v, (x++y) ), !Bruteforce( ~w, (x++y) ) ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_concat_left:
   [ !Bruteforce( ~v, x ), In( y ) ] --> [ !Bruteforce( ~v, (x++y) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_concat_right:
   [ In( x ), !Bruteforce( ~v, y ) ] --> [ !Bruteforce( ~v, (x++y) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_mul:
   [ In( f ), !Bruteforce( ~v, x ) ]
  --[ !Bruteforce( ~v, mul(f, x) ) ]->
   [ !Bruteforce( ~v, mul(f, x) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_kdf:
   [ !Bruteforce( ~v, x ), !Bruteforce( ~w, y ) ]
  -->
   [ !Bruteforce( ~v, KDF(x, y) ), !Bruteforce( ~w, KDF(x, y) ) ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_kdf_left:
   [ !Bruteforce( ~v, x ), In( y ) ]
  -->
   [ !Bruteforce( ~v, KDF(x, y) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce_kdf_right:
   [ In( x ), !Bruteforce( ~v, y ) ]
  -->
   [ !Bruteforce( ~v, KDF(x, y) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) create_server:
   [ ] --> [ !Server( $sid ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) compromise_server[color=#d66f7c]:
   [ !Server( $sid ) ]
  --[ AdversaryAction( ), !Compromised( $sid ) ]->
   [ !Compromised( $sid ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) solve_dlog[derivchecks, color=#d66f7c]:
   [ !Factor( f ) ]
  --[ AdversaryAction( ), PQAdversaryAction( ) ]->
   [ Out( f ) ]

  /* has exactly the trivial AC variant */

restriction Restr_client_initialise_1:
  "∀ x #NOW.
    (Restr_client_initialise_1( x ) @ #NOW) ⇒ (¬(x = 'adv'))"
  // safety formula

rule (modulo E) client_initialise[color=#77b58d]:
   [ Fr( ~pw ), Fr( ~secret ) ]
  --[ !HumanGenerated( ~pw ), Restr_client_initialise_1( $cid ) ]->
   [ Client_0( $cid, ~pw, ~secret ), !HumanGenerated( ~pw ) ]

  /* has exactly the trivial AC variant */

restriction Restr_client_register_1:
  "∀ x #NOW x.1 x.2 x.3 x.4 x.5.
    (Restr_client_register_1( x, x.1, x.2, x.3, x.4, x.5 ) @ #NOW) ⇒
    (¬(((x = x.1) ∨ (x.2 = x.3)) ∨ (x.4 = x.5)))"
  // safety formula

rule (modulo E) client_register[color=#77b58d]:
   [
   Client_0( $cid, ~pw, ~secret ), Fr( ~koprf1 ), Fr( ~koprf2 ),
   Fr( ~koprf3 ), Fr( ~s_enc1 ), Fr( ~s_enc2 ), Fr( ~s_enc3 ),
   !Server( $sid1 ), !Server( $sid2 ), !Server( $sid3 )
   ]
  --[
  ClientRegister( $cid, ~pw, ~secret ), SourceC( ~s_enc1 ),
  SourceC( ~s_enc2 ), SourceC( ~s_enc3 ), SourceP( h(~pw) ),
  Secret( 'pw', ~pw, $cid, <$sid1, $sid2, $sid3> ),
  Secret( 'koprf', (~koprf1++~koprf2++~koprf3), $cid,
          <$sid1, $sid2, $sid3>
  ),
  Secret( 'kauth',
          h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), $cid,
          <$sid1, $sid2, $sid3>
  ),
  Secret( 'senc', (~s_enc1⊕~s_enc2⊕~s_enc3), $cid,
          <$sid1, $sid2, $sid3>
  ),
  Secret( 'senc_share', ~s_enc1, $cid, $sid1 ),
  Secret( 'senc_share', ~s_enc2, $cid, $sid2 ),
  Secret( 'senc_share', ~s_enc3, $cid, $sid3 ),
  Secret( 'kenc',
          KDF((~s_enc1⊕~s_enc2⊕~s_enc3),
              h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)),
          $cid, <$sid1, $sid2, $sid3>
  ),
  Secret( 'secret', ~secret, $cid, <$sid1, $sid2, $sid3> ),
  Restr_client_register_1( $sid1, $sid2, $sid1, $sid3, $sid2, $sid3 )
  ]->
   [
   Out( senc(~secret,
             KDF((~s_enc1⊕~s_enc2⊕~s_enc3),
                 h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)))
   ),
   SCClientOut( $cid, $sid1,
                <$cid, ~koprf1, ~s_enc1, 
                 pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>
   ),
   SCClientOut( $cid, $sid2,
                <$cid, ~koprf2, ~s_enc2, 
                 pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>
   ),
   SCClientOut( $cid, $sid3,
                <$cid, ~koprf3, ~s_enc3, 
                 pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>
   ),
   !Factor( ~koprf1 ), !Factor( ~koprf2 ), !Factor( ~koprf3 ),
   !BruteforceCandidate( h(<~pw, 
                            mul((~koprf1++~koprf2++~koprf3), h(~pw))>)
   ),
   !Client_1( $cid, ~pw, $sid1, $sid2, $sid3 )
   ]

  /*
  rule (modulo AC) client_register[color=#77b58d]:
     [
     Client_0( $cid, ~pw, ~secret ), Fr( ~koprf1 ), Fr( ~koprf2 ),
     Fr( ~koprf3 ), Fr( ~s_enc1 ), Fr( ~s_enc2 ), Fr( ~s_enc3 ),
     !Server( $sid1 ), !Server( $sid2 ), !Server( $sid3 )
     ]
    --[
    ClientRegister( $cid, ~pw, ~secret ), SourceC( ~s_enc1 ),
    SourceC( ~s_enc2 ), SourceC( ~s_enc3 ), SourceP( h(~pw) ),
    Secret( 'pw', ~pw, $cid, <$sid1, $sid2, $sid3> ),
    Secret( 'koprf', (~koprf1++~koprf2++~koprf3), $cid,
            <$sid1, $sid2, $sid3>
    ),
    Secret( 'kauth',
            h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), $cid,
            <$sid1, $sid2, $sid3>
    ),
    Secret( 'senc', z, $cid, <$sid1, $sid2, $sid3> ),
    Secret( 'senc_share', ~s_enc1, $cid, $sid1 ),
    Secret( 'senc_share', ~s_enc2, $cid, $sid2 ),
    Secret( 'senc_share', ~s_enc3, $cid, $sid3 ),
    Secret( 'kenc',
            KDF(z, h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)), $cid,
            <$sid1, $sid2, $sid3>
    ),
    Secret( 'secret', ~secret, $cid, <$sid1, $sid2, $sid3> ),
    Restr_client_register_1( $sid1, $sid2, $sid1, $sid3, $sid2, $sid3 )
    ]->
     [
     Out( senc(~secret,
               KDF(z, h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)))
     ),
     SCClientOut( $cid, $sid1,
                  <$cid, ~koprf1, ~s_enc1, 
                   pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>
     ),
     SCClientOut( $cid, $sid2,
                  <$cid, ~koprf2, ~s_enc2, 
                   pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>
     ),
     SCClientOut( $cid, $sid3,
                  <$cid, ~koprf3, ~s_enc3, 
                   pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>
     ),
     !Factor( ~koprf1 ), !Factor( ~koprf2 ), !Factor( ~koprf3 ),
     !BruteforceCandidate( h(<~pw, 
                              mul((~koprf1++~koprf2++~koprf3), h(~pw))>)
     ),
     !Client_1( $cid, ~pw, $sid1, $sid2, $sid3 )
     ]
    variants (modulo AC)
    1. ~s_enc1
             = ~s_enc1.16
       ~s_enc2
             = ~s_enc2.17
       ~s_enc3
             = ~s_enc1.16
       z     = ~s_enc2.17
    
    2. ~s_enc1
             = ~s_enc1.16
       ~s_enc2
             = ~s_enc2.17
       ~s_enc3
             = ~s_enc2.17
       z     = ~s_enc1.16
    
    3. ~s_enc1
             = ~s_enc1.17
       ~s_enc2
             = ~s_enc1.17
       ~s_enc3
             = ~s_enc3.19
       z     = ~s_enc3.19
    
    4. ~s_enc1
             = ~s_enc1.17
       ~s_enc2
             = ~s_enc2.18
       ~s_enc3
             = ~s_enc3.19
       z     = (~s_enc1.17⊕~s_enc2.18⊕~s_enc3.19)
  */

rule (modulo E) server_register[color=#7793b5]:
   [
   !Server( $sid ),
   SCServerIn( $client, $sid, <$cid, ~koprf_share, s_enc_share, kvfy>
   )
   ]
  --[ ServerAction( ) ]->
   [ !Server_1( $sid, $cid, ~koprf_share, s_enc_share, kvfy ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) client_reconstruct_phase1[color=#77b58d]:
   [ !Client_1( $cid, ~pw, $sid1, $sid2, $sid3 ), Fr( ~b ) ]
  --[
  ClientReconstructPhase1( $cid, ~pw ), BlindingFactor( ~b ),
  !KMul( mul(~b, h(~pw)) )
  ]->
   [
   SCClientOut( $cid, $sid1, <$cid, mul(~b, h(~pw))> ),
   SCClientOut( $cid, $sid2, <$cid, mul(~b, h(~pw))> ),
   SCClientOut( $cid, $sid3, <$cid, mul(~b, h(~pw))> ),
   !BruteforceCandidate( mul(~b, h(~pw)) ),
   Client_2( $cid, ~pw, $sid1, $sid2, $sid3, ~b ), !Factor( ~b )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_reconstruct_phase1[derivchecks,
                                          color=#7793b5]:
   [
   !Server_1( $sid, $cid, ~koprf_share, s_enc_share, kvfy ),
   SCServerIn( $client, $sid, <$cid, mul(factors, hpw)> )
   ]
  --[
  ServerAction( ), ServerReconstructPhase1( $sid ),
  SourceC( mul((~koprf_share++factors), hpw) ), SourcesPoint( hpw ),
  !KMul( mul((~koprf_share++factors), hpw) )
  ]->
   [
   SCServerOut( $sid, $client, mul((~koprf_share++factors), hpw) ),
   Server_2( $sid, $cid, s_enc_share, kvfy, mul(factors, hpw) ),
   !Factor( ~koprf_share )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) client_reconstruct_phase2[derivchecks,
                                          color=#77b58d]:
   [
   Client_2( $cid, ~pw, $sid1, $sid2, $sid3, ~b ),
   SCClientIn( $sid1, $cid, mul((~b++koprf1), hpw) ),
   SCClientIn( $sid2, $cid, mul((~b++koprf2), hpw) ),
   SCClientIn( $sid3, $cid, mul((~b++koprf3), hpw) )
   ]
  --[ ClientReconstructPhase2( $cid, ~pw ) ]->
   [
   SCClientOut( $cid, $sid1,
                revealSign(h(mul(~b, h(~pw))),
                           KDF(h(<~pw, mul((koprf1++koprf2++koprf3), hpw)>), '1'))
   ),
   SCClientOut( $cid, $sid2,
                revealSign(h(mul(~b, h(~pw))),
                           KDF(h(<~pw, mul((koprf1++koprf2++koprf3), hpw)>), '2'))
   ),
   SCClientOut( $cid, $sid3,
                revealSign(h(mul(~b, h(~pw))),
                           KDF(h(<~pw, mul((koprf1++koprf2++koprf3), hpw)>), '3'))
   ),
   !BruteforceCandidate( h(mul(~b, h(~pw))) ),
   Client_3( $cid, ~pw, h(<~pw, mul((koprf1++koprf2++koprf3), hpw)>),
             $sid1, $sid2, $sid3
   )
   ]

  /* has exactly the trivial AC variant */

restriction Restr_server_reconstruct_phase2_1:
  "∀ x #NOW.
    (Restr_server_reconstruct_phase2_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) server_reconstruct_phase2[color=#7793b5]:
   [
   Server_2( $sid, $cid, s_enc_share, kvfy, bhpw ),
   SCServerIn( $client, $sid, sig )
   ]
  --[
  ServerAction( ),
  Restr_server_reconstruct_phase2_1( revealVerify(sig, h(bhpw), kvfy)
  )
  ]->
   [ SCServerOut( $sid, $client, s_enc_share ) ]

  // loop breaker: [1]
  /*
  rule (modulo AC) server_reconstruct_phase2[color=#7793b5]:
     [
     Server_2( $sid, $cid, s_enc_share, kvfy, bhpw ),
     SCServerIn( $client, $sid, sig )
     ]
    --[ ServerAction( ), Restr_server_reconstruct_phase2_1( z ) ]->
     [ SCServerOut( $sid, $client, s_enc_share ) ]
    variants (modulo AC)
    1. bhpw  = bhpw.9
       kvfy  = kvfy.9
       sig   = sig.9
       z     = revealVerify(sig.9, h(bhpw.9), kvfy.9)
    
    2. bhpw  = x.9
       kvfy  = pk(x.10)
       sig   = revealSign(h(x.9), x.10)
       z     = true
    // loop breaker: [1]
  */

rule (modulo E) client_reconstruct_finish[color=#77b58d]:
   [
   Client_3( $cid, ~pw, kauth, $sid1, $sid2, $sid3 ),
   SCClientIn( $sid1, $cid, s_enc1 ),
   SCClientIn( $sid2, $cid, s_enc2 ),
   SCClientIn( $sid3, $cid, s_enc3 ), In( encrypted_secret )
   ]
  --[
  ClientReconstructFinish( $cid, ~pw,
                           sdec(encrypted_secret, KDF((s_enc1⊕s_enc2⊕s_enc3), kauth))
  )
  ]->
   [ ]

  /*
  rule (modulo AC) client_reconstruct_finish[color=#77b58d]:
     [
     Client_3( $cid, ~pw, kauth, $sid1, $sid2, $sid3 ),
     SCClientIn( $sid1, $cid, s_enc1 ),
     SCClientIn( $sid2, $cid, s_enc2 ),
     SCClientIn( $sid3, $cid, s_enc3 ), In( encrypted_secret )
     ]
    --[ ClientReconstructFinish( $cid, ~pw, z ) ]->
     [ ]
    variants (modulo AC)
      1. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = s_enc1.12
         s_enc2
               = s_enc2.12
         s_enc3
               = s_enc3.12
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc1.12⊕s_enc2.12⊕s_enc3.12), kauth.12))
    
      2. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = s_enc1.12
         s_enc2
               = s_enc2.12
         s_enc3
               = zero
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc1.12⊕s_enc2.12), kauth.12))
    
      3. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = s_enc1.12
         s_enc2
               = zero
         s_enc3
               = s_enc3.12
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc1.12⊕s_enc3.12), kauth.12))
    
      4. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = zero
         s_enc2
               = s_enc2.12
         s_enc3
               = s_enc3.12
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc2.12⊕s_enc3.12), kauth.12))
    
      5. encrypted_secret
               = encrypted_secret.13
         kauth = kauth.13
         s_enc1
               = x.12
         s_enc2
               = x.12
         s_enc3
               = s_enc3.13
         z     = sdec(encrypted_secret.13, KDF(s_enc3.13, kauth.13))
    
      6. encrypted_secret
               = encrypted_secret.13
         kauth = kauth.13
         s_enc1
               = x.12
         s_enc2
               = s_enc2.13
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.13, KDF(s_enc2.13, kauth.13))
    
      7. encrypted_secret
               = encrypted_secret.13
         kauth = kauth.13
         s_enc1
               = s_enc1.13
         s_enc2
               = x.12
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.13, KDF(s_enc1.13, kauth.13))
    
      8. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = x.13
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF(zero, kauth.14))
    
      9. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = zero
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     10. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.14, KDF(zero, kauth.14))
    
     11. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = s_enc3.14
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc3.14), kauth.14))
    
     12. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = zero
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     13. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = s_enc1.14
         s_enc2
               = x.12
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc1.14), kauth.14))
    
     14. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = s_enc1.14
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc1.14), kauth.14))
    
     15. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = zero
         s_enc2
               = x.12
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     16. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = zero
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     17. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.14, KDF(zero, kauth.14))
    
     18. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = s_enc3.14
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc3.14), kauth.14))
    
     19. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = zero
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     20. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = s_enc2.14
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc2.14), kauth.14))
    
     21. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = zero
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     22. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = x.13
         s_enc3
               = (x.12⊕x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     23. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = s_enc2.15
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF((x.14⊕s_enc2.15), kauth.15))
    
     24. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = (x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     25. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13⊕x.14)
         s_enc3
               = x.14
         z     = sdec(encrypted_secret.15, KDF(x.13, kauth.15))
    
     26. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = (x.13⊕x.14)
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.13, kauth.15))
    
     27. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = s_enc1.15
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15,
                      KDF((x.13⊕x.14⊕s_enc1.15), kauth.15))
    
     28. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = zero
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF((x.13⊕x.14), kauth.15))
    
     29. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = (x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     30. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.14
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.13, kauth.15))
    
     31. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = zero
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF((x.13⊕x.14), kauth.15))
    
     32. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     33. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = x.14
         z     = sdec(encrypted_secret.15, KDF(x.13, kauth.15))
    
     34. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = s_enc3.15
         z     = sdec(encrypted_secret.15,
                      KDF((x.13⊕x.14⊕s_enc3.15), kauth.15))
    
     35. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = zero
         z     = sdec(encrypted_secret.15, KDF((x.13⊕x.14), kauth.15))
    
     36. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(zero, kauth.15))
    
     37. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = x.13
         s_enc3
               = x.14
         z     = sdec(encrypted_secret.15, KDF(x.12, kauth.15))
    
     38. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13⊕x.14)
         s_enc3
               = (x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     39. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = x.12
         s_enc2
               = (x.13⊕x.14)
         s_enc3
               = (x.12⊕x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     40. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.14
         s_enc3
               = (x.12⊕x.14⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     41. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = s_enc2.16
         s_enc3
               = (x.12⊕x.15)
         z     = sdec(encrypted_secret.16,
                      KDF((x.13⊕x.15⊕s_enc2.16), kauth.16))
    
     42. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.13⊕x.14⊕x.15)
         z     = sdec(encrypted_secret.16, KDF(x.15, kauth.16))
    
     43. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     44. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.14⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     45. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = x.14
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     46. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = (x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF(x.14, kauth.16))
    
     47. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.14⊕x.15)
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     48. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = x.13
         s_enc3
               = (x.12⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     49. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.12⊕x.15)
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     50. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = (x.12⊕x.15)
         z     = sdec(encrypted_secret.16, KDF(x.14, kauth.16))
    
     51. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = (x.13⊕x.14⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.15⊕x.16), kauth.17))
    
     52. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = (x.14⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.13⊕x.15⊕x.16), kauth.17))
    
     53. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.14⊕x.15)
         s_enc3
               = (x.12⊕x.14⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.13⊕x.15⊕x.16), kauth.17))
    
     54. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = (x.12⊕x.15⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.14⊕x.16), kauth.17))
    
     55. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = (x.12⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.14⊕x.15⊕x.16), kauth.17))
    
     56. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.13⊕x.15⊕x.16)
         s_enc3
               = (x.12⊕x.15)
         z     = sdec(encrypted_secret.17, KDF((x.14⊕x.16), kauth.17))
    
     57. encrypted_secret
               = encrypted_secret.18
         kauth = kauth.18
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.13⊕x.15⊕x.16)
         s_enc3
               = (x.12⊕x.15⊕x.17)
         z     = sdec(encrypted_secret.18, KDF((x.14⊕x.16⊕x.17), kauth.18))
    
     58. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.13
         s_enc2
               = x.15
         s_enc3
               = x.15
         z     = x.12
    
     59. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = x.13
         s_enc3
               = x.15
         z     = x.12
    
     60. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = x.15
         s_enc3
               = x.13
         z     = x.12
    
     61. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = x.16
         s_enc3
               = (x.13⊕x.15⊕x.16)
         z     = x.12
    
     62. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = zero
         s_enc3
               = (x.13⊕x.15)
         z     = x.12
    
     63. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = zero
         z     = x.12
    
     64. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.13⊕x.15⊕x.16)
         s_enc3
               = x.16
         z     = x.12
    
     65. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = (x.15⊕x.16)
         z     = x.12
    
     66. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.15⊕x.16)
         s_enc3
               = (x.13⊕x.16)
         z     = x.12
    
     67. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = zero
         s_enc2
               = x.15
         s_enc3
               = (x.13⊕x.15)
         z     = x.12
    
     68. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = zero
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = x.15
         z     = x.12
    
     69. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = x.15
         s_enc3
               = zero
         z     = x.12
    
     70. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = x.16
         s_enc3
               = (x.15⊕x.16)
         z     = x.12
    
     71. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = zero
         s_enc3
               = x.15
         z     = x.12
    
     72. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = (x.15⊕x.16)
         s_enc3
               = x.16
         z     = x.12
    
     73. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15⊕x.16)
         s_enc2
               = x.15
         s_enc3
               = x.16
         z     = x.12
    
     74. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15⊕x.16)
         s_enc2
               = (x.16⊕x.17)
         s_enc3
               = (x.15⊕x.17)
         z     = x.12
    
     75. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = x.15
         s_enc3
               = (x.13⊕x.16)
         z     = x.12
    
     76. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = x.16
         z     = x.12
    
     77. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = (x.13⊕x.15⊕x.17)
         s_enc3
               = (x.16⊕x.17)
         z     = x.12
    
     78. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = (x.15⊕x.17)
         s_enc3
               = (x.13⊕x.16⊕x.17)
         z     = x.12
    
     79. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = x.14
         s_enc2
               = x.15
         s_enc3
               = (x.14⊕x.15)
         z     = x.12
    
     80. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = x.14
         s_enc2
               = (x.14⊕x.15)
         s_enc3
               = x.15
         z     = x.12
    
     81. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = (x.14⊕x.15)
         s_enc2
               = x.14
         s_enc3
               = x.15
         z     = x.12
    
     82. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = (x.14⊕x.15)
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = (x.15⊕x.16)
         z     = x.12
    
     83. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = x.14
         s_enc3
               = zero
         z     = x.12
    
     84. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = x.16
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     85. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = zero
         s_enc3
               = x.14
         z     = x.12
    
     86. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = x.16
         z     = x.12
    
     87. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = x.13
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     88. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = x.14
         z     = x.12
    
     89. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = (x.13⊕x.16⊕x.17)
         s_enc3
               = (x.14⊕x.17)
         z     = x.12
    
     90. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = (x.13⊕x.17)
         s_enc3
               = (x.14⊕x.16⊕x.17)
         z     = x.12
    
     91. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = zero
         s_enc2
               = x.13
         s_enc3
               = x.14
         z     = x.12
    
     92. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = zero
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     93. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = x.14
         s_enc3
               = x.16
         z     = x.12
    
     94. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = x.16
         s_enc3
               = x.14
         z     = x.12
    
     95. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = x.17
         s_enc3
               = (x.14⊕x.16⊕x.17)
         z     = x.12
    
     96. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = zero
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     97. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = zero
         z     = x.12
    
     98. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.14⊕x.16⊕x.17)
         s_enc3
               = x.17
         z     = x.12
    
     99. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.14⊕x.17)
         s_enc3
               = (x.16⊕x.17)
         z     = x.12
    
    100. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.16⊕x.17)
         s_enc3
               = (x.14⊕x.17)
         z     = x.12
    
    101. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = x.17
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
    102. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = x.17
         z     = x.12
    
    103. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = (x.14⊕x.17⊕x.18)
         s_enc3
               = (x.16⊕x.18)
         z     = x.12
    
    104. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = (x.17⊕x.18)
         s_enc3
               = (x.14⊕x.16⊕x.18)
         z     = x.12
    
    105. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.16⊕x.17)
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = (x.14⊕x.17)
         z     = x.12
    
    106. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.16⊕x.17)
         s_enc2
               = (x.13⊕x.16⊕x.18)
         s_enc3
               = (x.14⊕x.17⊕x.18)
         z     = x.12
    
    107. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = x.13
         s_enc2
               = x.14
         s_enc3
               = x.15
         z     = x.12
    
    108. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = x.13
         s_enc2
               = (x.14⊕x.17)
         s_enc3
               = (x.15⊕x.17)
         z     = x.12
    
    109. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = x.14
         s_enc3
               = (x.15⊕x.17)
         z     = x.12
    
    110. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = (x.14⊕x.17)
         s_enc3
               = x.15
         z     = x.12
    
    111. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = (x.14⊕x.17⊕x.18)
         s_enc3
               = (x.15⊕x.18)
         z     = x.12
    
    112. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = (x.14⊕x.18)
         s_enc3
               = (x.15⊕x.17⊕x.18)
         z     = x.12
    
    113. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17⊕x.18)
         s_enc2
               = (x.14⊕x.18)
         s_enc3
               = (x.15⊕x.17)
         z     = x.12
    
    114. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17⊕x.18)
         s_enc2
               = (x.14⊕x.18⊕x.19)
         s_enc3
               = (x.15⊕x.17⊕x.19)
         z     = x.12
  */

restriction servers_offline:
  "∀ #i #j.
    ((PQAdversaryAction( ) @ #i) ∧ (ServerAction( ) @ #j)) ⇒ (#j < #i)"
  // safety formula

lemma types [sources, heuristic={sources_lemma}, reuse]:
  all-traces
  "(∀ msg #i.
     (SourcesAdversaryRecv( msg ) @ #i) ⇒
     ((∃ #j. (SourceC( msg ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (!KU( msg ) @ #j) ∧ (#j < #i)))) ∧
   (∀ x #i.
     (SourcesPoint( x ) @ #i) ⇒
     ((∃ #j. (SourceP( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (!KU( x ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ msg #i.
    (SourcesAdversaryRecv( msg ) @ #i)
   ∧
    (∀ #j. (SourceC( msg ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( msg ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x #i.
    (SourcesPoint( x ) @ #i)
   ∧
    (∀ #j. (SourceP( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i))))"
*/
by sorry

lemma executability [hide_lemma=types]:
  exists-trace
  "((((¬(∃ #i. AdversaryAction( ) @ #i)) ∧
      (∀ cid pw1 pw2 secret1 secret2 #i #j.
        ((ClientRegister( cid, pw1, secret1 ) @ #i) ∧
         (ClientRegister( cid, pw2, secret2 ) @ #j)) ⇒
        (#i = #j))) ∧
     (∀ cid pw1 pw2 #i #j.
       ((ClientReconstructPhase1( cid, pw1 ) @ #i) ∧
        (ClientReconstructPhase1( cid, pw2 ) @ #j)) ⇒
       (#i = #j))) ∧
    (∀ sid #i #j.
      ((ServerReconstructPhase1( sid ) @ #i) ∧
       (ServerReconstructPhase1( sid ) @ #j)) ⇒
      (#i = #j))) ∧
   (∃ cid pw secret #i #j #k #l.
     (((ClientRegister( cid, pw, secret ) @ #i) ∧
       (ClientReconstructPhase1( cid, pw ) @ #j)) ∧
      (ClientReconstructPhase2( cid, pw ) @ #k)) ∧
     (ClientReconstructFinish( cid, pw, secret ) @ #l))"
/*
guarded formula characterizing all satisfying traces:
"(∀ #i. (AdversaryAction( ) @ #i) ⇒ ⊥) ∧
 (∀ cid pw1 pw2 secret1 secret2 #i #j.
   (ClientRegister( cid, pw1, secret1 ) @ #i) ∧
   (ClientRegister( cid, pw2, secret2 ) @ #j)
  ⇒
   #i = #j) ∧
 (∀ cid pw1 pw2 #i #j.
   (ClientReconstructPhase1( cid, pw1 ) @ #i) ∧
   (ClientReconstructPhase1( cid, pw2 ) @ #j)
  ⇒
   #i = #j) ∧
 (∀ sid #i #j.
   (ServerReconstructPhase1( sid ) @ #i) ∧
   (ServerReconstructPhase1( sid ) @ #j)
  ⇒
   #i = #j) ∧
 (∃ cid pw secret #i #j #k #l.
   (ClientRegister( cid, pw, secret ) @ #i) ∧
   (ClientReconstructPhase1( cid, pw ) @ #j) ∧
   (ClientReconstructPhase2( cid, pw ) @ #k) ∧
   (ClientReconstructFinish( cid, pw, secret ) @ #l))"
*/
by sorry

lemma post_quantum_attack [hide_lemma=types]:
  exists-trace
  "((∀ cid pw1 pw2 secret1 secret2 #i #j.
      ((ClientRegister( cid, pw1, secret1 ) @ #i) ∧
       (ClientRegister( cid, pw2, secret2 ) @ #j)) ⇒
      (#i = #j)) ∧
    (∀ cid pw1 pw2 #i #j.
      ((ClientReconstructPhase1( cid, pw1 ) @ #i) ∧
       (ClientReconstructPhase1( cid, pw2 ) @ #j)) ⇒
      (#i = #j))) ∧
   (∃ cid pw koprf kauth sid1 sid2 sid3 #i #j #k #l #m #n.
     ((((((Secret( 'pw', pw, cid, <sid1, sid2, sid3> ) @ #i) ∧
          (!KU( pw ) @ #j)) ∧
         (Secret( 'koprf', koprf, cid, <sid1, sid2, sid3> ) @ #k)) ∧
        (!KU( koprf ) @ #l)) ∧
       (Secret( 'kauth', kauth, cid, <sid1, sid2, sid3> ) @ #m)) ∧
      (!KU( kauth ) @ #n)) ∧
     (¬(∃ #o #p #q.
         ((!Compromised( sid1 ) @ #o) ∧ (!Compromised( sid2 ) @ #p)) ∧
         (!Compromised( sid3 ) @ #q))))"
/*
guarded formula characterizing all satisfying traces:
"(∀ cid pw1 pw2 secret1 secret2 #i #j.
   (ClientRegister( cid, pw1, secret1 ) @ #i) ∧
   (ClientRegister( cid, pw2, secret2 ) @ #j)
  ⇒
   #i = #j) ∧
 (∀ cid pw1 pw2 #i #j.
   (ClientReconstructPhase1( cid, pw1 ) @ #i) ∧
   (ClientReconstructPhase1( cid, pw2 ) @ #j)
  ⇒
   #i = #j) ∧
 (∃ cid pw koprf kauth sid1 sid2 sid3 #i #j #k #l #m #n.
   (Secret( 'pw', pw, cid, <sid1, sid2, sid3> ) @ #i) ∧
   (!KU( pw ) @ #j) ∧
   (Secret( 'koprf', koprf, cid, <sid1, sid2, sid3> ) @ #k) ∧
   (!KU( koprf ) @ #l) ∧
   (Secret( 'kauth', kauth, cid, <sid1, sid2, sid3> ) @ #m) ∧
   (!KU( kauth ) @ #n)
  ∧
   ∀ #o #p #q.
    (!Compromised( sid1 ) @ #o) ∧
    (!Compromised( sid2 ) @ #p) ∧
    (!Compromised( sid3 ) @ #q)
   ⇒
    ⊥)"
*/
by sorry

lemma mul_invariant [reuse, use_induction,
                     heuristic={mul_invariant}, hide_lemma=types]:
  all-traces
  "∀ f pw #i.
    ((!KMul( mul(f, h(pw)) ) @ #i) ∧
     (∃ #j. !HumanGenerated( pw ) @ #j)) ⇒
    ((((∃ #k. BlindingFactor( f ) @ #k) ∨
       (∃ a b #k. (BlindingFactor( b ) @ #k) ∧ (f = (a++b)))) ∨
      (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (#k < #i))) ∨
     (∃ #k. (!KU( pw ) @ #k) ∧ (#k < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ f pw #i.
  (!KMul( mul(f, h(pw)) ) @ #i)
 ∧
  (∃ #j. (!HumanGenerated( pw ) @ #j)) ∧
  (∀ #k. (BlindingFactor( f ) @ #k) ⇒ ⊥) ∧
  (∀ a b #k. (BlindingFactor( b ) @ #k) ∧ (f = (a++b)) ⇒ ⊥) ∧
  (∀ #k. (PQAdversaryAction( ) @ #k) ⇒ ¬(#k < #i)) ∧
  (∀ #k. (!KU( pw ) @ #k) ⇒ ¬(#k < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (last(#i))  ∥
         (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
         (∃ #k. (BlindingFactor( f ) @ #k) ∧ ¬(last(#k)))  ∥
         (∃ a b #k.
           (BlindingFactor( b ) @ #k) ∧ (f = (a++b)) ∧ ¬(last(#k)))  ∥
         (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #i))  ∥
         (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #i)) )
    case case_1
    solve( !KMul( mul(f, h(~pw)) ) @ #i )
      case add
      solve( !MulU( mul(b, h(~pw)) ) ▶₁ #i )
        case add
        solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
               (∃ #k. (BlindingFactor( (b++a.1) ) @ #k) ∧ ¬(last(#k)))  ∥
               (∃ a.2 b.1 #k.
                 (BlindingFactor( b.1 ) @ #k) ∧ ((b++a.1) = (b.1++a.2))
                ∧
                 ¬(last(#k)))  ∥
               (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr))  ∥
               (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr)) )
          case case_2
          by contradiction /* from formulas */
        next
          case case_3_case_1
          by contradiction /* from formulas */
        next
          case case_3_case_2
          by contradiction /* from formulas */
        next
          case case_3_case_3
          by contradiction /* from formulas */
        next
          case case_3_case_4
          by contradiction /* from formulas */
        next
          case case_3_case_5
          by contradiction /* from formulas */
        next
          case case_3_case_6
          by contradiction /* from formulas */
        next
          case case_3_case_7
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        qed
      next
        case combine
        solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
               (∃ #k. (BlindingFactor( (b++a.1) ) @ #k) ∧ ¬(last(#k)))  ∥
               (∃ a.2 b.1 #k.
                 (BlindingFactor( b.1 ) @ #k) ∧ ((b++a.1) = (b.1++a.2))
                ∧
                 ¬(last(#k)))  ∥
               (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr))  ∥
               (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr)) )
          case case_2
          by contradiction /* from formulas */
        next
          case case_3_case_1
          by contradiction /* from formulas */
        next
          case case_3_case_2
          by contradiction /* from formulas */
        next
          case case_3_case_3
          by contradiction /* from formulas */
        next
          case case_3_case_4
          by contradiction /* from formulas */
        next
          case case_3_case_5
          by contradiction /* from formulas */
        next
          case case_3_case_6
          by contradiction /* from formulas */
        next
          case case_3_case_7
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        qed
      next
        case mul_coerce_case_1
        solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
               (∃ #k. (BlindingFactor( b ) @ #k) ∧ ¬(last(#k)))  ∥
               (∃ a b.1 #k.
                 (BlindingFactor( b.1 ) @ #k) ∧ (b = (a++b.1)) ∧ ¬(last(#k)))  ∥
               (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr))  ∥
               (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr)) )
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        qed
      next
        case mul_coerce_case_2
        solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
               (∃ #k. (BlindingFactor( b ) @ #k) ∧ ¬(last(#k)))  ∥
               (∃ a b.1 #k.
                 (BlindingFactor( b.1 ) @ #k) ∧ (b = (a++b.1)) ∧ ¬(last(#k)))  ∥
               (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr))  ∥
               (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr)) )
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        qed
      qed
    next
      case client_reconstruct_phase1
      by contradiction /* from formulas */
    next
      case combine
      solve( !MulU( mul(a, h(~pw)) ) ▶₀ #i )
        case add
        solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
               (∃ #k. (BlindingFactor( (a++b) ) @ #k) ∧ ¬(last(#k)))  ∥
               (∃ a.1 b.1 #k.
                 (BlindingFactor( b.1 ) @ #k) ∧ ((a++b) = (a.1++b.1))
                ∧
                 ¬(last(#k)))  ∥
               (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr))  ∥
               (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr)) )
          case case_2
          by contradiction /* from formulas */
        next
          case case_3_case_1
          by contradiction /* from formulas */
        next
          case case_3_case_2
          by contradiction /* from formulas */
        next
          case case_3_case_3
          by contradiction /* from formulas */
        next
          case case_3_case_4
          by contradiction /* from formulas */
        next
          case case_3_case_5
          by contradiction /* from formulas */
        next
          case case_3_case_6
          by contradiction /* from formulas */
        next
          case case_3_case_7
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        qed
      next
        case combine
        solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
               (∃ #k. (BlindingFactor( (a++b) ) @ #k) ∧ ¬(last(#k)))  ∥
               (∃ a.1 b.1 #k.
                 (BlindingFactor( b.1 ) @ #k) ∧ ((a++b) = (a.1++b.1))
                ∧
                 ¬(last(#k)))  ∥
               (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr))  ∥
               (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr)) )
          case case_2
          by contradiction /* from formulas */
        next
          case case_3_case_1
          by contradiction /* from formulas */
        next
          case case_3_case_2
          by contradiction /* from formulas */
        next
          case case_3_case_3
          by contradiction /* from formulas */
        next
          case case_3_case_4
          by contradiction /* from formulas */
        next
          case case_3_case_5
          by contradiction /* from formulas */
        next
          case case_3_case_6
          by contradiction /* from formulas */
        next
          case case_3_case_7
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        qed
      next
        case mul_coerce_case_1
        solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
               (∃ #k. (BlindingFactor( a ) @ #k) ∧ ¬(last(#k)))  ∥
               (∃ a.1 b #k.
                 (BlindingFactor( b ) @ #k) ∧ (a = (b++a.1)) ∧ ¬(last(#k)))  ∥
               (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr))  ∥
               (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr)) )
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        qed
      next
        case mul_coerce_case_2
        solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
               (∃ #k. (BlindingFactor( a ) @ #k) ∧ ¬(last(#k)))  ∥
               (∃ a.1 b #k.
                 (BlindingFactor( b ) @ #k) ∧ (a = (b++a.1)) ∧ ¬(last(#k)))  ∥
               (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr))  ∥
               (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr)) )
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        qed
      qed
    next
      case extract
      solve( !MulD( mul(f, h(~pw)) ) ▶₁ #i )
        case mul_down
        solve( !KU( mul(f, h(~pw)) ) @ #vk.1 )
          case adversary_recv_case_1
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k.
                   (BlindingFactor( (~koprf_share++factors) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~koprf_share++factors) = (a++b))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
            case case_2
            by contradiction /* from formulas */
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            by contradiction /* from formulas */
          next
            case case_3_case_3
            by contradiction /* from formulas */
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case adversary_recv_case_2
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k.
                   (BlindingFactor( (~koprf_share++factors) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~koprf_share++factors) = (a++b))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1)) )
            case case_2
            by contradiction /* from formulas */
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            by contradiction /* from formulas */
          next
            case case_3_case_3
            by contradiction /* from formulas */
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case c_mul
          solve( !KU( h(~pw) ) @ #vk.2 )
            case c_h
            by contradiction /* from formulas */
          next
            case extract_case_1
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( a ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a.1 b #k.
                     (BlindingFactor( b ) @ #k) ∧ (a = (b++a.1)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1)) )
              case case_2
              solve( !KU( ~b ) @ #vk.3 )
                case solve_dlog_case_1
                by contradiction /* from formulas */
              next
                case solve_dlog_case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( !KU( ~b ) @ #vk.6 )
                case solve_dlog_case_1
                by contradiction /* from formulas */
              next
                case solve_dlog_case_2
                by contradiction /* from formulas */
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case extract_case_2
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( a ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a.1 b #k.
                     (BlindingFactor( b ) @ #k) ∧ (a = (b++a.1)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1)) )
              case case_2
              solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                     (∃ #k. (BlindingFactor( ~b ) @ #k) ∧ ¬(last(#k)))  ∥
                     (∃ a b.1 #k.
                       (BlindingFactor( b.1 ) @ #k) ∧ (~b = (a++b.1)) ∧ ¬(last(#k)))  ∥
                     (∃ #k.
                       (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                     (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
                case case_2
                solve( !KU( ~b ) @ #vk.3 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                by contradiction /* from formulas */
              next
                case case_5
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                     (∃ #k. (BlindingFactor( (~b++a) ) @ #k) ∧ ¬(last(#k)))  ∥
                     (∃ a.1 b.1 #k.
                       (BlindingFactor( b.1 ) @ #k) ∧ ((~b++a) = (a.1++b.1))
                      ∧
                       ¬(last(#k)))  ∥
                     (∃ #k.
                       (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                     (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
                case case_2
                by solve( BlindingFactor( (~b++a) ) @ #k.1 )
              next
                case case_3
                solve( !KU( ~b ) @ #vk.6 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                by contradiction /* from formulas */
              next
                case case_5
                by contradiction /* from formulas */
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          qed
        next
          case eavesdrop_server_case_1
          by contradiction /* from formulas */
        next
          case eavesdrop_server_case_2
          by contradiction /* from formulas */
        next
          case eavesdrop_server_case_3
          by contradiction /* from formulas */
        next
          case mul_up_case_1
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( f ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b #k.
                   (BlindingFactor( b ) @ #k) ∧ (f = (a++b)) ∧ ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_2
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++b) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b.1 #k.
                   (BlindingFactor( b.1 ) @ #k) ∧ ((a++b) = (a.1++b.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by contradiction /* from formulas */
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            by contradiction /* from formulas */
          next
            case case_3_case_3
            by contradiction /* from formulas */
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_3_case_5
            by contradiction /* from formulas */
          next
            case case_3_case_6
            by contradiction /* from formulas */
          next
            case case_3_case_7
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_3
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++b) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b.1 #k.
                   (BlindingFactor( b.1 ) @ #k) ∧ ((a++b) = (a.1++b.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by contradiction /* from formulas */
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            by contradiction /* from formulas */
          next
            case case_3_case_3
            by contradiction /* from formulas */
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_3_case_5
            by contradiction /* from formulas */
          next
            case case_3_case_6
            by contradiction /* from formulas */
          next
            case case_3_case_7
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        qed
      next
        case remove
        solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
               (∃ #k. (BlindingFactor( f ) @ #k) ∧ ¬(last(#k)))  ∥
               (∃ a b #k.
                 (BlindingFactor( b ) @ #k) ∧ (f = (a++b)) ∧ ¬(last(#k)))  ∥
               (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr))  ∥
               (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr)) )
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        qed
      qed
    next
      case mul_coerce
      solve( !MulD( mul(f, h(~pw)) ) ▶₀ #i )
        case mul_down
        solve( !KU( mul(f, h(~pw)) ) @ #vk )
          case adversary_recv_case_1
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k.
                   (BlindingFactor( (~koprf_share++factors) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~koprf_share++factors) = (a++b))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
            case case_2
            by contradiction /* from formulas */
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            by contradiction /* from formulas */
          next
            case case_3_case_3
            by contradiction /* from formulas */
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case adversary_recv_case_2
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k.
                   (BlindingFactor( (~koprf_share++factors) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~koprf_share++factors) = (a++b))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1)) )
            case case_2
            by contradiction /* from formulas */
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            by contradiction /* from formulas */
          next
            case case_3_case_3
            by contradiction /* from formulas */
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case c_mul
          solve( !KU( h(~pw) ) @ #vk.2 )
            case c_h
            by contradiction /* from formulas */
          next
            case extract_case_1
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( a ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a.1 b #k.
                     (BlindingFactor( b ) @ #k) ∧ (a = (b++a.1)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1)) )
              case case_2
              solve( !KU( ~b ) @ #vk.3 )
                case solve_dlog_case_1
                by contradiction /* from formulas */
              next
                case solve_dlog_case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( !KU( ~b ) @ #vk.6 )
                case solve_dlog_case_1
                by contradiction /* from formulas */
              next
                case solve_dlog_case_2
                by contradiction /* from formulas */
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case extract_case_2
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( a ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a.1 b #k.
                     (BlindingFactor( b ) @ #k) ∧ (a = (b++a.1)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1)) )
              case case_2
              solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                     (∃ #k. (BlindingFactor( ~b ) @ #k) ∧ ¬(last(#k)))  ∥
                     (∃ a b.1 #k.
                       (BlindingFactor( b.1 ) @ #k) ∧ (~b = (a++b.1)) ∧ ¬(last(#k)))  ∥
                     (∃ #k.
                       (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                     (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
                case case_2
                solve( !KU( ~b ) @ #vk.3 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                by contradiction /* from formulas */
              next
                case case_5
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                     (∃ #k. (BlindingFactor( (~b++a) ) @ #k) ∧ ¬(last(#k)))  ∥
                     (∃ a.1 b.1 #k.
                       (BlindingFactor( b.1 ) @ #k) ∧ ((~b++a) = (a.1++b.1))
                      ∧
                       ¬(last(#k)))  ∥
                     (∃ #k.
                       (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                     (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
                case case_2
                by solve( BlindingFactor( (~b++a) ) @ #k.1 )
              next
                case case_3
                solve( !KU( ~b ) @ #vk.6 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                by contradiction /* from formulas */
              next
                case case_5
                by contradiction /* from formulas */
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          qed
        next
          case eavesdrop_server_case_1
          by contradiction /* from formulas */
        next
          case eavesdrop_server_case_2
          by contradiction /* from formulas */
        next
          case eavesdrop_server_case_3
          by contradiction /* from formulas */
        next
          case mul_up_case_1
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( f ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b #k.
                   (BlindingFactor( b ) @ #k) ∧ (f = (a++b)) ∧ ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by contradiction /* from formulas */
          next
            case case_3
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_2
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++b) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b.1 #k.
                   (BlindingFactor( b.1 ) @ #k) ∧ ((a++b) = (a.1++b.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by contradiction /* from formulas */
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            by contradiction /* from formulas */
          next
            case case_3_case_3
            by contradiction /* from formulas */
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_3_case_5
            by contradiction /* from formulas */
          next
            case case_3_case_6
            by contradiction /* from formulas */
          next
            case case_3_case_7
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_3
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++b) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b.1 #k.
                   (BlindingFactor( b.1 ) @ #k) ∧ ((a++b) = (a.1++b.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by contradiction /* from formulas */
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            by contradiction /* from formulas */
          next
            case case_3_case_3
            by contradiction /* from formulas */
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_3_case_5
            by contradiction /* from formulas */
          next
            case case_3_case_6
            by contradiction /* from formulas */
          next
            case case_3_case_7
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        qed
      next
        case remove
        solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
               (∃ #k. (BlindingFactor( f ) @ #k) ∧ ¬(last(#k)))  ∥
               (∃ a b #k.
                 (BlindingFactor( b ) @ #k) ∧ (f = (a++b)) ∧ ¬(last(#k)))  ∥
               (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr))  ∥
               (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr)) )
          case case_2
          by contradiction /* from formulas */
        next
          case case_3
          by contradiction /* from formulas */
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        qed
      qed
    next
      case remove
      solve( !MulD( mul((a++f), h(~pw)) ) ▶₁ #i )
        case mul_down
        solve( !KU( mul((a++f), h(~pw)) ) @ #vk.1 )
          case adversary_recv_case_1
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (~f++a) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~f++a) = (b++a.1)) ∧ ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
            case case_2
            by solve( BlindingFactor( (~f++a) ) @ #k )
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_3
            by solve( BlindingFactor( (~f++x) ) @ #k )
          next
            case case_3_case_4
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case adversary_recv_case_2
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k.
                   (BlindingFactor( (~koprf_share++a++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~koprf_share++a++x) = (b++a.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
            case case_2
            by solve( BlindingFactor( (~koprf_share++a++x) ) @ #k )
          next
            case case_3_case_01
            by contradiction /* from formulas */
          next
            case case_3_case_02
            by solve( BlindingFactor( (~koprf_share++a) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_04
            by contradiction /* from formulas */
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_07
            by solve( BlindingFactor( (~koprf_share++a++x) ) @ #k )
          next
            case case_3_case_08
            by contradiction /* from formulas */
          next
            case case_3_case_09
            by contradiction /* from formulas */
          next
            case case_3_case_10
            by solve( BlindingFactor( (a++x.1) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (~koprf_share++x++x.1) ) @ #k )
          next
            case case_3_case_12
            by solve( BlindingFactor( (~koprf_share++x.1) ) @ #k )
          next
            case case_3_case_13
            by solve( BlindingFactor( (x.1++x.2) ) @ #k )
          next
            case case_3_case_14
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_15
            by solve( BlindingFactor( (~koprf_share++x.1++x.3) ) @ #k )
          next
            case case_3_case_16
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case adversary_recv_case_3
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (~a++f) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~a++f) = (b++a.1)) ∧ ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
            case case_2
            by solve( BlindingFactor( (~a++f) ) @ #k )
          next
            case case_3_case_1
            solve( !KU( ~a ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_2
            by contradiction /* from formulas */
          next
            case case_3_case_3
            by solve( BlindingFactor( (~a++x) ) @ #k )
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case adversary_recv_case_4
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k.
                   (BlindingFactor( (~koprf_share++f++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~koprf_share++f++x) = (a++b))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
            case case_2
            by solve( BlindingFactor( (~koprf_share++f++x) ) @ #k )
          next
            case case_3_case_01
            by solve( BlindingFactor( (~koprf_share++x) ) @ #k )
          next
            case case_3_case_02
            by solve( BlindingFactor( (~koprf_share++f) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (f++x) ) @ #k )
          next
            case case_3_case_04
            solve( !KU( ~koprf_share ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_05
            solve( !KU( ~b ) @ #vk.3 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_06
            by contradiction /* from formulas */
          next
            case case_3_case_07
            by solve( BlindingFactor( (~koprf_share++f++x) ) @ #k )
          next
            case case_3_case_08
            by solve( BlindingFactor( (~koprf_share++x.1) ) @ #k )
          next
            case case_3_case_09
            solve( !KU( ~b ) @ #vk.4 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_10
            by solve( BlindingFactor( (f++x.1) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (~koprf_share++x++x.1) ) @ #k )
          next
            case case_3_case_12
            by solve( BlindingFactor( (~koprf_share++x.2) ) @ #k )
          next
            case case_3_case_13
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_14
            by contradiction /* from formulas */
          next
            case case_3_case_15
            by solve( BlindingFactor( (~koprf_share++x.1++x.3) ) @ #k )
          next
            case case_3_case_16
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case adversary_recv_case_5
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (~f++a) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~f++a) = (b++a.1)) ∧ ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1)) )
            case case_2
            by solve( BlindingFactor( (~f++a) ) @ #k )
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_3
            by solve( BlindingFactor( (~f++x) ) @ #k )
          next
            case case_3_case_4
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case adversary_recv_case_6
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k.
                   (BlindingFactor( (~koprf_share++a++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~koprf_share++a++x) = (b++a.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1)) )
            case case_2
            by solve( BlindingFactor( (~koprf_share++a++x) ) @ #k )
          next
            case case_3_case_01
            by contradiction /* from formulas */
          next
            case case_3_case_02
            by solve( BlindingFactor( (~koprf_share++a) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_04
            by contradiction /* from formulas */
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_07
            by solve( BlindingFactor( (~koprf_share++a++x) ) @ #k )
          next
            case case_3_case_08
            by contradiction /* from formulas */
          next
            case case_3_case_09
            by contradiction /* from formulas */
          next
            case case_3_case_10
            by solve( BlindingFactor( (a++x.1) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (~koprf_share++x++x.1) ) @ #k )
          next
            case case_3_case_12
            by solve( BlindingFactor( (~koprf_share++x.1) ) @ #k )
          next
            case case_3_case_13
            by solve( BlindingFactor( (x.1++x.2) ) @ #k )
          next
            case case_3_case_14
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_15
            by solve( BlindingFactor( (~koprf_share++x.1++x.3) ) @ #k )
          next
            case case_3_case_16
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case adversary_recv_case_7
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (~a++f) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~a++f) = (b++a.1)) ∧ ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1)) )
            case case_2
            by solve( BlindingFactor( (~a++f) ) @ #k )
          next
            case case_3_case_1
            solve( !KU( ~a ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_2
            by contradiction /* from formulas */
          next
            case case_3_case_3
            by solve( BlindingFactor( (~a++x) ) @ #k )
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case adversary_recv_case_8
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k.
                   (BlindingFactor( (~koprf_share++f++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((~koprf_share++f++x) = (a++b))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1)) )
            case case_2
            by solve( BlindingFactor( (~koprf_share++f++x) ) @ #k )
          next
            case case_3_case_01
            by solve( BlindingFactor( (~koprf_share++x) ) @ #k )
          next
            case case_3_case_02
            by solve( BlindingFactor( (~koprf_share++f) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (f++x) ) @ #k )
          next
            case case_3_case_04
            solve( !KU( ~koprf_share ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_05
            solve( !KU( ~b ) @ #vk.3 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_06
            by contradiction /* from formulas */
          next
            case case_3_case_07
            by solve( BlindingFactor( (~koprf_share++f++x) ) @ #k )
          next
            case case_3_case_08
            by solve( BlindingFactor( (~koprf_share++x.1) ) @ #k )
          next
            case case_3_case_09
            solve( !KU( ~b ) @ #vk.4 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_10
            by solve( BlindingFactor( (f++x.1) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (~koprf_share++x++x.1) ) @ #k )
          next
            case case_3_case_12
            by solve( BlindingFactor( (~koprf_share++x.2) ) @ #k )
          next
            case case_3_case_13
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_14
            by contradiction /* from formulas */
          next
            case case_3_case_15
            by solve( BlindingFactor( (~koprf_share++x.1++x.3) ) @ #k )
          next
            case case_3_case_16
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_4
            by contradiction /* cyclic */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case c_mul
          solve( !KU( h(~pw) ) @ #vk.3 )
            case c_h
            by contradiction /* from formulas */
          next
            case extract_case_1
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( a.1 ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a.2 b #k.
                     (BlindingFactor( b ) @ #k) ∧ (a.1 = (b++a.2)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1)) )
              case case_2
              solve( !KU( ~b ) @ #vk.5 )
                case solve_dlog_case_1
                by contradiction /* from formulas */
              next
                case solve_dlog_case_2
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( !KU( ~b ) @ #vk.8 )
                case solve_dlog_case_1
                by contradiction /* from formulas */
              next
                case solve_dlog_case_2
                by contradiction /* from formulas */
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case extract_case_2
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( a.1 ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a.2 b #k.
                     (BlindingFactor( b ) @ #k) ∧ (a.1 = (b++a.2)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.1)) )
              case case_2
              solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                     (∃ #k. (BlindingFactor( ~b ) @ #k) ∧ ¬(last(#k)))  ∥
                     (∃ a b.1 #k.
                       (BlindingFactor( b.1 ) @ #k) ∧ (~b = (a++b.1)) ∧ ¬(last(#k)))  ∥
                     (∃ #k.
                       (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                     (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
                case case_2
                solve( !KU( ~b ) @ #vk.5 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                by contradiction /* from formulas */
              next
                case case_5
                by contradiction /* from formulas */
              qed
            next
              case case_3
              solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                     (∃ #k. (BlindingFactor( (~b++a.1) ) @ #k) ∧ ¬(last(#k)))  ∥
                     (∃ a.2 b.1 #k.
                       (BlindingFactor( b.1 ) @ #k) ∧ ((~b++a.1) = (b.1++a.2))
                      ∧
                       ¬(last(#k)))  ∥
                     (∃ #k.
                       (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                     (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
                case case_2
                by solve( BlindingFactor( (~b++a.1) ) @ #k.1 )
              next
                case case_3
                solve( !KU( ~b ) @ #vk.8 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                by contradiction /* from formulas */
              next
                case case_5
                by contradiction /* from formulas */
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          qed
        next
          case mul_up_case_01
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++f) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((a++f) = (b++a.1)) ∧ ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( (a++f) ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a.1 b #k.
                     (BlindingFactor( b ) @ #k) ∧ ((a++f) = (b++a.1)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
              case case_2
              by solve( BlindingFactor( (a++f) ) @ #k )
            next
              case case_3_case_1
              by contradiction /* from formulas */
            next
              case case_3_case_2
              by solve( BlindingFactor( (~b++f) ) @ #k.1 )
            next
              case case_3_case_3
              by solve( BlindingFactor( (a++x++a.1) ) @ #k )
            next
              case case_3_case_4
              by contradiction /* from formulas */
            next
              case case_3_case_5
              by solve( BlindingFactor( (a++f++x) ) @ #k )
            next
              case case_3_case_6
              by solve( BlindingFactor( (~b++f++x) ) @ #k.1 )
            next
              case case_3_case_7
              by solve( BlindingFactor( (x++x.1++x.2++x.3) ) @ #k )
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( (~b++f) ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a b.1 #k.
                     (BlindingFactor( b.1 ) @ #k) ∧ ((~b++f) = (a++b.1))
                    ∧
                     ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
              case case_2
              by solve( BlindingFactor( (~b++f) ) @ #k.1 )
            next
              case case_3
              solve( !KU( ~b ) @ #vk.1 )
                case solve_dlog_case_1
                by contradiction /* from formulas */
              next
                case solve_dlog_case_2
                by contradiction /* from formulas */
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_3
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( (a++x++a.1) ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a.2 b #k.
                     (BlindingFactor( b ) @ #k) ∧ ((a++x++a.1) = (b++a.2))
                    ∧
                     ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
              case case_2
              by solve( BlindingFactor( (a++x) ) @ #k )
            next
              case case_3
              by solve( BlindingFactor( (a++x) ) @ #k )
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_3_case_5
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( (a++f++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a.1 b #k.
                     (BlindingFactor( b ) @ #k) ∧ ((a++f++x) = (b++a.1))
                    ∧
                     ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
              case case_2
              by solve( BlindingFactor( (f++x) ) @ #k )
            next
              case case_3
              by solve( BlindingFactor( (f++x) ) @ #k )
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_6
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( (~b++f++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a b.1 #k.
                     (BlindingFactor( b.1 ) @ #k) ∧ ((~b++f++x) = (a++b.1))
                    ∧
                     ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
              case case_2
              by solve( BlindingFactor( (~b++f++x) ) @ #k.1 )
            next
              case case_3
              solve( !KU( ~b ) @ #vk.3 )
                case solve_dlog_case_1
                by contradiction /* from formulas */
              next
                case solve_dlog_case_2
                by contradiction /* from formulas */
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_7
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k.
                     (BlindingFactor( (x++x.1++x.2++x.3) ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a b #k.
                     (BlindingFactor( b ) @ #k) ∧ ((x++x.1++x.2++x.3) = (a++b))
                    ∧
                     ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.3)) )
              case case_2
              by solve( BlindingFactor( (x.1++x.3) ) @ #k )
            next
              case case_3
              by solve( BlindingFactor( (x.1++x.3) ) @ #k )
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_02
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++f) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((a++f) = (b++a.1)) ∧ ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (a++f) ) @ #k )
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_3
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_3_case_5
            by solve( BlindingFactor( (f++x) ) @ #k )
          next
            case case_3_case_6
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_7
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_03
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++b++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b.1 #k.
                   (BlindingFactor( b.1 ) @ #k) ∧ ((a++b++x) = (a.1++b.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (a++b++x) ) @ #k )
          next
            case case_3_case_01
            by contradiction /* from formulas */
          next
            case case_3_case_02
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (a++b) ) @ #k )
          next
            case case_3_case_04
            by contradiction /* from formulas */
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_07
            by solve( BlindingFactor( (a++b++x) ) @ #k )
          next
            case case_3_case_08
            by contradiction /* from formulas */
          next
            case case_3_case_09
            by contradiction /* from formulas */
          next
            case case_3_case_10
            by solve( BlindingFactor( (a++x.1) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (a++x++x.1) ) @ #k )
          next
            case case_3_case_12
            by contradiction /* from formulas */
          next
            case case_3_case_13
            by contradiction /* from formulas */
          next
            case case_3_case_14
            by solve( BlindingFactor( (a++x.2) ) @ #k )
          next
            case case_3_case_15
            by contradiction /* from formulas */
          next
            case case_3_case_16
            by solve( BlindingFactor( (a++x.1++x.3) ) @ #k )
          next
            case case_3_case_17
            by solve( BlindingFactor( (b++x++x.1) ) @ #k )
          next
            case case_3_case_18
            by solve( BlindingFactor( (x.1++x.2) ) @ #k )
          next
            case case_3_case_19
            by solve( BlindingFactor( (b++x.1) ) @ #k )
          next
            case case_3_case_20
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_21
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_22
            by solve( BlindingFactor( (b++x.1++x.3) ) @ #k )
          next
            case case_3_case_23
            by solve( BlindingFactor( (x.1++x.2++x.4) ) @ #k )
          next
            case case_3_case_24
            by solve( BlindingFactor( (x.1++x.4) ) @ #k )
          next
            case case_3_case_25
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_04
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++f) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((a++f) = (b++a.1)) ∧ ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (a++f) ) @ #k )
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_3
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_3_case_5
            by solve( BlindingFactor( (f++x) ) @ #k )
          next
            case case_3_case_6
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_7
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_05
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++x++a.1) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.2 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((a++x++a.1) = (b++a.2))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (a++x++a.1) ) @ #k )
          next
            case case_3_case_01
            by contradiction /* from formulas */
          next
            case case_3_case_02
            by solve( BlindingFactor( (a++a.1) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_04
            by contradiction /* from formulas */
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_07
            by solve( BlindingFactor( (a++x++x.1) ) @ #k )
          next
            case case_3_case_08
            by contradiction /* from formulas */
          next
            case case_3_case_09
            by contradiction /* from formulas */
          next
            case case_3_case_10
            by solve( BlindingFactor( (a++x.2) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (a++x++a.1) ) @ #k )
          next
            case case_3_case_12
            by contradiction /* from formulas */
          next
            case case_3_case_13
            by contradiction /* from formulas */
          next
            case case_3_case_14
            by solve( BlindingFactor( (a++x.1) ) @ #k )
          next
            case case_3_case_15
            by contradiction /* from formulas */
          next
            case case_3_case_16
            by solve( BlindingFactor( (a++x.1++x.3) ) @ #k )
          next
            case case_3_case_17
            by solve( BlindingFactor( (x++a.1++x.1) ) @ #k )
          next
            case case_3_case_18
            by solve( BlindingFactor( (a++x.1) ) @ #k )
          next
            case case_3_case_19
            by solve( BlindingFactor( (x.1++x.2) ) @ #k )
          next
            case case_3_case_20
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_21
            by solve( BlindingFactor( (x.1++x.4) ) @ #k )
          next
            case case_3_case_22
            by solve( BlindingFactor( (x.1++x.2++x.4) ) @ #k )
          next
            case case_3_case_23
            by solve( BlindingFactor( (a++x.1++x.3) ) @ #k )
          next
            case case_3_case_24
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_25
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_06
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++f++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((a++f++x) = (b++a.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (a++f++x) ) @ #k )
          next
            case case_3_case_01
            by solve( BlindingFactor( (f++x) ) @ #k )
          next
            case case_3_case_02
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (a++f) ) @ #k )
          next
            case case_3_case_04
            solve( !KU( ~b ) @ #vk.3 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_07
            by solve( BlindingFactor( (a++f++x) ) @ #k )
          next
            case case_3_case_08
            solve( !KU( ~b ) @ #vk.4 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_09
            by solve( BlindingFactor( (f++x.1) ) @ #k )
          next
            case case_3_case_10
            by solve( BlindingFactor( (a++x.1) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (a++x++x.1) ) @ #k )
          next
            case case_3_case_12
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_13
            by contradiction /* from formulas */
          next
            case case_3_case_14
            by solve( BlindingFactor( (a++x.2) ) @ #k )
          next
            case case_3_case_15
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_16
            by solve( BlindingFactor( (a++x.1++x.3) ) @ #k )
          next
            case case_3_case_17
            by solve( BlindingFactor( (f++x++x.1) ) @ #k )
          next
            case case_3_case_18
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_19
            by solve( BlindingFactor( (f++x.2) ) @ #k )
          next
            case case_3_case_20
            solve( !KU( ~b ) @ #vk.4 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_21
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_22
            by solve( BlindingFactor( (f++x.1++x.3) ) @ #k )
          next
            case case_3_case_23
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_24
            by solve( BlindingFactor( (x.2++x.4) ) @ #k )
          next
            case case_3_case_25
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_07
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k.
                   (BlindingFactor( (x++x.1++x.2++x.3) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((x++x.1++x.2++x.3) = (a++b))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (x++x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_01
            by solve( BlindingFactor( (x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_02
            by solve( BlindingFactor( (x++x.2++x.3) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (x++x.1++x.3) ) @ #k )
          next
            case case_3_case_04
            by solve( BlindingFactor( (x++x.1++x.2) ) @ #k )
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            by contradiction /* from formulas */
          next
            case case_3_case_07
            by contradiction /* from formulas */
          next
            case case_3_case_08
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_09
            solve( !KU( ~b ) @ #vk.3 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_10
            by solve( BlindingFactor( (x.1++x.2) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (x++x.3) ) @ #k )
          next
            case case_3_case_12
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_13
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_14
            by solve( BlindingFactor( (x++x.1) ) @ #k )
          next
            case case_3_case_15
            by solve( BlindingFactor( (x++x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_16
            by contradiction /* from formulas */
          next
            case case_3_case_17
            by contradiction /* from formulas */
          next
            case case_3_case_18
            by solve( BlindingFactor( (x.1++x.4) ) @ #k )
          next
            case case_3_case_19
            by solve( BlindingFactor( (x.1++x.2++x.4) ) @ #k )
          next
            case case_3_case_20
            by solve( BlindingFactor( (x++x.4) ) @ #k )
          next
            case case_3_case_21
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_22
            by solve( BlindingFactor( (x++x.1++x.4) ) @ #k )
          next
            case case_3_case_23
            by solve( BlindingFactor( (x++x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_24
            by contradiction /* from formulas */
          next
            case case_3_case_25
            by contradiction /* from formulas */
          next
            case case_3_case_26
            by solve( BlindingFactor( (x.1++x.2++x.4) ) @ #k )
          next
            case case_3_case_27
            by solve( BlindingFactor( (x.1++x.4) ) @ #k )
          next
            case case_3_case_28
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_29
            by solve( BlindingFactor( (x++x.4) ) @ #k )
          next
            case case_3_case_30
            by solve( BlindingFactor( (x++x.1++x.4) ) @ #k )
          next
            case case_3_case_31
            by contradiction /* from formulas */
          next
            case case_3_case_32
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_3_case_33
            by solve( BlindingFactor( (x++x.3++x.5) ) @ #k )
          next
            case case_3_case_34
            by solve( BlindingFactor( (x++x.1++x.3++x.5) ) @ #k )
          next
            case case_3_case_35
            by solve( BlindingFactor( (x++x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_36
            by solve( BlindingFactor( (x.2++x.3++x.4) ) @ #k )
          next
            case case_3_case_37
            by solve( BlindingFactor( (x.2++x.4) ) @ #k )
          next
            case case_3_case_38
            by solve( BlindingFactor( (x.2++x.3) ) @ #k )
          next
            case case_3_case_39
            solve( !KU( ~b ) @ #vk.4 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_40
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_41
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_42
            by solve( BlindingFactor( (x++x.2++x.3) ) @ #k )
          next
            case case_3_case_43
            by solve( BlindingFactor( (x.2++x.5) ) @ #k )
          next
            case case_3_case_44
            by solve( BlindingFactor( (x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_45
            by solve( BlindingFactor( (x++x.2++x.5) ) @ #k )
          next
            case case_3_case_46
            by solve( BlindingFactor( (x++x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_47
            by solve( BlindingFactor( (x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_48
            by solve( BlindingFactor( (x.2++x.5) ) @ #k )
          next
            case case_3_case_49
            by solve( BlindingFactor( (x++x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_50
            by solve( BlindingFactor( (x++x.2++x.5) ) @ #k )
          next
            case case_3_case_51
            by solve( BlindingFactor( (x.2++x.4++x.6) ) @ #k )
          next
            case case_3_case_52
            by solve( BlindingFactor( (x++x.2++x.4++x.6) ) @ #k )
          next
            case case_3_case_53
            by solve( BlindingFactor( (x++x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_54
            by solve( BlindingFactor( (x.2++x.3++x.4) ) @ #k )
          next
            case case_3_case_55
            by solve( BlindingFactor( (x.2++x.4) ) @ #k )
          next
            case case_3_case_56
            by solve( BlindingFactor( (x.2++x.3) ) @ #k )
          next
            case case_3_case_57
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_58
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_59
            by solve( BlindingFactor( (x++x.2++x.3) ) @ #k )
          next
            case case_3_case_60
            solve( !KU( ~b ) @ #vk.4 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_61
            by solve( BlindingFactor( (x.2++x.5) ) @ #k )
          next
            case case_3_case_62
            by solve( BlindingFactor( (x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_63
            by solve( BlindingFactor( (x++x.2++x.5) ) @ #k )
          next
            case case_3_case_64
            by solve( BlindingFactor( (x++x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_65
            by solve( BlindingFactor( (x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_66
            by solve( BlindingFactor( (x.2++x.5) ) @ #k )
          next
            case case_3_case_67
            by solve( BlindingFactor( (x++x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_68
            by solve( BlindingFactor( (x++x.2++x.5) ) @ #k )
          next
            case case_3_case_69
            by solve( BlindingFactor( (x.2++x.4++x.6) ) @ #k )
          next
            case case_3_case_70
            by solve( BlindingFactor( (x++x.2++x.4++x.6) ) @ #k )
          next
            case case_3_case_71
            by solve( BlindingFactor( (x.1++x.3++x.4++x.5) ) @ #k )
          next
            case case_3_case_72
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_3_case_73
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_74
            by solve( BlindingFactor( (x.1++x.3++x.4) ) @ #k )
          next
            case case_3_case_75
            by solve( BlindingFactor( (x.1++x.3++x.6) ) @ #k )
          next
            case case_3_case_76
            by solve( BlindingFactor( (x.1++x.3++x.4++x.6) ) @ #k )
          next
            case case_3_case_77
            by solve( BlindingFactor( (x.1++x.3++x.4++x.6) ) @ #k )
          next
            case case_3_case_78
            by solve( BlindingFactor( (x.1++x.3++x.6) ) @ #k )
          next
            case case_3_case_79
            by solve( BlindingFactor( (x.1++x.3++x.5++x.7) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_08
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (b++f++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b.1 #k.
                   (BlindingFactor( b.1 ) @ #k) ∧ ((b++f++x) = (a++b.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (b++f++x) ) @ #k )
          next
            case case_3_case_01
            by solve( BlindingFactor( (f++x) ) @ #k )
          next
            case case_3_case_02
            by solve( BlindingFactor( (b++x) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (b++f) ) @ #k )
          next
            case case_3_case_04
            solve( (∀ #j. (!HumanGenerated( ~pw.1 ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( ~b.1 ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a b.2 #k.
                     (BlindingFactor( b.2 ) @ #k) ∧ (~b.1 = (a++b.2)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.1.
                     (PQAdversaryAction( ) @ #k.1) ∧ (¬(last(#k.1))) ∧ (#k.1 < #k))  ∥
                   (∃ #k.1. (!KU( ~pw.1 ) @ #k.1) ∧ (¬(last(#k.1))) ∧ (#k.1 < #k)) )
              case case_1
              by solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
            next
              case case_2
              solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
                case client_register
                solve( !KU( ~b.1 ) @ #vk.3 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
                case client_register
                solve( !KU( ~b.1 ) @ #vk.3 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_07
            by solve( BlindingFactor( (b++f++x) ) @ #k )
          next
            case case_3_case_08
            solve( (∀ #j. (!HumanGenerated( ~pw.1 ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( ~b.1 ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a b.2 #k.
                     (BlindingFactor( b.2 ) @ #k) ∧ (~b.1 = (a++b.2)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.1.
                     (PQAdversaryAction( ) @ #k.1) ∧ (¬(last(#k.1))) ∧ (#k.1 < #k))  ∥
                   (∃ #k.1. (!KU( ~pw.1 ) @ #k.1) ∧ (¬(last(#k.1))) ∧ (#k.1 < #k)) )
              case case_1
              by solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
            next
              case case_2
              solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
                case client_register
                solve( !KU( ~b.1 ) @ #vk.4 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
                case client_register
                solve( !KU( ~b.1 ) @ #vk.4 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_3_case_09
            by solve( BlindingFactor( (f++x.1) ) @ #k )
          next
            case case_3_case_10
            by solve( BlindingFactor( (b++x.1) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (b++x++x.1) ) @ #k )
          next
            case case_3_case_12
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_13
            by contradiction /* from formulas */
          next
            case case_3_case_14
            by solve( BlindingFactor( (b++x.2) ) @ #k )
          next
            case case_3_case_15
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_16
            by solve( BlindingFactor( (b++x.1++x.3) ) @ #k )
          next
            case case_3_case_17
            by solve( BlindingFactor( (f++x++x.1) ) @ #k )
          next
            case case_3_case_18
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_19
            by solve( BlindingFactor( (f++x.2) ) @ #k )
          next
            case case_3_case_20
            solve( !KU( ~b ) @ #vk.4 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_21
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_22
            by solve( BlindingFactor( (f++x.1++x.3) ) @ #k )
          next
            case case_3_case_23
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_24
            by solve( BlindingFactor( (x.2++x.4) ) @ #k )
          next
            case case_3_case_25
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_09
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++f) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((a++f) = (b++a.1)) ∧ ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (a++f) ) @ #k )
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_3
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_3_case_5
            by solve( BlindingFactor( (f++x) ) @ #k )
          next
            case case_3_case_6
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_7
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_10
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++b++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b.1 #k.
                   (BlindingFactor( b.1 ) @ #k) ∧ ((a++b++x) = (a.1++b.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (a++b++x) ) @ #k )
          next
            case case_3_case_01
            by contradiction /* from formulas */
          next
            case case_3_case_02
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (a++b) ) @ #k )
          next
            case case_3_case_04
            by contradiction /* from formulas */
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_07
            by solve( BlindingFactor( (a++b++x) ) @ #k )
          next
            case case_3_case_08
            by contradiction /* from formulas */
          next
            case case_3_case_09
            by contradiction /* from formulas */
          next
            case case_3_case_10
            by solve( BlindingFactor( (a++x.1) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (a++x++x.1) ) @ #k )
          next
            case case_3_case_12
            by contradiction /* from formulas */
          next
            case case_3_case_13
            by contradiction /* from formulas */
          next
            case case_3_case_14
            by solve( BlindingFactor( (a++x.2) ) @ #k )
          next
            case case_3_case_15
            by contradiction /* from formulas */
          next
            case case_3_case_16
            by solve( BlindingFactor( (a++x.1++x.3) ) @ #k )
          next
            case case_3_case_17
            by solve( BlindingFactor( (b++x++x.1) ) @ #k )
          next
            case case_3_case_18
            by solve( BlindingFactor( (x.1++x.2) ) @ #k )
          next
            case case_3_case_19
            by solve( BlindingFactor( (b++x.1) ) @ #k )
          next
            case case_3_case_20
            solve( !KU( ~b ) @ #vk.4 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_21
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_22
            by solve( BlindingFactor( (b++x.1++x.3) ) @ #k )
          next
            case case_3_case_23
            by solve( BlindingFactor( (x.1++x.2++x.4) ) @ #k )
          next
            case case_3_case_24
            by solve( BlindingFactor( (x.1++x.4) ) @ #k )
          next
            case case_3_case_25
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_11
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++f) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((a++f) = (b++a.1)) ∧ ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (a++f) ) @ #k )
          next
            case case_3_case_1
            by contradiction /* from formulas */
          next
            case case_3_case_2
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_3
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_4
            by contradiction /* from formulas */
          next
            case case_3_case_5
            by solve( BlindingFactor( (f++x) ) @ #k )
          next
            case case_3_case_6
            solve( !KU( ~b ) @ #vk.3 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_7
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_12
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++x++a.1) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.2 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((a++x++a.1) = (b++a.2))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (a++x++a.1) ) @ #k )
          next
            case case_3_case_01
            by contradiction /* from formulas */
          next
            case case_3_case_02
            by solve( BlindingFactor( (a++a.1) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_04
            by contradiction /* from formulas */
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            solve( !KU( ~b ) @ #vk.1 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_07
            by solve( BlindingFactor( (a++x++x.1) ) @ #k )
          next
            case case_3_case_08
            by contradiction /* from formulas */
          next
            case case_3_case_09
            by contradiction /* from formulas */
          next
            case case_3_case_10
            by solve( BlindingFactor( (a++x.2) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (a++x++a.1) ) @ #k )
          next
            case case_3_case_12
            by contradiction /* from formulas */
          next
            case case_3_case_13
            by contradiction /* from formulas */
          next
            case case_3_case_14
            by solve( BlindingFactor( (a++x.1) ) @ #k )
          next
            case case_3_case_15
            by contradiction /* from formulas */
          next
            case case_3_case_16
            by solve( BlindingFactor( (a++x.1++x.3) ) @ #k )
          next
            case case_3_case_17
            by solve( BlindingFactor( (x++a.1++x.1) ) @ #k )
          next
            case case_3_case_18
            by solve( BlindingFactor( (a++x.1) ) @ #k )
          next
            case case_3_case_19
            by solve( BlindingFactor( (x.1++x.2) ) @ #k )
          next
            case case_3_case_20
            solve( !KU( ~b ) @ #vk.3 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_21
            by solve( BlindingFactor( (x.1++x.4) ) @ #k )
          next
            case case_3_case_22
            by solve( BlindingFactor( (x.1++x.2++x.4) ) @ #k )
          next
            case case_3_case_23
            by solve( BlindingFactor( (a++x.1++x.3) ) @ #k )
          next
            case case_3_case_24
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_25
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_13
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (a++f++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a.1 b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((a++f++x) = (b++a.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (a++f++x) ) @ #k )
          next
            case case_3_case_01
            by solve( BlindingFactor( (f++x) ) @ #k )
          next
            case case_3_case_02
            by solve( BlindingFactor( (a++x) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (a++f) ) @ #k )
          next
            case case_3_case_04
            solve( !KU( ~b ) @ #vk.3 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            solve( !KU( ~b ) @ #vk.2 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_07
            by solve( BlindingFactor( (a++f++x) ) @ #k )
          next
            case case_3_case_08
            solve( !KU( ~b ) @ #vk.4 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_09
            by solve( BlindingFactor( (f++x.1) ) @ #k )
          next
            case case_3_case_10
            by solve( BlindingFactor( (a++x.1) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (a++x++x.1) ) @ #k )
          next
            case case_3_case_12
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_13
            by contradiction /* from formulas */
          next
            case case_3_case_14
            by solve( BlindingFactor( (a++x.2) ) @ #k )
          next
            case case_3_case_15
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_16
            by solve( BlindingFactor( (a++x.1++x.3) ) @ #k )
          next
            case case_3_case_17
            by solve( BlindingFactor( (f++x++x.1) ) @ #k )
          next
            case case_3_case_18
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_19
            by solve( BlindingFactor( (f++x.2) ) @ #k )
          next
            case case_3_case_20
            solve( !KU( ~b ) @ #vk.4 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_21
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_22
            by solve( BlindingFactor( (f++x.1++x.3) ) @ #k )
          next
            case case_3_case_23
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_24
            by solve( BlindingFactor( (x.2++x.4) ) @ #k )
          next
            case case_3_case_25
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_14
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k.
                   (BlindingFactor( (x++x.1++x.2++x.3) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b #k.
                   (BlindingFactor( b ) @ #k) ∧ ((x++x.1++x.2++x.3) = (a++b))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (x++x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_01
            by solve( BlindingFactor( (x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_02
            by solve( BlindingFactor( (x++x.2++x.3) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (x++x.1++x.3) ) @ #k )
          next
            case case_3_case_04
            by solve( BlindingFactor( (x++x.1++x.2) ) @ #k )
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            by contradiction /* from formulas */
          next
            case case_3_case_07
            by contradiction /* from formulas */
          next
            case case_3_case_08
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_09
            solve( !KU( ~b ) @ #vk.5 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_10
            by solve( BlindingFactor( (x.1++x.2) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (x++x.3) ) @ #k )
          next
            case case_3_case_12
            solve( !KU( ~b ) @ #vk.3 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_13
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_14
            by solve( BlindingFactor( (x++x.1) ) @ #k )
          next
            case case_3_case_15
            by solve( BlindingFactor( (x++x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_16
            by contradiction /* from formulas */
          next
            case case_3_case_17
            by contradiction /* from formulas */
          next
            case case_3_case_18
            by solve( BlindingFactor( (x.1++x.4) ) @ #k )
          next
            case case_3_case_19
            by solve( BlindingFactor( (x.1++x.2++x.4) ) @ #k )
          next
            case case_3_case_20
            by solve( BlindingFactor( (x++x.4) ) @ #k )
          next
            case case_3_case_21
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_22
            by solve( BlindingFactor( (x++x.1++x.4) ) @ #k )
          next
            case case_3_case_23
            by solve( BlindingFactor( (x++x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_24
            by contradiction /* from formulas */
          next
            case case_3_case_25
            by contradiction /* from formulas */
          next
            case case_3_case_26
            by solve( BlindingFactor( (x.1++x.2++x.4) ) @ #k )
          next
            case case_3_case_27
            by solve( BlindingFactor( (x.1++x.4) ) @ #k )
          next
            case case_3_case_28
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_29
            by solve( BlindingFactor( (x++x.4) ) @ #k )
          next
            case case_3_case_30
            by solve( BlindingFactor( (x++x.1++x.4) ) @ #k )
          next
            case case_3_case_31
            by contradiction /* from formulas */
          next
            case case_3_case_32
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_3_case_33
            by solve( BlindingFactor( (x++x.3++x.5) ) @ #k )
          next
            case case_3_case_34
            by solve( BlindingFactor( (x++x.1++x.3++x.5) ) @ #k )
          next
            case case_3_case_35
            by solve( BlindingFactor( (x++x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_36
            by solve( BlindingFactor( (x.2++x.3++x.4) ) @ #k )
          next
            case case_3_case_37
            by solve( BlindingFactor( (x.2++x.4) ) @ #k )
          next
            case case_3_case_38
            by solve( BlindingFactor( (x.2++x.3) ) @ #k )
          next
            case case_3_case_39
            solve( !KU( ~b ) @ #vk.6 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_40
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_41
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_42
            by solve( BlindingFactor( (x++x.2++x.3) ) @ #k )
          next
            case case_3_case_43
            by solve( BlindingFactor( (x.2++x.5) ) @ #k )
          next
            case case_3_case_44
            by solve( BlindingFactor( (x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_45
            by solve( BlindingFactor( (x++x.2++x.5) ) @ #k )
          next
            case case_3_case_46
            by solve( BlindingFactor( (x++x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_47
            by solve( BlindingFactor( (x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_48
            by solve( BlindingFactor( (x.2++x.5) ) @ #k )
          next
            case case_3_case_49
            by solve( BlindingFactor( (x++x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_50
            by solve( BlindingFactor( (x++x.2++x.5) ) @ #k )
          next
            case case_3_case_51
            by solve( BlindingFactor( (x.2++x.4++x.6) ) @ #k )
          next
            case case_3_case_52
            by solve( BlindingFactor( (x++x.2++x.4++x.6) ) @ #k )
          next
            case case_3_case_53
            by solve( BlindingFactor( (x++x.1++x.2++x.3) ) @ #k )
          next
            case case_3_case_54
            by solve( BlindingFactor( (x.2++x.3++x.4) ) @ #k )
          next
            case case_3_case_55
            by solve( BlindingFactor( (x.2++x.4) ) @ #k )
          next
            case case_3_case_56
            by solve( BlindingFactor( (x.2++x.3) ) @ #k )
          next
            case case_3_case_57
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_58
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_59
            by solve( BlindingFactor( (x++x.2++x.3) ) @ #k )
          next
            case case_3_case_60
            solve( !KU( ~b ) @ #vk.6 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_61
            by solve( BlindingFactor( (x.2++x.5) ) @ #k )
          next
            case case_3_case_62
            by solve( BlindingFactor( (x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_63
            by solve( BlindingFactor( (x++x.2++x.5) ) @ #k )
          next
            case case_3_case_64
            by solve( BlindingFactor( (x++x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_65
            by solve( BlindingFactor( (x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_66
            by solve( BlindingFactor( (x.2++x.5) ) @ #k )
          next
            case case_3_case_67
            by solve( BlindingFactor( (x++x.2++x.3++x.5) ) @ #k )
          next
            case case_3_case_68
            by solve( BlindingFactor( (x++x.2++x.5) ) @ #k )
          next
            case case_3_case_69
            by solve( BlindingFactor( (x.2++x.4++x.6) ) @ #k )
          next
            case case_3_case_70
            by solve( BlindingFactor( (x++x.2++x.4++x.6) ) @ #k )
          next
            case case_3_case_71
            by solve( BlindingFactor( (x.1++x.3++x.4++x.5) ) @ #k )
          next
            case case_3_case_72
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_3_case_73
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_74
            by solve( BlindingFactor( (x.1++x.3++x.4) ) @ #k )
          next
            case case_3_case_75
            by solve( BlindingFactor( (x.1++x.3++x.6) ) @ #k )
          next
            case case_3_case_76
            by solve( BlindingFactor( (x.1++x.3++x.4++x.6) ) @ #k )
          next
            case case_3_case_77
            by solve( BlindingFactor( (x.1++x.3++x.4++x.6) ) @ #k )
          next
            case case_3_case_78
            by solve( BlindingFactor( (x.1++x.3++x.6) ) @ #k )
          next
            case case_3_case_79
            by solve( BlindingFactor( (x.1++x.3++x.5++x.7) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        next
          case mul_up_case_15
          solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                 (∃ #k. (BlindingFactor( (b++f++x) ) @ #k) ∧ ¬(last(#k)))  ∥
                 (∃ a b.1 #k.
                   (BlindingFactor( b.1 ) @ #k) ∧ ((b++f++x) = (a++b.1))
                  ∧
                   ¬(last(#k)))  ∥
                 (∃ #k.
                   (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2))  ∥
                 (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.2)) )
            case case_2
            by solve( BlindingFactor( (b++f++x) ) @ #k )
          next
            case case_3_case_01
            by solve( BlindingFactor( (f++x) ) @ #k )
          next
            case case_3_case_02
            by solve( BlindingFactor( (b++x) ) @ #k )
          next
            case case_3_case_03
            by solve( BlindingFactor( (b++f) ) @ #k )
          next
            case case_3_case_04
            solve( (∀ #j. (!HumanGenerated( ~pw.1 ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( ~b.1 ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a b.2 #k.
                     (BlindingFactor( b.2 ) @ #k) ∧ (~b.1 = (a++b.2)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.1.
                     (PQAdversaryAction( ) @ #k.1) ∧ (¬(last(#k.1))) ∧ (#k.1 < #k))  ∥
                   (∃ #k.1. (!KU( ~pw.1 ) @ #k.1) ∧ (¬(last(#k.1))) ∧ (#k.1 < #k)) )
              case case_1
              by solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
            next
              case case_2
              solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
                case client_register
                solve( !KU( ~b.1 ) @ #vk.4 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
                case client_register
                solve( !KU( ~b.1 ) @ #vk.4 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_3_case_05
            by contradiction /* from formulas */
          next
            case case_3_case_06
            solve( !KU( ~b ) @ #vk.5 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_07
            by solve( BlindingFactor( (b++f++x) ) @ #k )
          next
            case case_3_case_08
            solve( (∀ #j. (!HumanGenerated( ~pw.1 ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( ~b.1 ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a b.2 #k.
                     (BlindingFactor( b.2 ) @ #k) ∧ (~b.1 = (a++b.2)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.1.
                     (PQAdversaryAction( ) @ #k.1) ∧ (¬(last(#k.1))) ∧ (#k.1 < #k))  ∥
                   (∃ #k.1. (!KU( ~pw.1 ) @ #k.1) ∧ (¬(last(#k.1))) ∧ (#k.1 < #k)) )
              case case_1
              by solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
            next
              case case_2
              solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
                case client_register
                solve( !KU( ~b.1 ) @ #vk.6 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case case_4
              by contradiction /* from formulas */
            next
              case case_5
              solve( !Client_1( $cid.1, ~pw.1, $sid1, $sid2, $sid3 ) ▶₀ #k )
                case client_register
                solve( !KU( ~b.1 ) @ #vk.6 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case case_3_case_09
            by solve( BlindingFactor( (f++x.1) ) @ #k )
          next
            case case_3_case_10
            by solve( BlindingFactor( (b++x.1) ) @ #k )
          next
            case case_3_case_11
            by solve( BlindingFactor( (b++x++x.1) ) @ #k )
          next
            case case_3_case_12
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_13
            by contradiction /* from formulas */
          next
            case case_3_case_14
            by solve( BlindingFactor( (b++x.2) ) @ #k )
          next
            case case_3_case_15
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_16
            by solve( BlindingFactor( (b++x.1++x.3) ) @ #k )
          next
            case case_3_case_17
            by solve( BlindingFactor( (f++x++x.1) ) @ #k )
          next
            case case_3_case_18
            by solve( BlindingFactor( (x++x.2) ) @ #k )
          next
            case case_3_case_19
            by solve( BlindingFactor( (f++x.2) ) @ #k )
          next
            case case_3_case_20
            solve( !KU( ~b ) @ #vk.6 )
              case solve_dlog_case_1
              by contradiction /* from formulas */
            next
              case solve_dlog_case_2
              by contradiction /* from formulas */
            qed
          next
            case case_3_case_21
            by solve( BlindingFactor( (x.1++x.3) ) @ #k )
          next
            case case_3_case_22
            by solve( BlindingFactor( (f++x.1++x.3) ) @ #k )
          next
            case case_3_case_23
            by solve( BlindingFactor( (x++x.2++x.4) ) @ #k )
          next
            case case_3_case_24
            by solve( BlindingFactor( (x.2++x.4) ) @ #k )
          next
            case case_3_case_25
            by solve( BlindingFactor( (x.1++x.3++x.5) ) @ #k )
          next
            case case_4
            by contradiction /* from formulas */
          next
            case case_5
            by contradiction /* from formulas */
          qed
        qed
      next
        case remove
        solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
               (∃ #k. (BlindingFactor( (a++f) ) @ #k) ∧ ¬(last(#k)))  ∥
               (∃ a.1 b #k.
                 (BlindingFactor( b ) @ #k) ∧ ((a++f) = (b++a.1)) ∧ ¬(last(#k)))  ∥
               (∃ #k. (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr))  ∥
               (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr)) )
          case case_2
          by solve( BlindingFactor( (a++f) ) @ #k )
        next
          case case_3_case_1
          by contradiction /* from formulas */
        next
          case case_3_case_2
          solve( !KU( ~b ) @ #vk )
            case solve_dlog_case_1
            by contradiction /* from formulas */
          next
            case solve_dlog_case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3_case_3
          by solve( BlindingFactor( (a++x) ) @ #k )
        next
          case case_3_case_4
          by contradiction /* from formulas */
        next
          case case_3_case_5
          by solve( BlindingFactor( (f++x) ) @ #k )
        next
          case case_3_case_6
          solve( !KU( ~b ) @ #vk.2 )
            case solve_dlog_case_1
            by contradiction /* from formulas */
          next
            case solve_dlog_case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3_case_7
          by solve( BlindingFactor( (x.1++x.3) ) @ #k )
        next
          case case_4
          by contradiction /* from formulas */
        next
          case case_5
          by contradiction /* from formulas */
        qed
      qed
    next
      case server_reconstruct_phase1
      solve( !Server_1( $sid, $cid, ~koprf_share, s_enc_share, kvfy
             ) ▶₀ #i )
        case server_register
        solve( SCServerIn( $client, $sid, <$cid, mul(factors, h(~pw))>
               ) ▶₁ #i )
          case client_out_case_1
          solve( !KU( mul(factors, h(~pw)) ) @ #vk.2 )
            case adversary_recv_case_1
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k.
                     (BlindingFactor( (factors++~koprf_share.1) ) @ #k)
                    ∧
                     ¬(last(#k)))  ∥
                   (∃ a b #k.
                     (BlindingFactor( b ) @ #k) ∧ ((factors++~koprf_share.1) = (a++b))
                    ∧
                     ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.7))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.7)) )
              case case_2
              by contradiction /* from formulas */
            next
              case case_3_case_1
              by contradiction /* from formulas */
            next
              case case_3_case_2
              by contradiction /* from formulas */
            next
              case case_3_case_3
              by contradiction /* from formulas */
            next
              case case_3_case_4
              by contradiction /* from formulas */
            next
              case case_4
              by contradiction /* cyclic */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_2
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k.
                     (BlindingFactor( (factors++~koprf_share.1) ) @ #k)
                    ∧
                     ¬(last(#k)))  ∥
                   (∃ a b #k.
                     (BlindingFactor( b ) @ #k) ∧ ((factors++~koprf_share.1) = (a++b))
                    ∧
                     ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #j.1)) )
              case case_2
              by contradiction /* from formulas */
            next
              case case_3_case_1
              by contradiction /* from formulas */
            next
              case case_3_case_2
              by contradiction /* from formulas */
            next
              case case_3_case_3
              by contradiction /* from formulas */
            next
              case case_3_case_4
              by contradiction /* from formulas */
            next
              case case_4
              by contradiction /* cyclic */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case c_mul
            solve( !KU( h(~pw) ) @ #vk.4 )
              case c_h
              by contradiction /* from formulas */
            next
              case extract_case_1
              solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                     (∃ #k. (BlindingFactor( a ) @ #k) ∧ ¬(last(#k)))  ∥
                     (∃ a.1 b #k.
                       (BlindingFactor( b ) @ #k) ∧ (a = (b++a.1)) ∧ ¬(last(#k)))  ∥
                     (∃ #k.
                       (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.5))  ∥
                     (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.5)) )
                case case_2
                solve( !KU( ~b ) @ #vk.5 )
                  case solve_dlog_case_1
                  by contradiction /* cyclic */
                next
                  case solve_dlog_case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_3
                solve( !KU( ~b ) @ #vk.8 )
                  case solve_dlog_case_1
                  by contradiction /* cyclic */
                next
                  case solve_dlog_case_2
                  by contradiction /* cyclic */
                qed
              next
                case case_4
                by contradiction /* cyclic */
              next
                case case_5
                by contradiction /* from formulas */
              qed
            next
              case extract_case_2
              solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                     (∃ #k. (BlindingFactor( a ) @ #k) ∧ ¬(last(#k)))  ∥
                     (∃ a.1 b #k.
                       (BlindingFactor( b ) @ #k) ∧ (a = (b++a.1)) ∧ ¬(last(#k)))  ∥
                     (∃ #k.
                       (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.5))  ∥
                     (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.5)) )
                case case_2
                solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                       (∃ #k. (BlindingFactor( ~b ) @ #k) ∧ ¬(last(#k)))  ∥
                       (∃ a b.1 #k.
                         (BlindingFactor( b.1 ) @ #k) ∧ (~b = (a++b.1)) ∧ ¬(last(#k)))  ∥
                       (∃ #k.
                         (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.6))  ∥
                       (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.6)) )
                  case case_2
                  solve( !KU( ~b ) @ #vk.5 )
                    case solve_dlog_case_1
                    by contradiction /* cyclic */
                  next
                    case solve_dlog_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case case_4
                  by contradiction /* cyclic */
                next
                  case case_5
                  by contradiction /* from formulas */
                qed
              next
                case case_3
                solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                       (∃ #k. (BlindingFactor( (~b++a) ) @ #k) ∧ ¬(last(#k)))  ∥
                       (∃ a.1 b.1 #k.
                         (BlindingFactor( b.1 ) @ #k) ∧ ((~b++a) = (a.1++b.1))
                        ∧
                         ¬(last(#k)))  ∥
                       (∃ #k.
                         (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.6))  ∥
                       (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.6)) )
                  case case_2
                  by solve( BlindingFactor( (~b++a) ) @ #k.1 )
                next
                  case case_3
                  solve( !KU( ~b ) @ #vk.8 )
                    case solve_dlog_case_1
                    by contradiction /* cyclic */
                  next
                    case solve_dlog_case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case case_4
                  by contradiction /* cyclic */
                next
                  case case_5
                  by contradiction /* from formulas */
                qed
              next
                case case_4
                by contradiction /* cyclic */
              next
                case case_5
                by contradiction /* from formulas */
              qed
            qed
          next
            case eavesdrop_server_case_1
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_2
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_3
            by contradiction /* from formulas */
          next
            case mul_up_case_1
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( factors ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a b #k.
                     (BlindingFactor( b ) @ #k) ∧ (factors = (a++b)) ∧ ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.6))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.6)) )
              case case_2
              by contradiction /* from formulas */
            next
              case case_3
              by contradiction /* from formulas */
            next
              case case_4
              by contradiction /* cyclic */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_2
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( (a++b) ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a.1 b.1 #k.
                     (BlindingFactor( b.1 ) @ #k) ∧ ((a++b) = (a.1++b.1))
                    ∧
                     ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.6))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.6)) )
              case case_2
              by contradiction /* from formulas */
            next
              case case_3_case_1
              by contradiction /* from formulas */
            next
              case case_3_case_2
              by contradiction /* from formulas */
            next
              case case_3_case_3
              by contradiction /* from formulas */
            next
              case case_3_case_4
              by contradiction /* from formulas */
            next
              case case_3_case_5
              by contradiction /* from formulas */
            next
              case case_3_case_6
              by contradiction /* from formulas */
            next
              case case_3_case_7
              by contradiction /* from formulas */
            next
              case case_4
              by contradiction /* cyclic */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_3
            solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ last(#j))  ∥
                   (∃ #k. (BlindingFactor( (a++b) ) @ #k) ∧ ¬(last(#k)))  ∥
                   (∃ a.1 b.1 #k.
                     (BlindingFactor( b.1 ) @ #k) ∧ ((a++b) = (a.1++b.1))
                    ∧
                     ¬(last(#k)))  ∥
                   (∃ #k.
                     (PQAdversaryAction( ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.6))  ∥
                   (∃ #k. (!KU( ~pw ) @ #k) ∧ (¬(last(#k))) ∧ (#k < #vr.6)) )
              case case_2
              by contradiction /* from formulas */
            next
              case case_3_case_1
              by contradiction /* from formulas */
            next
              case case_3_case_2
              by contradiction /* from formulas */
            next
              case case_3_case_3
              by contradiction /* from formulas */
            next
              case case_3_case_4
              by contradiction /* from formulas */
            next
              case case_3_case_5
              by contradiction /* from formulas */
            next
              case case_3_case_6
              by contradiction /* from formulas */
            next
              case case_3_case_7
              by contradiction /* from formulas */
            next
              case case_4
              by contradiction /* cyclic */
            next
              case case_5
              by contradiction /* from formulas */
            qed
          qed
        next
          case client_out_case_2
          by contradiction /* from formulas */
        next
          case client_out_case_3
          by contradiction /* from formulas */
        next
          case client_out_case_4
          by contradiction /* from formulas */
        qed
      qed
    qed
  next
    case case_2
    solve( !KMul( mul(f, h(~pw)) ) @ #i )
      case add
      by contradiction /* node #i after last node #j */
    next
      case client_reconstruct_phase1
      by contradiction /* from formulas */
    next
      case combine
      by contradiction /* node #i after last node #j */
    next
      case extract
      by contradiction /* node #i after last node #j */
    next
      case mul_coerce
      by contradiction /* node #i after last node #j */
    next
      case remove
      by contradiction /* node #i after last node #j */
    next
      case server_reconstruct_phase1
      by contradiction /* node #i after last node #j */
    qed
  next
    case case_3
    by contradiction /* from formulas */
  next
    case case_4
    by contradiction /* from formulas */
  next
    case case_5
    by contradiction /* from formulas */
  next
    case case_6
    by contradiction /* from formulas */
  qed
qed

lemma pw_pre_quantum_secrecy [reuse,
                              heuristic={pw_pre_quantum_secrecy}]:
  all-traces
  "∀ pw cid sid1 sid2 sid3 #i.
    (Secret( 'pw', pw, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    (((¬(∃ #j. !KU( pw ) @ #j)) ∨
      (∃ #j #k #l.
        ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
        (!Compromised( sid3 ) @ #l))) ∨
     (∃ #j #k.
       ((!KU( pw ) @ #j) ∧ (PQAdversaryAction( ) @ #k)) ∧ (#k < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ pw cid sid1 sid2 sid3 #i.
  (Secret( 'pw', pw, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( pw ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥) ∧
  (∀ #j #k.
    (!KU( pw ) @ #j) ∧ (PQAdversaryAction( ) @ #k) ⇒ ¬(#k < #j))"
*/
simplify
solve( Secret( 'pw', pw, cid, <sid1, sid2, sid3> ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !Server( $sid1 ) ▶₇ #i )
      case create_server
      solve( !Server( $sid2 ) ▶₈ #i )
        case create_server
        solve( !Server( $sid3 ) ▶₉ #i )
          case create_server
          solve( splitEqs(0) )
            case split
            solve( !KU( ~pw ) @ #j )
              case bruteforce_case_001
              solve( !Bruteforce( ~pw,
                                  <~pw.1, mul((~koprf1.1++~koprf2.1++~koprf3.1), h(~pw.1))>
                     ) ▶₀ #vr.6 )
                case bruteforce_pair_case_1
                solve( !Bruteforce( ~pw, ~pw.1 ) ▶₀ #vr.11 )
                  case bruteforce_hg
                  solve( !Bruteforce( ~w, mul((~koprf1++~koprf2++~koprf3), h(~pw))
                         ) ▶₁ #vr.6 )
                    case bruteforce_mul
                    solve( !KU( ~koprf1 ) @ #vk.1 )
                      case eavesdrop_server
                      solve( !KU( ~koprf2 ) @ #vk.2 )
                        case eavesdrop_server
                        solve( !KU( ~koprf3 ) @ #vk.3 )
                          case eavesdrop_server
                          by contradiction /* from formulas */
                        next
                          case solve_dlog_case_1
                          by contradiction /* from formulas */
                        next
                          case solve_dlog_case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case solve_dlog_case_1
                        by contradiction /* from formulas */
                      next
                        case solve_dlog_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case solve_dlog_case_1
                      by contradiction /* from formulas */
                    next
                      case solve_dlog_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case bruteforce_pair_case_2
                solve( !Bruteforce( ~v, ~pw.1 ) ▶₀ #vr.11 )
                  case bruteforce_hg
                  solve( !Bruteforce( ~pw,
                                      mul((~koprf1.1++~koprf2.1++~koprf3.1), h(~v))
                         ) ▶₁ #vr.11 )
                    case bruteforce_mul
                    solve( !Bruteforce( ~pw, h(~v) ) ▶₁ #vr.13 )
                      case bruteforce_hash
                      solve( !Bruteforce( ~pw, ~v ) ▶₀ #vr.14 )
                        case bruteforce_hg
                        solve( !KU( ~koprf1 ) @ #vk.1 )
                          case eavesdrop_server
                          solve( !KU( ~koprf2 ) @ #vk.2 )
                            case eavesdrop_server
                            solve( !KU( ~koprf3 ) @ #vk.3 )
                              case eavesdrop_server
                              by contradiction /* from formulas */
                            next
                              case solve_dlog_case_1
                              by contradiction /* from formulas */
                            next
                              case solve_dlog_case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case solve_dlog_case_1
                            by contradiction /* from formulas */
                          next
                            case solve_dlog_case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case solve_dlog_case_1
                          by contradiction /* from formulas */
                        next
                          case solve_dlog_case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case bruteforce_pair_left
                solve( !Bruteforce( ~pw, ~pw.1 ) ▶₀ #vr.11 )
                  case bruteforce_hg
                  solve( !KU( mul((~koprf1++~koprf2++~koprf3), h(~pw)) ) @ #vk )
                    case adversary_recv_case_1
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.10)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.10) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* cyclic */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case adversary_recv_case_2
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.10)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.10) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* cyclic */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case adversary_recv_case_3
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.10)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.10) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* cyclic */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case adversary_recv_case_4
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #j.1)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #j.1) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* cyclic */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case adversary_recv_case_5
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #j.1)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #j.1) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* cyclic */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case adversary_recv_case_6
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #j.1)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #j.1) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* cyclic */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case c_mul
                    solve( !KU( ~koprf1 ) @ #vk.3 )
                      case eavesdrop_server
                      solve( !KU( ~koprf2 ) @ #vk.4 )
                        case eavesdrop_server
                        solve( !KU( ~koprf3 ) @ #vk.5 )
                          case eavesdrop_server
                          by contradiction /* from formulas */
                        next
                          case solve_dlog_case_1
                          by contradiction /* from formulas */
                        next
                          case solve_dlog_case_2
                          by contradiction /* from formulas */
                        qed
                      next
                        case solve_dlog_case_1
                        by contradiction /* from formulas */
                      next
                        case solve_dlog_case_2
                        by contradiction /* from formulas */
                      qed
                    next
                      case solve_dlog_case_1
                      by contradiction /* from formulas */
                    next
                      case solve_dlog_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case mul_up_case_01
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_02
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_03
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_04
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_05
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_06
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_07
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_08
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_09
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_10
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_11
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_12
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  next
                    case mul_up_case_13
                    solve( (∀ #j. (!HumanGenerated( ~pw ) @ #j) ⇒ ⊥)  ∥
                           (∃ #k. (BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k))  ∥
                           (∃ a b #k.
                             (BlindingFactor( b ) @ #k) ∧
                             ((~koprf1++~koprf2++~koprf3) = (a++b)))  ∥
                           (∃ #k. (PQAdversaryAction( ) @ #k) ∧ #k < #vr.9)  ∥
                           (∃ #k. (!KU( ~pw ) @ #k) ∧ #k < #vr.9) )
                      case case_1
                      by contradiction /* from formulas */
                    next
                      case case_2
                      by solve( BlindingFactor( (~koprf1++~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_1
                      by solve( BlindingFactor( (~koprf2++~koprf3) ) @ #k )
                    next
                      case case_3_case_2
                      by solve( BlindingFactor( (~koprf1++~koprf3) ) @ #k )
                    next
                      case case_3_case_3
                      by solve( BlindingFactor( (~koprf1++~koprf2) ) @ #k )
                    next
                      case case_4
                      by contradiction /* from formulas */
                    next
                      case case_5
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case bruteforce_pair_right
                solve( !Bruteforce( ~pw,
                                    mul((~koprf1.1++~koprf2.1++~koprf3.1), h(~pw.1))
                       ) ▶₁ #vr.11 )
                  case bruteforce_mul
                  solve( !Bruteforce( ~pw, h(~pw.1) ) ▶₁ #vr.12 )
                    case bruteforce_hash
                    solve( !Bruteforce( ~pw, ~pw.1 ) ▶₀ #vr.13 )
                      case bruteforce_hg
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            next
              case bruteforce_case_002
              solve( !KU( ~b ) @ #vk )
                case solve_dlog_case_1
                by contradiction /* from formulas */
              next
                case solve_dlog_case_2
                by contradiction /* from formulas */
              qed
            next
              case bruteforce_case_003
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.3 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_004
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_005
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_006
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_007
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_008
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_009
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_010
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_011
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_012
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_013
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_014
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_015
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_016
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_017
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_018
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_019
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_020
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_021
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_022
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_023
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_024
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_025
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_026
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_027
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_028
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_029
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_030
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_031
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_032
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_033
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_034
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_035
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_036
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_037
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_038
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_039
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_040
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_041
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_042
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_043
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_044
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_045
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_046
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_047
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_048
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_049
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_050
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_051
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_052
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_053
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_054
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_055
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_056
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_057
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_058
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_059
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_060
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_061
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_062
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_063
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_064
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_065
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_066
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_067
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_068
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_069
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_070
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_071
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_072
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_073
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_074
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_075
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_076
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_077
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_078
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_079
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_080
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_081
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_082
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_083
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_084
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_085
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_086
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_087
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_088
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_089
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_090
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_091
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_092
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_093
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_094
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_095
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_096
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_097
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_098
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_099
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_100
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_101
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_102
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_103
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.2 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_104
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_105
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_106
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_107
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_108
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_109
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_110
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_111
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_112
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_113
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_114
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_115
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_116
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_117
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_118
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_119
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_120
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_121
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_122
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_123
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk.1 )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_124
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_125
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_126
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce_case_127
              solve( !Bruteforce( ~pw, mul(~b, h(~pw.1)) ) ▶₀ #vr.6 )
                case bruteforce_mul
                solve( !KU( ~b ) @ #vk )
                  case solve_dlog_case_1
                  by contradiction /* from formulas */
                next
                  case solve_dlog_case_2
                  by contradiction /* from formulas */
                qed
              qed
            next
              case solve_dlog
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma senc_share_secrecy [reuse, heuristic={senc_share_secrecy},
                          hide_lemma=types, hide_lemma=mul_invariant]:
  all-traces
  "∀ s_enc_share cid sid #i.
    (Secret( 'senc_share', s_enc_share, cid, sid ) @ #i) ⇒
    ((¬(∃ #j. !KU( s_enc_share ) @ #j)) ∨
     (∃ #j. !Compromised( sid ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ s_enc_share cid sid #i.
  (Secret( 'senc_share', s_enc_share, cid, sid ) @ #i)
 ∧
  (∃ #j. (!KU( s_enc_share ) @ #j)) ∧
  (∀ #j. (!Compromised( sid ) @ #j) ⇒ ⊥)"
*/
by sorry

lemma senc_secrecy [reuse, heuristic={senc_secrecy},
                    hide_lemma=mul_invariant, hide_lemma=pw_pre_quantum_secrecy]:
  all-traces
  "∀ s_enc cid sid1 sid2 sid3 #i.
    (Secret( 'senc', s_enc, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    ((¬(∃ #j. !KU( s_enc ) @ #j)) ∨
     (∃ #j #k #l.
       ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
       (!Compromised( sid3 ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ s_enc cid sid1 sid2 sid3 #i.
  (Secret( 'senc', s_enc, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( s_enc ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥)"
*/
by sorry

lemma secrecy [hide_lemma=types, hide_lemma=mul_invariant,
               hide_lemma=pw_pre_quantum_secrecy, hide_lemma=senc_share_secrecy]:
  all-traces
  "∀ secret cid sid1 sid2 sid3 #i.
    (Secret( 'secret', secret, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    ((¬(∃ #j. !KU( secret ) @ #j)) ∨
     (∃ #j #k #l.
       ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
       (!Compromised( sid3 ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ secret cid sid1 sid2 sid3 #i.
  (Secret( 'secret', secret, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( secret ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥)"
*/
by sorry

lemma koprf_pre_quantum_secrecy [hide_lemma=types,
                                 hide_lemma=mul_invariant, hide_lemma=pw_pre_quantum_secrecy,
                                 hide_lemma=senc_share_secrecy, hide_lemma=senc_secrecy]:
  all-traces
  "∀ koprf cid sid1 sid2 sid3 #i.
    (Secret( 'koprf', koprf, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    (((¬(∃ #j. !KU( koprf ) @ #j)) ∨
      (∃ #j #k #l.
        ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
        (!Compromised( sid3 ) @ #l))) ∨
     (∃ #j #k.
       ((!KU( koprf ) @ #j) ∧ (PQAdversaryAction( ) @ #k)) ∧ (#k < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ koprf cid sid1 sid2 sid3 #i.
  (Secret( 'koprf', koprf, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( koprf ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥) ∧
  (∀ #j #k.
    (!KU( koprf ) @ #j) ∧ (PQAdversaryAction( ) @ #k) ⇒ ¬(#k < #j))"
*/
by sorry

lemma kauth_pre_quantum_secrecy [hide_lemma=types,
                                 hide_lemma=mul_invariant, hide_lemma=senc_share_secrecy,
                                 hide_lemma=senc_secrecy]:
  all-traces
  "∀ kauth cid sid1 sid2 sid3 #i.
    (Secret( 'kauth', kauth, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    (((¬(∃ #j. !KU( kauth ) @ #j)) ∨
      (∃ #j #k #l.
        ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
        (!Compromised( sid3 ) @ #l))) ∨
     (∃ #j #k.
       ((!KU( kauth ) @ #j) ∧ (PQAdversaryAction( ) @ #k)) ∧ (#k < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ kauth cid sid1 sid2 sid3 #i.
  (Secret( 'kauth', kauth, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( kauth ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥) ∧
  (∀ #j #k.
    (!KU( kauth ) @ #j) ∧ (PQAdversaryAction( ) @ #k) ⇒ ¬(#k < #j))"
*/
by sorry

lemma kenc_secrecy [hide_lemma=types, hide_lemma=mul_invariant,
                    hide_lemma=pw_pre_quantum_secrecy, hide_lemma=senc_share_secrecy]:
  all-traces
  "∀ kenc cid sid1 sid2 sid3 #i.
    (Secret( 'kenc', kenc, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    ((¬(∃ #j. !KU( kenc ) @ #j)) ∨
     (∃ #j #k #l.
       ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
       (!Compromised( sid3 ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ kenc cid sid1 sid2 sid3 #i.
  (Secret( 'kenc', kenc, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( kenc ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥)"
*/
by sorry



























/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.5
Git revision: a6df687a05c2473573749494bdd7752b109f22ae, branch: develop
Compiled at: 2024-12-02 16:31:14.867376732 UTC
*/

end