theory SVR3 begin

// Function signature and definition of the equational theory E

builtins: multiset, xor
functions: KDF/2, fst/1, getMessage/1, h/1, mul/2, pair/2, pk/1,
           revealSign/2, revealVerify/3, sdec/2, senc/2, snd/1, true/0
equations:
    fst(<x.1, x.2>) = x.1,
    getMessage(revealSign(x.1, x.2)) = x.1,
    revealVerify(revealSign(x.1, x.2), x.1, pk(x.2)) = true,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

tactic: sources_lemma
presort: s
prio: {id}
  isFactName"SCIn" & regex",msg,"
prio: {id}
  regex"SourceP\(x"
prio: {id}
  isFactName"SCIn" & regex",t,"
prio: {id}
  isFactName"SCIn" & regex",f,"


tactic: senc_share_secrecy
presort: s
prio: {id}
  regex"SCIn\(.*<\$cid.*<\$cid"
prio: {id}
  regex"splitEqs\(0\)"
prio: {id}
  regex"pk\(x\)"
prio: {id}
  regex"SCIn" & regex"revealSign"
prio: {id}
  regex"!KU\(KDF" | regex"!KU\(h\(<~pw" | regex"!KU\(~pw"
deprio: {id}
  regex"Client_0" | regex"Server"


tactic: senc_secrecy
presort: s
prio: {id}
  regex"SCIn\(.*<\$cid.*<\$cid" | regex"~~>"
prio: {id}
  regex"splitEqs\(0\)"
prio: {id}
  regex"!K[U|D]\((\()?~s_enc" & not regex"Source"
prio: {id}
  regex"SourceP\(t\)" | regex"Factor\(t\)" | regex",t(,)?"
deprio: {id}
  regex"Client_0" | regex"Server"
deprio: {id}
  regex"SourceC" | regex"SourceF"















predicate: NEQ( x, y )<=>¬(x = y)

predicate: DISTINCT( x, y, z )<=>¬(((x = y) ∨ (x = z)) ∨ (y = z))

rule (modulo E) forward[color=#ffffff]:
   [ SCOut( $sender, $receiver, msg ) ]
  --[ Communication( $sender, $receiver ) ]->
   [
   SCIn( $sender, $receiver, msg ), !SCKnows( $sender, msg ),
   !SCKnows( $receiver, msg )
   ]

  /* has exactly the trivial AC variant */

restriction no_communication_between_servers:
  "∀ s r #i #j #k.
    (((Communication( s, r ) @ #i) ∧ (!Server( s ) @ #j)) ∧
     (!Server( r ) @ #k)) ⇒
    (⊥)"
  // safety formula

rule (modulo E) eavesdrop_server[color=#e0afb5]:
   [ !SCKnows( $server, msg ), !Compromised( $server ) ]
  --[ AdversaryAction( ), SourcesAdversaryRecv( msg ) ]->
   [ Out( msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) impersonate_server[color=#e0afb5]:
   [ In( msg ), !Compromised( $server ) ]
  --[ AdversaryAction( ) ]->
   [ SCOut( $server, $client, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) adversary_send[color=#e0afb5]:
   [ In( msg ), !Server( $server ) ]
  --[ AdversaryAction( ) ]->
   [ SCOut( 'adv', $server, msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) adversary_recv[color=#e0afb5]:
   [ SCIn( $server, 'adv', msg ) ]
  --[ AdversaryAction( ), SourcesAdversaryRecv( msg ) ]->
   [ Out( msg ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) mul_down[derivchecks, color=#d66f7c]:
   [ In( mul(f, x) ) ] --> [ !MulD( mul(f, x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) mul_coerce[derivchecks, color=#d66f7c]:
   [ !MulD( mul(f, x) ) ] --> [ !MulU( mul(f, x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) mul_up[derivchecks, color=#d66f7c]:
   [ !MulU( mul(f, x) ) ] --> [ Out( mul(f, x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) combine[derivchecks, color=#d66f7c]:
   [ !MulU( mul(a, x) ), !MulU( mul(b, x) ) ]
  --[ AdversaryAction( ), SourcesPoint( x ) ]->
   [ !MulU( mul((a++b), x) ) ]

  // loop breakers: [0,1]
  /* has exactly the trivial AC variant */

rule (modulo E) add[derivchecks, color=#d66f7c]:
   [ In( a ), !MulU( mul(b, x) ) ]
  --[ AdversaryAction( ), SourcesPoint( x ) ]->
   [ !MulU( mul((a++b), x) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) remove[derivchecks, color=#d66f7c]:
   [ In( a ), !MulD( mul((a++b), x) ) ]
  --[ AdversaryAction( ), SourcesPoint( x ) ]->
   [ !MulD( mul(b, x) ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) extract[derivchecks, color=#d66f7c]:
   [ In( a ), !MulD( mul(a, x) ) ]
  --[ AdversaryAction( ), SourcesPoint( x ) ]->
   [ Out( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) create_server:
   [ ] --[ !Server( $sid ) ]-> [ !Server( $sid ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) compromise_server[color=#d66f7c]:
   [ !Server( $sid ) ]
  --[ AdversaryAction( ), !Compromised( $sid ) ]->
   [ !Compromised( $sid ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) solve_dlog[derivchecks, color=#d66f7c]:
   [ !Factor( f ) ]
  --[ AdversaryAction( ), PQAdversaryAction( ), SourcesFactor( f )
  ]->
   [ Out( f ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) bruteforce:
   [ !HumanGenerated( ~pw ) ]
  --[ AdversaryAction( ), PQAdversaryAction( ) ]->
   [ Out( ~pw ) ]

  /* has exactly the trivial AC variant */

restriction Restr_client_initialise_1:
  "∀ x #NOW.
    (Restr_client_initialise_1( x ) @ #NOW) ⇒ (¬(x = 'adv'))"
  // safety formula

rule (modulo E) client_initialise[color=#77b58d]:
   [ Fr( ~pw ), Fr( ~secret ) ]
  --[ Restr_client_initialise_1( $cid ) ]->
   [ Client_0( $cid, ~pw, ~secret ), !HumanGenerated( ~pw ) ]

  /* has exactly the trivial AC variant */

restriction Restr_client_register_1:
  "∀ x #NOW x.1 x.2 x.3 x.4 x.5 x.6 x.7 x.8.
    (Restr_client_register_1( x, x.1, x.2, x.3, x.4, x.5, x.6, x.7, x.8
     ) @ #NOW) ⇒
    ((((¬(((x = x.1) ∨ (x.2 = x.3)) ∨ (x.4 = x.5))) ∧
       (¬(x.6 = 'adv'))) ∧
      (¬(x.7 = 'adv'))) ∧
     (¬(x.8 = 'adv')))"
  // safety formula

rule (modulo E) client_register[color=#77b58d]:
   [
   Client_0( $cid, ~pw, ~secret ), Fr( ~koprf1 ), Fr( ~koprf2 ),
   Fr( ~koprf3 ), Fr( ~s_enc1 ), Fr( ~s_enc2 ), Fr( ~s_enc3 ),
   !Server( $sid1 ), !Server( $sid2 ), !Server( $sid3 )
   ]
  --[
  ClientRegister( $cid, ~pw, ~secret ),
  SourceC( <$cid, ~koprf1, ~s_enc1, 
            pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>
  ),
  SourceC( <$cid, ~koprf2, ~s_enc2, 
            pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>
  ),
  SourceC( <$cid, ~koprf3, ~s_enc3, 
            pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>
  ),
  SourceC( ~s_enc1 ), SourceC( ~s_enc2 ), SourceC( ~s_enc3 ),
  SourceP( h(~pw) ), SourceF( ~koprf1 ), SourceF( ~koprf2 ),
  SourceF( ~koprf3 ),
  Secret( 'pw', ~pw, $cid, <$sid1, $sid2, $sid3> ),
  Secret( 'koprf', (~koprf1++~koprf2++~koprf3), $cid,
          <$sid1, $sid2, $sid3>
  ),
  Secret( 'kauth',
          h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), $cid,
          <$sid1, $sid2, $sid3>
  ),
  Secret( 'senc', (~s_enc1⊕~s_enc2⊕~s_enc3), $cid,
          <$sid1, $sid2, $sid3>
  ),
  Secret( 'senc_share', ~s_enc1, $cid, $sid1 ),
  Secret( 'senc_share', ~s_enc2, $cid, $sid2 ),
  Secret( 'senc_share', ~s_enc3, $cid, $sid3 ),
  Secret( 'kenc',
          KDF((~s_enc1⊕~s_enc2⊕~s_enc3),
              h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)),
          $cid, <$sid1, $sid2, $sid3>
  ),
  Secret( 'secret', ~secret, $cid, <$sid1, $sid2, $sid3> ),
  Restr_client_register_1( $sid1, $sid2, $sid1, $sid3, $sid2, $sid3,
                           $sid1, $sid2, $sid3
  )
  ]->
   [
   Out( senc(~secret,
             KDF((~s_enc1⊕~s_enc2⊕~s_enc3),
                 h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)))
   ),
   SCOut( $cid, $sid1,
          <$cid, ~koprf1, ~s_enc1, 
           pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>
   ),
   SCOut( $cid, $sid2,
          <$cid, ~koprf2, ~s_enc2, 
           pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>
   ),
   SCOut( $cid, $sid3,
          <$cid, ~koprf3, ~s_enc3, 
           pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>
   ),
   !Client_1( $cid, ~pw, $sid1, $sid2, $sid3 )
   ]

  /*
  rule (modulo AC) client_register[color=#77b58d]:
     [
     Client_0( $cid, ~pw, ~secret ), Fr( ~koprf1 ), Fr( ~koprf2 ),
     Fr( ~koprf3 ), Fr( ~s_enc1 ), Fr( ~s_enc2 ), Fr( ~s_enc3 ),
     !Server( $sid1 ), !Server( $sid2 ), !Server( $sid3 )
     ]
    --[
    ClientRegister( $cid, ~pw, ~secret ),
    SourceC( <$cid, ~koprf1, ~s_enc1, 
              pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>
    ),
    SourceC( <$cid, ~koprf2, ~s_enc2, 
              pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>
    ),
    SourceC( <$cid, ~koprf3, ~s_enc3, 
              pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>
    ),
    SourceC( ~s_enc1 ), SourceC( ~s_enc2 ), SourceC( ~s_enc3 ),
    SourceP( h(~pw) ), SourceF( ~koprf1 ), SourceF( ~koprf2 ),
    SourceF( ~koprf3 ),
    Secret( 'pw', ~pw, $cid, <$sid1, $sid2, $sid3> ),
    Secret( 'koprf', (~koprf1++~koprf2++~koprf3), $cid,
            <$sid1, $sid2, $sid3>
    ),
    Secret( 'kauth',
            h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), $cid,
            <$sid1, $sid2, $sid3>
    ),
    Secret( 'senc', z, $cid, <$sid1, $sid2, $sid3> ),
    Secret( 'senc_share', ~s_enc1, $cid, $sid1 ),
    Secret( 'senc_share', ~s_enc2, $cid, $sid2 ),
    Secret( 'senc_share', ~s_enc3, $cid, $sid3 ),
    Secret( 'kenc',
            KDF(z, h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)), $cid,
            <$sid1, $sid2, $sid3>
    ),
    Secret( 'secret', ~secret, $cid, <$sid1, $sid2, $sid3> ),
    Restr_client_register_1( $sid1, $sid2, $sid1, $sid3, $sid2, $sid3,
                             $sid1, $sid2, $sid3
    )
    ]->
     [
     Out( senc(~secret,
               KDF(z, h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)))
     ),
     SCOut( $cid, $sid1,
            <$cid, ~koprf1, ~s_enc1, 
             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>
     ),
     SCOut( $cid, $sid2,
            <$cid, ~koprf2, ~s_enc2, 
             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>
     ),
     SCOut( $cid, $sid3,
            <$cid, ~koprf3, ~s_enc3, 
             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>
     ),
     !Client_1( $cid, ~pw, $sid1, $sid2, $sid3 )
     ]
    variants (modulo AC)
    1. ~s_enc1
             = ~s_enc1.16
       ~s_enc2
             = ~s_enc2.17
       ~s_enc3
             = ~s_enc1.16
       z     = ~s_enc2.17
    
    2. ~s_enc1
             = ~s_enc1.16
       ~s_enc2
             = ~s_enc2.17
       ~s_enc3
             = ~s_enc2.17
       z     = ~s_enc1.16
    
    3. ~s_enc1
             = ~s_enc1.17
       ~s_enc2
             = ~s_enc1.17
       ~s_enc3
             = ~s_enc3.19
       z     = ~s_enc3.19
    
    4. ~s_enc1
             = ~s_enc1.17
       ~s_enc2
             = ~s_enc2.18
       ~s_enc3
             = ~s_enc3.19
       z     = (~s_enc1.17⊕~s_enc2.18⊕~s_enc3.19)
  */

rule (modulo E) server_register[color=#7793b5]:
   [
   !Server( $sid ),
   SCIn( $client, $sid, <$cid, koprf_share, s_enc_share, kvfy> )
   ]
  --[ ServerAction( ) ]->
   [ !Server_1( $sid, $cid, koprf_share, s_enc_share, kvfy ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) client_reconstruct_phase1[color=#77b58d]:
   [ !Client_1( $cid, ~pw, $sid1, $sid2, $sid3 ), Fr( ~b ) ]
  --[
  ClientReconstructPhase1( $cid, ~pw ),
  SourceC( <$cid, mul(~b, h(~pw))> ), SourceF( ~b )
  ]->
   [
   SCOut( $cid, $sid1, <$cid, mul(~b, h(~pw))> ),
   SCOut( $cid, $sid2, <$cid, mul(~b, h(~pw))> ),
   SCOut( $cid, $sid3, <$cid, mul(~b, h(~pw))> ),
   Client_2( $cid, ~pw, $sid1, $sid2, $sid3, ~b ), !Factor( ~b )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) server_reconstruct_phase1[derivchecks,
                                          color=#7793b5]:
   [
   !Server_1( $sid, $cid, koprf_share, s_enc_share, kvfy ),
   SCIn( $client, $sid, <$cid, mul(factors, hpw)> )
   ]
  --[
  ServerAction( ), ServerReconstructPhase1( $sid ),
  SourceC( mul((factors++koprf_share), hpw) ), SourcesPoint( hpw )
  ]->
   [
   SCOut( $sid, $client, mul((factors++koprf_share), hpw) ),
   Server_2( $sid, $cid, s_enc_share, kvfy, mul(factors, hpw) ),
   !Factor( koprf_share )
   ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

rule (modulo E) client_reconstruct_phase2[derivchecks,
                                          color=#77b58d]:
   [
   Client_2( $cid, ~pw, $sid1, $sid2, $sid3, ~b ),
   SCIn( $sid1, $cid, mul((~b++koprf1), hpw) ),
   SCIn( $sid2, $cid, mul((~b++koprf2), hpw) ),
   SCIn( $sid3, $cid, mul((~b++koprf3), hpw) )
   ]
  --[
  ClientReconstructPhase2( $cid, ~pw ),
  SourceC( revealSign(h(mul(~b, h(~pw))),
                      KDF(h(<~pw, mul((koprf1++koprf2++koprf3), hpw)>), '1'))
  ),
  SourceC( revealSign(h(mul(~b, h(~pw))),
                      KDF(h(<~pw, mul((koprf1++koprf2++koprf3), hpw)>), '2'))
  ),
  SourceC( revealSign(h(mul(~b, h(~pw))),
                      KDF(h(<~pw, mul((koprf1++koprf2++koprf3), hpw)>), '3'))
  )
  ]->
   [
   SCOut( $cid, $sid1,
          revealSign(h(mul(~b, h(~pw))),
                     KDF(h(<~pw, mul((koprf1++koprf2++koprf3), hpw)>), '1'))
   ),
   SCOut( $cid, $sid2,
          revealSign(h(mul(~b, h(~pw))),
                     KDF(h(<~pw, mul((koprf1++koprf2++koprf3), hpw)>), '2'))
   ),
   SCOut( $cid, $sid3,
          revealSign(h(mul(~b, h(~pw))),
                     KDF(h(<~pw, mul((koprf1++koprf2++koprf3), hpw)>), '3'))
   ),
   Client_3( $cid, ~pw, h(<~pw, mul((koprf1++koprf2++koprf3), hpw)>),
             $sid1, $sid2, $sid3
   )
   ]

  // loop breakers: [1,2,3]
  /* has exactly the trivial AC variant */

restriction Restr_server_reconstruct_phase2_1:
  "∀ x #NOW.
    (Restr_server_reconstruct_phase2_1( x ) @ #NOW) ⇒ (x = true)"
  // safety formula

rule (modulo E) server_reconstruct_phase2[color=#7793b5]:
   [
   Server_2( $sid, $cid, s_enc_share, kvfy, bhpw ),
   SCIn( $client, $sid, sig )
   ]
  --[
  ServerAction( ),
  Restr_server_reconstruct_phase2_1( revealVerify(sig, h(bhpw), kvfy)
  )
  ]->
   [ SCOut( $sid, $client, s_enc_share ) ]

  // loop breaker: [1]
  /*
  rule (modulo AC) server_reconstruct_phase2[color=#7793b5]:
     [
     Server_2( $sid, $cid, s_enc_share, kvfy, bhpw ),
     SCIn( $client, $sid, sig )
     ]
    --[ ServerAction( ), Restr_server_reconstruct_phase2_1( z ) ]->
     [ SCOut( $sid, $client, s_enc_share ) ]
    variants (modulo AC)
    1. bhpw  = bhpw.9
       kvfy  = kvfy.9
       sig   = sig.9
       z     = revealVerify(sig.9, h(bhpw.9), kvfy.9)
    
    2. bhpw  = x.9
       kvfy  = pk(x.10)
       sig   = revealSign(h(x.9), x.10)
       z     = true
    // loop breaker: [1]
  */

rule (modulo E) client_reconstruct_finish[color=#77b58d]:
   [
   Client_3( $cid, ~pw, kauth, $sid1, $sid2, $sid3 ),
   SCIn( $sid1, $cid, s_enc1 ), SCIn( $sid2, $cid, s_enc2 ),
   SCIn( $sid3, $cid, s_enc3 ), In( encrypted_secret )
   ]
  --[
  ClientReconstructFinish( $cid, ~pw,
                           sdec(encrypted_secret, KDF((s_enc1⊕s_enc2⊕s_enc3), kauth))
  )
  ]->
   [ ]

  /*
  rule (modulo AC) client_reconstruct_finish[color=#77b58d]:
     [
     Client_3( $cid, ~pw, kauth, $sid1, $sid2, $sid3 ),
     SCIn( $sid1, $cid, s_enc1 ), SCIn( $sid2, $cid, s_enc2 ),
     SCIn( $sid3, $cid, s_enc3 ), In( encrypted_secret )
     ]
    --[ ClientReconstructFinish( $cid, ~pw, z ) ]->
     [ ]
    variants (modulo AC)
      1. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = s_enc1.12
         s_enc2
               = s_enc2.12
         s_enc3
               = s_enc3.12
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc1.12⊕s_enc2.12⊕s_enc3.12), kauth.12))
    
      2. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = s_enc1.12
         s_enc2
               = s_enc2.12
         s_enc3
               = zero
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc1.12⊕s_enc2.12), kauth.12))
    
      3. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = s_enc1.12
         s_enc2
               = zero
         s_enc3
               = s_enc3.12
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc1.12⊕s_enc3.12), kauth.12))
    
      4. encrypted_secret
               = encrypted_secret.12
         kauth = kauth.12
         s_enc1
               = zero
         s_enc2
               = s_enc2.12
         s_enc3
               = s_enc3.12
         z     = sdec(encrypted_secret.12,
                      KDF((s_enc2.12⊕s_enc3.12), kauth.12))
    
      5. encrypted_secret
               = encrypted_secret.13
         kauth = kauth.13
         s_enc1
               = x.12
         s_enc2
               = x.12
         s_enc3
               = s_enc3.13
         z     = sdec(encrypted_secret.13, KDF(s_enc3.13, kauth.13))
    
      6. encrypted_secret
               = encrypted_secret.13
         kauth = kauth.13
         s_enc1
               = x.12
         s_enc2
               = s_enc2.13
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.13, KDF(s_enc2.13, kauth.13))
    
      7. encrypted_secret
               = encrypted_secret.13
         kauth = kauth.13
         s_enc1
               = s_enc1.13
         s_enc2
               = x.12
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.13, KDF(s_enc1.13, kauth.13))
    
      8. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = x.13
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF(zero, kauth.14))
    
      9. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = zero
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     10. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.14, KDF(zero, kauth.14))
    
     11. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = s_enc3.14
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc3.14), kauth.14))
    
     12. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = zero
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     13. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = s_enc1.14
         s_enc2
               = x.12
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc1.14), kauth.14))
    
     14. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = s_enc1.14
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc1.14), kauth.14))
    
     15. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = zero
         s_enc2
               = x.12
         s_enc3
               = (x.12⊕x.13)
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     16. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = zero
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     17. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.14, KDF(zero, kauth.14))
    
     18. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = s_enc3.14
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc3.14), kauth.14))
    
     19. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = zero
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     20. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = s_enc2.14
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF((x.13⊕s_enc2.14), kauth.14))
    
     21. encrypted_secret
               = encrypted_secret.14
         kauth = kauth.14
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = zero
         s_enc3
               = x.12
         z     = sdec(encrypted_secret.14, KDF(x.13, kauth.14))
    
     22. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = x.13
         s_enc3
               = (x.12⊕x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     23. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = s_enc2.15
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF((x.14⊕s_enc2.15), kauth.15))
    
     24. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = (x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     25. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13⊕x.14)
         s_enc3
               = x.14
         z     = sdec(encrypted_secret.15, KDF(x.13, kauth.15))
    
     26. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = x.12
         s_enc2
               = (x.13⊕x.14)
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.13, kauth.15))
    
     27. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = s_enc1.15
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15,
                      KDF((x.13⊕x.14⊕s_enc1.15), kauth.15))
    
     28. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = zero
         s_enc2
               = (x.12⊕x.13)
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF((x.13⊕x.14), kauth.15))
    
     29. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.12
         s_enc3
               = (x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     30. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.14
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(x.13, kauth.15))
    
     31. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = zero
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.15, KDF((x.13⊕x.14), kauth.15))
    
     32. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.15, KDF(x.14, kauth.15))
    
     33. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = x.14
         z     = sdec(encrypted_secret.15, KDF(x.13, kauth.15))
    
     34. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = s_enc3.15
         z     = sdec(encrypted_secret.15,
                      KDF((x.13⊕x.14⊕s_enc3.15), kauth.15))
    
     35. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = zero
         z     = sdec(encrypted_secret.15, KDF((x.13⊕x.14), kauth.15))
    
     36. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.13⊕x.14)
         z     = sdec(encrypted_secret.15, KDF(zero, kauth.15))
    
     37. encrypted_secret
               = encrypted_secret.15
         kauth = kauth.15
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = x.13
         s_enc3
               = x.14
         z     = sdec(encrypted_secret.15, KDF(x.12, kauth.15))
    
     38. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = x.12
         s_enc2
               = (x.12⊕x.13⊕x.14)
         s_enc3
               = (x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     39. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = x.12
         s_enc2
               = (x.13⊕x.14)
         s_enc3
               = (x.12⊕x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     40. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = x.14
         s_enc3
               = (x.12⊕x.14⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     41. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = s_enc2.16
         s_enc3
               = (x.12⊕x.15)
         z     = sdec(encrypted_secret.16,
                      KDF((x.13⊕x.15⊕s_enc2.16), kauth.16))
    
     42. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.13⊕x.14⊕x.15)
         z     = sdec(encrypted_secret.16, KDF(x.15, kauth.16))
    
     43. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     44. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14)
         s_enc3
               = (x.14⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     45. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = x.14
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     46. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = (x.13⊕x.15)
         z     = sdec(encrypted_secret.16, KDF(x.14, kauth.16))
    
     47. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.14⊕x.15)
         s_enc3
               = (x.12⊕x.14)
         z     = sdec(encrypted_secret.16, KDF((x.13⊕x.15), kauth.16))
    
     48. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = x.13
         s_enc3
               = (x.12⊕x.15)
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     49. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.12⊕x.15)
         s_enc3
               = x.13
         z     = sdec(encrypted_secret.16, KDF((x.14⊕x.15), kauth.16))
    
     50. encrypted_secret
               = encrypted_secret.16
         kauth = kauth.16
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = (x.12⊕x.15)
         z     = sdec(encrypted_secret.16, KDF(x.14, kauth.16))
    
     51. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = (x.13⊕x.14⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.15⊕x.16), kauth.17))
    
     52. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.12⊕x.14⊕x.15)
         s_enc3
               = (x.14⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.13⊕x.15⊕x.16), kauth.17))
    
     53. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13)
         s_enc2
               = (x.14⊕x.15)
         s_enc3
               = (x.12⊕x.14⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.13⊕x.15⊕x.16), kauth.17))
    
     54. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = (x.12⊕x.15⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.14⊕x.16), kauth.17))
    
     55. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = (x.12⊕x.16)
         z     = sdec(encrypted_secret.17, KDF((x.14⊕x.15⊕x.16), kauth.17))
    
     56. encrypted_secret
               = encrypted_secret.17
         kauth = kauth.17
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.13⊕x.15⊕x.16)
         s_enc3
               = (x.12⊕x.15)
         z     = sdec(encrypted_secret.17, KDF((x.14⊕x.16), kauth.17))
    
     57. encrypted_secret
               = encrypted_secret.18
         kauth = kauth.18
         s_enc1
               = (x.12⊕x.13⊕x.14)
         s_enc2
               = (x.13⊕x.15⊕x.16)
         s_enc3
               = (x.12⊕x.15⊕x.17)
         z     = sdec(encrypted_secret.18, KDF((x.14⊕x.16⊕x.17), kauth.18))
    
     58. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.13
         s_enc2
               = x.15
         s_enc3
               = x.15
         z     = x.12
    
     59. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = x.13
         s_enc3
               = x.15
         z     = x.12
    
     60. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = x.15
         s_enc3
               = x.13
         z     = x.12
    
     61. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = x.16
         s_enc3
               = (x.13⊕x.15⊕x.16)
         z     = x.12
    
     62. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = zero
         s_enc3
               = (x.13⊕x.15)
         z     = x.12
    
     63. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = zero
         z     = x.12
    
     64. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.13⊕x.15⊕x.16)
         s_enc3
               = x.16
         z     = x.12
    
     65. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = (x.15⊕x.16)
         z     = x.12
    
     66. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = x.15
         s_enc2
               = (x.15⊕x.16)
         s_enc3
               = (x.13⊕x.16)
         z     = x.12
    
     67. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = zero
         s_enc2
               = x.15
         s_enc3
               = (x.13⊕x.15)
         z     = x.12
    
     68. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = zero
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = x.15
         z     = x.12
    
     69. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = x.15
         s_enc3
               = zero
         z     = x.12
    
     70. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = x.16
         s_enc3
               = (x.15⊕x.16)
         z     = x.12
    
     71. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = zero
         s_enc3
               = x.15
         z     = x.12
    
     72. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15)
         s_enc2
               = (x.15⊕x.16)
         s_enc3
               = x.16
         z     = x.12
    
     73. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15⊕x.16)
         s_enc2
               = x.15
         s_enc3
               = x.16
         z     = x.12
    
     74. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.13⊕x.15⊕x.16)
         s_enc2
               = (x.16⊕x.17)
         s_enc3
               = (x.15⊕x.17)
         z     = x.12
    
     75. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = x.15
         s_enc3
               = (x.13⊕x.16)
         z     = x.12
    
     76. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = (x.13⊕x.15)
         s_enc3
               = x.16
         z     = x.12
    
     77. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = (x.13⊕x.15⊕x.17)
         s_enc3
               = (x.16⊕x.17)
         z     = x.12
    
     78. encrypted_secret
               = senc(x.12, KDF(x.13, x.14))
         kauth = x.14
         s_enc1
               = (x.15⊕x.16)
         s_enc2
               = (x.15⊕x.17)
         s_enc3
               = (x.13⊕x.16⊕x.17)
         z     = x.12
    
     79. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = x.14
         s_enc2
               = x.15
         s_enc3
               = (x.14⊕x.15)
         z     = x.12
    
     80. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = x.14
         s_enc2
               = (x.14⊕x.15)
         s_enc3
               = x.15
         z     = x.12
    
     81. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = (x.14⊕x.15)
         s_enc2
               = x.14
         s_enc3
               = x.15
         z     = x.12
    
     82. encrypted_secret
               = senc(x.12, KDF(zero, x.13))
         kauth = x.13
         s_enc1
               = (x.14⊕x.15)
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = (x.15⊕x.16)
         z     = x.12
    
     83. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = x.14
         s_enc3
               = zero
         z     = x.12
    
     84. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = x.16
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     85. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = zero
         s_enc3
               = x.14
         z     = x.12
    
     86. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.13
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = x.16
         z     = x.12
    
     87. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = x.13
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     88. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = x.14
         z     = x.12
    
     89. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = (x.13⊕x.16⊕x.17)
         s_enc3
               = (x.14⊕x.17)
         z     = x.12
    
     90. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = x.16
         s_enc2
               = (x.13⊕x.17)
         s_enc3
               = (x.14⊕x.16⊕x.17)
         z     = x.12
    
     91. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = zero
         s_enc2
               = x.13
         s_enc3
               = x.14
         z     = x.12
    
     92. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = zero
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     93. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = x.14
         s_enc3
               = x.16
         z     = x.12
    
     94. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = x.16
         s_enc3
               = x.14
         z     = x.12
    
     95. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = x.17
         s_enc3
               = (x.14⊕x.16⊕x.17)
         z     = x.12
    
     96. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = zero
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
     97. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = zero
         z     = x.12
    
     98. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.14⊕x.16⊕x.17)
         s_enc3
               = x.17
         z     = x.12
    
     99. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.14⊕x.17)
         s_enc3
               = (x.16⊕x.17)
         z     = x.12
    
    100. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16)
         s_enc2
               = (x.16⊕x.17)
         s_enc3
               = (x.14⊕x.17)
         z     = x.12
    
    101. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = x.17
         s_enc3
               = (x.14⊕x.16)
         z     = x.12
    
    102. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = (x.14⊕x.16)
         s_enc3
               = x.17
         z     = x.12
    
    103. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = (x.14⊕x.17⊕x.18)
         s_enc3
               = (x.16⊕x.18)
         z     = x.12
    
    104. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.13⊕x.16⊕x.17)
         s_enc2
               = (x.17⊕x.18)
         s_enc3
               = (x.14⊕x.16⊕x.18)
         z     = x.12
    
    105. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.16⊕x.17)
         s_enc2
               = (x.13⊕x.16)
         s_enc3
               = (x.14⊕x.17)
         z     = x.12
    
    106. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14), x.15))
         kauth = x.15
         s_enc1
               = (x.16⊕x.17)
         s_enc2
               = (x.13⊕x.16⊕x.18)
         s_enc3
               = (x.14⊕x.17⊕x.18)
         z     = x.12
    
    107. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = x.13
         s_enc2
               = x.14
         s_enc3
               = x.15
         z     = x.12
    
    108. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = x.13
         s_enc2
               = (x.14⊕x.17)
         s_enc3
               = (x.15⊕x.17)
         z     = x.12
    
    109. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = x.14
         s_enc3
               = (x.15⊕x.17)
         z     = x.12
    
    110. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = (x.14⊕x.17)
         s_enc3
               = x.15
         z     = x.12
    
    111. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = (x.14⊕x.17⊕x.18)
         s_enc3
               = (x.15⊕x.18)
         z     = x.12
    
    112. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17)
         s_enc2
               = (x.14⊕x.18)
         s_enc3
               = (x.15⊕x.17⊕x.18)
         z     = x.12
    
    113. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17⊕x.18)
         s_enc2
               = (x.14⊕x.18)
         s_enc3
               = (x.15⊕x.17)
         z     = x.12
    
    114. encrypted_secret
               = senc(x.12, KDF((x.13⊕x.14⊕x.15), x.16))
         kauth = x.16
         s_enc1
               = (x.13⊕x.17⊕x.18)
         s_enc2
               = (x.14⊕x.18⊕x.19)
         s_enc3
               = (x.15⊕x.17⊕x.19)
         z     = x.12
  */

restriction servers_offline:
  "∀ #i #j.
    ((PQAdversaryAction( ) @ #i) ∧ (ServerAction( ) @ #j)) ⇒ (#j < #i)"
  // safety formula

lemma types [sources, heuristic={sources_lemma}, reuse]:
  all-traces
  "((∀ msg #i.
      (SourcesAdversaryRecv( msg ) @ #i) ⇒
      ((∃ #j. (SourceC( msg ) @ #j) ∧ (#j < #i)) ∨
       (∃ #j. (!KU( msg ) @ #j) ∧ (#j < #i)))) ∧
    (∀ x #i.
      (SourcesPoint( x ) @ #i) ⇒
      ((∃ #j. (SourceP( x ) @ #j) ∧ (#j < #i)) ∨
       (∃ #j. (!KU( x ) @ #j) ∧ (#j < #i))))) ∧
   (∀ f #i.
     (SourcesFactor( f ) @ #i) ⇒
     ((∃ #j. (SourceF( f ) @ #j) ∧ (#j < #i)) ∨
      (∃ #j. (!KU( f ) @ #j) ∧ (#j < #i))))"
/*
guarded formula characterizing all counter-examples:
"((∃ msg #i.
    (SourcesAdversaryRecv( msg ) @ #i)
   ∧
    (∀ #j. (SourceC( msg ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( msg ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ x #i.
    (SourcesPoint( x ) @ #i)
   ∧
    (∀ #j. (SourceP( x ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i))) ∨
  (∃ f #i.
    (SourcesFactor( f ) @ #i)
   ∧
    (∀ #j. (SourceF( f ) @ #j) ⇒ ¬(#j < #i)) ∧
    (∀ #j. (!KU( f ) @ #j) ⇒ ¬(#j < #i))))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∃ msg #i.
           (SourcesAdversaryRecv( msg ) @ #i)
          ∧
           (∀ #j. (SourceC( msg ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (!KU( msg ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ x #i.
           (SourcesPoint( x ) @ #i)
          ∧
           (∀ #j. (SourceP( x ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)))  ∥
         (∃ f #i.
           (SourcesFactor( f ) @ #i)
          ∧
           (∀ #j. (SourceF( f ) @ #j) ⇒ ¬(#j < #i)) ∧
           (∀ #j. (!KU( f ) @ #j) ⇒ ¬(#j < #i))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (SourceC( msg ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (!KU( msg ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( SourcesAdversaryRecv( msg ) @ #i )
        case adversary_recv
        solve( SCIn( $server, 'adv', msg ) ▶₀ #i )
          case forward_case_01
          by contradiction /* from formulas */
        next
          case forward_case_02
          by contradiction /* from formulas */
        next
          case forward_case_03
          by contradiction /* from formulas */
        next
          case forward_case_04
          by contradiction /* from formulas */
        next
          case forward_case_05
          by contradiction /* from formulas */
        next
          case forward_case_06
          by contradiction /* from formulas */
        next
          case forward_case_07
          by contradiction /* from formulas */
        next
          case forward_case_08
          by contradiction /* from formulas */
        next
          case forward_case_09
          by contradiction /* from formulas */
        next
          case forward_case_10
          by contradiction /* from formulas */
        next
          case forward_case_11
          by contradiction /* from formulas */
        next
          case forward_case_12
          by contradiction /* from formulas */
        next
          case forward_case_13
          solve( SCIn( $client.1, $server, <$cid, koprf_share, msg, pk(x)>
                 ) ▶₁ #vr.3 )
            case forward_case_1
            by contradiction /* from formulas */
          next
            case forward_case_2
            by contradiction /* from formulas */
          next
            case forward_case_3
            by contradiction /* from formulas */
          next
            case forward_case_4
            by contradiction /* from formulas */
          next
            case forward_case_5
            by contradiction /* from formulas */
          next
            case forward_case_6
            by contradiction /* from formulas */
          qed
        qed
      next
        case eavesdrop_server
        solve( !SCKnows( $server, msg ) ▶₀ #i )
          case forward_case_01
          by contradiction /* from formulas */
        next
          case forward_case_02
          by contradiction /* from formulas */
        next
          case forward_case_03
          by contradiction /* from formulas */
        next
          case forward_case_04
          by contradiction /* from formulas */
        next
          case forward_case_05
          by contradiction /* from formulas */
        next
          case forward_case_06
          by contradiction /* from formulas */
        next
          case forward_case_07
          by contradiction /* from formulas */
        next
          case forward_case_08
          by contradiction /* from formulas */
        next
          case forward_case_09
          by contradiction /* from formulas */
        next
          case forward_case_10
          by contradiction /* from formulas */
        next
          case forward_case_11
          by contradiction /* from formulas */
        next
          case forward_case_12
          by contradiction /* from formulas */
        next
          case forward_case_13
          solve( SCIn( $client.1, $server, <$cid, koprf_share, msg, pk(x)>
                 ) ▶₁ #vr.3 )
            case forward_case_1
            by contradiction /* from formulas */
          next
            case forward_case_2
            by contradiction /* from formulas */
          next
            case forward_case_3
            by contradiction /* from formulas */
          next
            case forward_case_4
            by contradiction /* from formulas */
          next
            case forward_case_5
            by contradiction /* from formulas */
          next
            case forward_case_6
            by contradiction /* from formulas */
          qed
        next
          case forward_case_14
          by contradiction /* from formulas */
        next
          case forward_case_15
          by contradiction /* from formulas */
        next
          case forward_case_16
          by contradiction /* from formulas */
        next
          case forward_case_17
          by contradiction /* from formulas */
        next
          case forward_case_18
          by contradiction /* from formulas */
        next
          case forward_case_19
          by contradiction /* from formulas */
        next
          case forward_case_20
          by contradiction /* from formulas */
        next
          case forward_case_21
          by contradiction /* from formulas */
        next
          case forward_case_22
          by contradiction /* from formulas */
        next
          case forward_case_23
          by contradiction /* from formulas */
        next
          case forward_case_24
          by contradiction /* from formulas */
        next
          case forward_case_25
          by contradiction /* from formulas */
        next
          case forward_case_26
          solve( SCIn( $client.1, $sender, <$cid, koprf_share, msg, pk(x)>
                 ) ▶₁ #vr.3 )
            case forward_case_1
            by contradiction /* from formulas */
          next
            case forward_case_2
            by contradiction /* from formulas */
          next
            case forward_case_3
            by contradiction /* from formulas */
          next
            case forward_case_4
            by contradiction /* from formulas */
          next
            case forward_case_5
            by contradiction /* from formulas */
          next
            case forward_case_6
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (last(#i))  ∥
           (∃ #j. (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( SourcesPoint( x ) @ #i )
        case add
        solve( !MulU( mul(b, x) ) ▶₁ #i )
          case add
          solve( (∃ #j. (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
                 (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case combine
          solve( (∃ #j. (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
                 (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case mul_coerce_case_1
          solve( !KU( mul(b, x) ) @ #vk.1 )
            case adversary_recv_case_1
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_2
            solve( SCIn( $client.1, $server, <$cid, koprf_share, t, pk(x.1)>
                   ) ▶₁ #vr.6 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          next
            case c_mul
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_1
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_2
            solve( SCIn( $client.1, $server, <$cid, koprf_share, t, pk(x.1)>
                   ) ▶₁ #vr.8 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_3
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_4
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_5
            by contradiction /* from formulas */
          next
            case extract_case_1
            solve( (∃ #j.
                     (SourceP( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case extract_case_2
            solve( (∃ #j.
                     (SourceP( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case mul_up_case_1
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_2
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_3
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case solve_dlog
            solve( SCIn( $client.1, $sid, <$cid, t, s_enc_share, kvfy>
                   ) ▶₁ #vr.4 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          qed
        next
          case mul_coerce_case_2
          solve( (∃ #j.
                   (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1))  ∥
                 (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case combine
        solve( !MulU( mul(a, x) ) ▶₀ #i )
          case add
          solve( (∃ #j. (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
                 (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case combine
          solve( (∃ #j. (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
                 (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case mul_coerce_case_1
          solve( !KU( mul(a, x) ) @ #vk )
            case adversary_recv_case_1
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_2
            solve( SCIn( $client.1, $server, <$cid, koprf_share, t, pk(x.1)>
                   ) ▶₁ #vr.6 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          next
            case c_mul
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_1
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_2
            solve( SCIn( $client.1, $server, <$cid, koprf_share, t, pk(x.1)>
                   ) ▶₁ #vr.8 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_3
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_4
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_5
            by contradiction /* from formulas */
          next
            case extract_case_1
            solve( (∃ #j.
                     (SourceP( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case extract_case_2
            solve( (∃ #j.
                     (SourceP( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case mul_up_case_1
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_2
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_3
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case solve_dlog
            solve( SCIn( $client.1, $sid, <$cid, t, s_enc_share, kvfy>
                   ) ▶₁ #vr.4 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          qed
        next
          case mul_coerce_case_2
          solve( (∃ #j.
                   (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1))  ∥
                 (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case extract
        solve( !MulD( mul(a, x) ) ▶₁ #i )
          case mul_down
          solve( !KU( mul(a, x) ) @ #vk.1 )
            case adversary_recv_case_1
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_2
            solve( SCIn( $client.1, $server, <$cid, koprf_share, t, pk(x.1)>
                   ) ▶₁ #vr.5 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          next
            case c_mul
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_1
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_2
            solve( SCIn( $client.1, $server, <$cid, koprf_share, t, pk(x.1)>
                   ) ▶₁ #vr.7 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_3
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_4
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_5
            by contradiction /* from formulas */
          next
            case extract_case_1
            solve( (∃ #j.
                     (SourceP( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1))  ∥
                   (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case extract_case_2
            solve( (∃ #j.
                     (SourceP( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1))  ∥
                   (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case mul_up_case_1
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_2
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_3
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case solve_dlog
            solve( SCIn( $client.1, $sid, <$cid, t, s_enc_share, kvfy>
                   ) ▶₁ #vr.3 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          qed
        next
          case remove
          solve( (∃ #j. (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
                 (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case remove
        solve( !MulD( mul((a++b), x) ) ▶₁ #i )
          case mul_down
          solve( !KU( mul((a++b), x) ) @ #vk.1 )
            case adversary_recv_case_1
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_2
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_3
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_4
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_5
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_6
            solve( (∃ #j.
                     (SourceP( x.4 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x.4 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_7
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_8
            solve( SCIn( $client.1, $server, <$cid, koprf_share, t, pk(x.1)>
                   ) ▶₁ #vr.5 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          next
            case c_mul
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_1
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_2
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_3
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_4
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_5
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_6
            solve( (∃ #j.
                     (SourceP( x.4 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x.4 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_7
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.4)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_8
            solve( SCIn( $client.1, $server, <$cid, koprf_share, t, pk(x.1)>
                   ) ▶₁ #vr.7 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          next
            case extract_case_1
            solve( (∃ #j.
                     (SourceP( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1))  ∥
                   (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case extract_case_2
            solve( (∃ #j.
                     (SourceP( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1))  ∥
                   (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.1)) )
              case case_1
              by contradiction /* impossible chain */
            next
              case case_2
              by contradiction /* cyclic */
            qed
          next
            case mul_up_case_01
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.3)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_02
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_03
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_04
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_05
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_06
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_07
            solve( (∃ #j.
                     (SourceP( x.4 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x.4 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_08
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_09
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_10
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_11
            solve( (∃ #j.
                     (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_12
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_13
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_14
            solve( (∃ #j.
                     (SourceP( x.4 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x.4 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case mul_up_case_15
            solve( (∃ #j.
                     (SourceP( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2))  ∥
                   (∃ #j. (!KU( x.1 ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.2)) )
              case case_1
              by contradiction /* from formulas */
            next
              case case_2
              by contradiction /* from formulas */
            qed
          next
            case solve_dlog
            solve( SCIn( $client.1, $sid, <$cid, t, s_enc_share, kvfy>
                   ) ▶₁ #vr.3 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* impossible chain */
            next
              case forward_case_4
              by contradiction /* impossible chain */
            next
              case forward_case_5
              by contradiction /* impossible chain */
            next
              case forward_case_6
              by contradiction /* from formulas */
            qed
          qed
        next
          case remove
          solve( (∃ #j. (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr))  ∥
                 (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr)) )
            case case_1
            by contradiction /* from formulas */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case server_reconstruct_phase1
        solve( !Server_1( $sid, $cid, koprf_share, s_enc_share, kvfy
               ) ▶₀ #i )
          case server_register
          solve( SCIn( $client, $sid, <$cid, mul(factors, x)> ) ▶₁ #i )
            case forward_case_1
            by contradiction /* from formulas */
          next
            case forward_case_2
            solve( !KU( mul(factors, x) ) @ #vk.2 )
              case adversary_recv_case_1
              solve( (∃ #j.
                       (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case adversary_recv_case_2
              solve( SCIn( $client.2, $server,
                           <$cid.1, koprf_share.1, t, pk(x.1)>
                     ) ▶₁ #vr.9 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* impossible chain */
              next
                case forward_case_4
                by contradiction /* impossible chain */
              next
                case forward_case_5
                by contradiction /* impossible chain */
              next
                case forward_case_6
                by contradiction /* from formulas */
              qed
            next
              case c_mul
              by contradiction /* from formulas */
            next
              case eavesdrop_server_case_1
              solve( (∃ #j.
                       (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8))  ∥
                     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.8)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case eavesdrop_server_case_2
              solve( SCIn( $client.2, $server,
                           <$cid.1, koprf_share.1, t, pk(x.1)>
                     ) ▶₁ #vr.11 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* impossible chain */
              next
                case forward_case_4
                by contradiction /* impossible chain */
              next
                case forward_case_5
                by contradiction /* impossible chain */
              next
                case forward_case_6
                by contradiction /* from formulas */
              qed
            next
              case eavesdrop_server_case_3
              by contradiction /* from formulas */
            next
              case eavesdrop_server_case_4
              by contradiction /* from formulas */
            next
              case eavesdrop_server_case_5
              by contradiction /* from formulas */
            next
              case extract_case_1
              solve( (∃ #j.
                       (SourceP( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                by contradiction /* impossible chain */
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case extract_case_2
              solve( (∃ #j.
                       (SourceP( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5))  ∥
                     (∃ #j. (!KU( t ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.5)) )
                case case_1
                by contradiction /* impossible chain */
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case mul_up_case_1
              solve( (∃ #j.
                       (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7))  ∥
                     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.7)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case mul_up_case_2
              solve( (∃ #j.
                       (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case mul_up_case_3
              solve( (∃ #j.
                       (SourceP( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6))  ∥
                     (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #vr.6)) )
                case case_1
                by contradiction /* from formulas */
              next
                case case_2
                by contradiction /* from formulas */
              qed
            next
              case solve_dlog
              by contradiction /* cyclic */
            qed
          next
            case forward_case_3
            by contradiction /* from formulas */
          next
            case forward_case_4
            by contradiction /* from formulas */
          next
            case forward_case_5
            by contradiction /* from formulas */
          next
            case forward_case_6
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_3
    solve( (last(#i))  ∥
           (∃ #j. (SourceF( f ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (!KU( f ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !Factor( f ) ▶₀ #i )
        case client_reconstruct_phase1
        by contradiction /* from formulas */
      next
        case server_reconstruct_phase1
        solve( SCIn( $client.1, $sid, <$cid, f, s_enc_share, kvfy>
               ) ▶₁ #vr.1 )
          case forward_case_1
          by contradiction /* from formulas */
        next
          case forward_case_2
          by contradiction /* from formulas */
        next
          case forward_case_3
          by contradiction /* from formulas */
        next
          case forward_case_4
          by contradiction /* from formulas */
        next
          case forward_case_5
          by contradiction /* from formulas */
        next
          case forward_case_6
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma executability [hide_lemma=types]:
  exists-trace
  "((((¬(∃ #i. AdversaryAction( ) @ #i)) ∧
      (∀ cid pw1 pw2 secret1 secret2 #i #j.
        ((ClientRegister( cid, pw1, secret1 ) @ #i) ∧
         (ClientRegister( cid, pw2, secret2 ) @ #j)) ⇒
        (#i = #j))) ∧
     (∀ cid pw1 pw2 #i #j.
       ((ClientReconstructPhase1( cid, pw1 ) @ #i) ∧
        (ClientReconstructPhase1( cid, pw2 ) @ #j)) ⇒
       (#i = #j))) ∧
    (∀ sid #i #j.
      ((ServerReconstructPhase1( sid ) @ #i) ∧
       (ServerReconstructPhase1( sid ) @ #j)) ⇒
      (#i = #j))) ∧
   (∃ cid pw secret #i #j #k #l.
     (((ClientRegister( cid, pw, secret ) @ #i) ∧
       (ClientReconstructPhase1( cid, pw ) @ #j)) ∧
      (ClientReconstructPhase2( cid, pw ) @ #k)) ∧
     (ClientReconstructFinish( cid, pw, secret ) @ #l))"
/*
guarded formula characterizing all satisfying traces:
"(∀ #i. (AdversaryAction( ) @ #i) ⇒ ⊥) ∧
 (∀ cid pw1 pw2 secret1 secret2 #i #j.
   (ClientRegister( cid, pw1, secret1 ) @ #i) ∧
   (ClientRegister( cid, pw2, secret2 ) @ #j)
  ⇒
   #i = #j) ∧
 (∀ cid pw1 pw2 #i #j.
   (ClientReconstructPhase1( cid, pw1 ) @ #i) ∧
   (ClientReconstructPhase1( cid, pw2 ) @ #j)
  ⇒
   #i = #j) ∧
 (∀ sid #i #j.
   (ServerReconstructPhase1( sid ) @ #i) ∧
   (ServerReconstructPhase1( sid ) @ #j)
  ⇒
   #i = #j) ∧
 (∃ cid pw secret #i #j #k #l.
   (ClientRegister( cid, pw, secret ) @ #i) ∧
   (ClientReconstructPhase1( cid, pw ) @ #j) ∧
   (ClientReconstructPhase2( cid, pw ) @ #k) ∧
   (ClientReconstructFinish( cid, pw, secret ) @ #l))"
*/
simplify
solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
  case client_initialise
  solve( !Server( $sid1 ) ▶₇ #i )
    case create_server
    solve( !Server( $sid2 ) ▶₈ #i )
      case create_server
      solve( !Server( $sid3 ) ▶₉ #i )
        case create_server
        solve( !Client_1( $cid, ~pw, $sid1.1, $sid2.1, $sid3.1 ) ▶₀ #j )
          case client_register
          solve( Client_2( $cid, ~pw, $sid1.1, $sid2.1, $sid3.1, ~b.1
                 ) ▶₀ #k )
            case client_reconstruct_phase1
            solve( Client_3( $cid, ~pw, kauth, $sid1.1, $sid2.1, $sid3.1
                   ) ▶₀ #l )
              case client_reconstruct_phase2
              solve( SCIn( $sid1, $cid, s_enc1.1 ) ▶₁ #l )
                case forward_case_01
                by contradiction /* from formulas */
              next
                case forward_case_02
                by contradiction /* from formulas */
              next
                case forward_case_03
                by contradiction /* from formulas */
              next
                case forward_case_04
                by contradiction /* from formulas */
              next
                case forward_case_05
                by contradiction /* from formulas */
              next
                case forward_case_06
                by contradiction /* from formulas */
              next
                case forward_case_07
                by contradiction /* from formulas */
              next
                case forward_case_08
                by contradiction /* from formulas */
              next
                case forward_case_09
                by sorry
              next
                case forward_case_10
                by contradiction /* from formulas */
              next
                case forward_case_11
                by contradiction /* from formulas */
              next
                case forward_case_12
                by contradiction /* from formulas */
              next
                case forward_case_13
                solve( SCIn( $sid2, $cid, s_enc2.1 ) ▶₂ #l )
                  case forward_case_01
                  by contradiction /* from formulas */
                next
                  case forward_case_02
                  by contradiction /* from formulas */
                next
                  case forward_case_03
                  by contradiction /* from formulas */
                next
                  case forward_case_04
                  by contradiction /* from formulas */
                next
                  case forward_case_05
                  by contradiction /* from formulas */
                next
                  case forward_case_06
                  by contradiction /* from formulas */
                next
                  case forward_case_07
                  by contradiction /* from formulas */
                next
                  case forward_case_08
                  by contradiction /* from formulas */
                next
                  case forward_case_09
                  by sorry
                next
                  case forward_case_10
                  by contradiction /* from formulas */
                next
                  case forward_case_11
                  by contradiction /* from formulas */
                next
                  case forward_case_12
                  by contradiction /* from formulas */
                next
                  case forward_case_13
                  solve( SCIn( $sid3, $cid, s_enc3.1 ) ▶₃ #l )
                    case forward_case_01
                    by contradiction /* from formulas */
                  next
                    case forward_case_02
                    by contradiction /* from formulas */
                  next
                    case forward_case_03
                    by contradiction /* from formulas */
                  next
                    case forward_case_04
                    by contradiction /* from formulas */
                  next
                    case forward_case_05
                    by contradiction /* from formulas */
                  next
                    case forward_case_06
                    by contradiction /* from formulas */
                  next
                    case forward_case_07
                    by contradiction /* from formulas */
                  next
                    case forward_case_08
                    by contradiction /* from formulas */
                  next
                    case forward_case_09
                    by sorry
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( !KU( senc(~secret,
                                     KDF(x, h(<~pw, mul((koprf1.1++koprf2.1++koprf3.1), hpw)>)))
                           ) @ #vk )
                      case c_senc
                      by sorry
                    next
                      case client_register_case_1
                      solve( splitEqs(0) )
                        case split
                        solve( SCIn( $sid1, $cid, mul((~b++~koprf1), h(~pw)) ) ▶₁ #k )
                          case forward_case_1
                          by contradiction /* from formulas */
                        next
                          case forward_case_2
                          by contradiction /* from formulas */
                        next
                          case forward_case_3
                          solve( SCIn( $sid2, $cid, mul((~b++~koprf2), h(~pw)) ) ▶₂ #k )
                            case forward_case_1
                            by contradiction /* from formulas */
                          next
                            case forward_case_2
                            by contradiction /* from formulas */
                          next
                            case forward_case_3
                            solve( SCIn( $sid3, $cid, mul((~b++~koprf3), h(~pw)) ) ▶₃ #k )
                              case forward_case_1
                              by contradiction /* from formulas */
                            next
                              case forward_case_2
                              by contradiction /* from formulas */
                            next
                              case forward_case_3
                              solve( SCIn( $cid, $sid1, revealSign(h(mul(~b, h(~pw))), x)
                                     ) ▶₁ #vr.5 )
                                case forward_case_1
                                by contradiction /* from formulas */
                              next
                                case forward_case_2
                                by contradiction /* from formulas */
                              next
                                case forward_case_3
                                solve( SCIn( $cid, $sid1, <$cid.1, mul(~b, h(~pw))> ) ▶₁ #vr.6 )
                                  case forward_case_1
                                  by contradiction /* from formulas */
                                next
                                  case forward_case_2
                                  by contradiction /* from formulas */
                                next
                                  case forward_case_3
                                  solve( SCIn( $client, $sid1,
                                               <$cid, ~koprf1, s_enc1.1, 
                                                pk(KDF(h(<~pw, 
                                                          mul((~koprf1++~koprf2++~koprf3), h(~pw))
                                                         >),
                                                       '1'))
                                               >
                                         ) ▶₁ #vr.7 )
                                    case forward_case_1
                                    by contradiction /* from formulas */
                                  next
                                    case forward_case_2
                                    by contradiction /* from formulas */
                                  next
                                    case forward_case_3
                                    solve( SCIn( $cid, $sid2, revealSign(h(mul(~b, h(~pw))), x)
                                           ) ▶₁ #vr.10 )
                                      case forward_case_1
                                      by contradiction /* from formulas */
                                    next
                                      case forward_case_2
                                      by contradiction /* from formulas */
                                    next
                                      case forward_case_3
                                      solve( SCIn( $cid, $sid2, <$cid.1, mul(~b, h(~pw))>
                                             ) ▶₁ #vr.11 )
                                        case forward_case_1
                                        by contradiction /* from formulas */
                                      next
                                        case forward_case_2
                                        by contradiction /* from formulas */
                                      next
                                        case forward_case_3
                                        solve( SCIn( $client, $sid2,
                                                     <$cid, ~koprf2, s_enc2.1, 
                                                      pk(KDF(h(<~pw, 
                                                                mul((~koprf1++~koprf2++~koprf3),
                                                                    h(~pw))
                                                               >),
                                                             '2'))
                                                     >
                                               ) ▶₁ #vr.12 )
                                          case forward_case_1
                                          by contradiction /* from formulas */
                                        next
                                          case forward_case_2
                                          by contradiction /* from formulas */
                                        next
                                          case forward_case_3
                                          solve( SCIn( $cid, $sid3,
                                                       revealSign(h(mul(~b, h(~pw))), x)
                                                 ) ▶₁ #vr.15 )
                                            case forward_case_1
                                            by contradiction /* from formulas */
                                          next
                                            case forward_case_2
                                            by contradiction /* from formulas */
                                          next
                                            case forward_case_3
                                            solve( SCIn( $cid, $sid3, <$cid.1, mul(~b, h(~pw))>
                                                   ) ▶₁ #vr.16 )
                                              case forward_case_1
                                              by contradiction /* from formulas */
                                            next
                                              case forward_case_2
                                              by contradiction /* from formulas */
                                            next
                                              case forward_case_3
                                              solve( SCIn( $client, $sid3,
                                                           <$cid, ~koprf3, ~s_enc3, 
                                                            pk(KDF(h(<~pw, 
                                                                      mul((~koprf1++~koprf2++~koprf3
                                                                          ),
                                                                          h(~pw))
                                                                     >),
                                                                   '3'))
                                                           >
                                                     ) ▶₁ #vr.17 )
                                                case forward_case_1
                                                by contradiction /* from formulas */
                                              next
                                                case forward_case_2
                                                by contradiction /* from formulas */
                                              next
                                                case forward_case_3
                                                SOLVED // trace found
                                              next
                                                case forward_case_4
                                                by contradiction /* from formulas */
                                              qed
                                            next
                                              case forward_case_4
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case forward_case_4
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case forward_case_4
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case forward_case_4
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case forward_case_4
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case forward_case_4
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case forward_case_4
                                  by contradiction /* from formulas */
                                qed
                              next
                                case forward_case_4
                                by contradiction /* from formulas */
                              qed
                            next
                              case forward_case_4
                              by sorry
                            qed
                          next
                            case forward_case_4
                            by sorry
                          qed
                        next
                          case forward_case_4
                          by sorry
                        qed
                      qed
                    next
                      case client_register_case_2
                      by sorry
                    next
                      case client_register_case_3
                      by sorry
                    next
                      case client_register_case_4
                      by sorry
                    next
                      case client_register_case_5
                      by sorry
                    next
                      case client_register_case_6
                      by sorry
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma post_quantum_attack [hide_lemma=types]:
  exists-trace
  "((∀ cid pw1 pw2 secret1 secret2 #i #j.
      ((ClientRegister( cid, pw1, secret1 ) @ #i) ∧
       (ClientRegister( cid, pw2, secret2 ) @ #j)) ⇒
      (#i = #j)) ∧
    (∀ cid pw1 pw2 #i #j.
      ((ClientReconstructPhase1( cid, pw1 ) @ #i) ∧
       (ClientReconstructPhase1( cid, pw2 ) @ #j)) ⇒
      (#i = #j))) ∧
   (∃ cid pw koprf kauth sid1 sid2 sid3 #i #j #k #l #m #n.
     ((((((Secret( 'pw', pw, cid, <sid1, sid2, sid3> ) @ #i) ∧
          (!KU( pw ) @ #j)) ∧
         (Secret( 'koprf', koprf, cid, <sid1, sid2, sid3> ) @ #k)) ∧
        (!KU( koprf ) @ #l)) ∧
       (Secret( 'kauth', kauth, cid, <sid1, sid2, sid3> ) @ #m)) ∧
      (!KU( kauth ) @ #n)) ∧
     (¬(∃ #o #p #q.
         ((!Compromised( sid1 ) @ #o) ∧ (!Compromised( sid2 ) @ #p)) ∧
         (!Compromised( sid3 ) @ #q))))"
/*
guarded formula characterizing all satisfying traces:
"(∀ cid pw1 pw2 secret1 secret2 #i #j.
   (ClientRegister( cid, pw1, secret1 ) @ #i) ∧
   (ClientRegister( cid, pw2, secret2 ) @ #j)
  ⇒
   #i = #j) ∧
 (∀ cid pw1 pw2 #i #j.
   (ClientReconstructPhase1( cid, pw1 ) @ #i) ∧
   (ClientReconstructPhase1( cid, pw2 ) @ #j)
  ⇒
   #i = #j) ∧
 (∃ cid pw koprf kauth sid1 sid2 sid3 #i #j #k #l #m #n.
   (Secret( 'pw', pw, cid, <sid1, sid2, sid3> ) @ #i) ∧
   (!KU( pw ) @ #j) ∧
   (Secret( 'koprf', koprf, cid, <sid1, sid2, sid3> ) @ #k) ∧
   (!KU( koprf ) @ #l) ∧
   (Secret( 'kauth', kauth, cid, <sid1, sid2, sid3> ) @ #m) ∧
   (!KU( kauth ) @ #n)
  ∧
   ∀ #o #p #q.
    (!Compromised( sid1 ) @ #o) ∧
    (!Compromised( sid2 ) @ #p) ∧
    (!Compromised( sid3 ) @ #q)
   ⇒
    ⊥)"
*/
simplify
solve( Secret( 'pw', pw, cid, <sid1, sid2, sid3> ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !Server( $sid1 ) ▶₇ #i )
      case create_server
      solve( !Server( $sid2 ) ▶₈ #i )
        case create_server
        solve( !Server( $sid3 ) ▶₉ #i )
          case create_server
          solve( Secret( 'koprf', koprf, $cid, <$sid1, $sid2, $sid3> ) @ #k )
            case client_register
            solve( Secret( 'kauth', kauth, $cid, <$sid1, $sid2, $sid3> ) @ #m )
              case client_register
              solve( !KU( ~pw ) @ #j )
                case bruteforce
                solve( !KU( ~koprf1 ) @ #vk )
                  case adversary_recv
                  by sorry
                next
                  case eavesdrop_server_case_1
                  by sorry
                next
                  case eavesdrop_server_case_2
                  solve( !KU( ~koprf2 ) @ #vk.1 )
                    case adversary_recv
                    by sorry
                  next
                    case eavesdrop_server_case_1
                    by sorry
                  next
                    case eavesdrop_server_case_2
                    solve( !KU( ~koprf3 ) @ #vk.2 )
                      case adversary_recv
                      by sorry
                    next
                      case eavesdrop_server_case_1
                      by sorry
                    next
                      case eavesdrop_server_case_2
                      by contradiction /* from formulas */
                    next
                      case solve_dlog
                      solve( !KU( h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)
                             ) @ #n )
                        case c_h
                        solve( !KU( mul((~koprf1++~koprf2++~koprf3), h(~pw)) ) @ #vk.4 )
                          case adversary_recv_case_01
                          by sorry
                        next
                          case adversary_recv_case_02
                          by sorry
                        next
                          case adversary_recv_case_03
                          by sorry
                        next
                          case adversary_recv_case_04
                          by sorry
                        next
                          case adversary_recv_case_05
                          by sorry
                        next
                          case adversary_recv_case_06
                          by sorry
                        next
                          case adversary_recv_case_07
                          by sorry
                        next
                          case adversary_recv_case_08
                          by sorry
                        next
                          case adversary_recv_case_09
                          by sorry
                        next
                          case adversary_recv_case_10
                          by sorry
                        next
                          case adversary_recv_case_11
                          by sorry
                        next
                          case adversary_recv_case_12
                          by sorry
                        next
                          case c_mul
                          solve( !KU( h(~pw) ) @ #vk.5 )
                            case c_h
                            solve( splitEqs(0) )
                              case split
                              solve( SCIn( $client, $sid, <$cid.1, mul(factors, hpw)>
                                     ) ▶₁ #vr.18 )
                                case forward_case_1
                                by contradiction /* from formulas */
                              next
                                case forward_case_2
                                solve( SCIn( $client, $sid, <$cid.1, ~koprf3, s_enc_share, kvfy>
                                       ) ▶₁ #vr.19 )
                                  case forward_case_1
                                  by contradiction /* cyclic */
                                next
                                  case forward_case_2
                                  by contradiction /* cyclic */
                                next
                                  case forward_case_3
                                  solve( !KU( mul(factors, hpw) ) @ #vk.8 )
                                    case adversary_recv_case_1
                                    by sorry
                                  next
                                    case adversary_recv_case_2
                                    by sorry
                                  next
                                    case adversary_recv_case_3
                                    by sorry
                                  next
                                    case c_mul
                                    SOLVED // trace found
                                  next
                                    case eavesdrop_server_case_1
                                    by sorry
                                  next
                                    case eavesdrop_server_case_2
                                    by sorry
                                  next
                                    case eavesdrop_server_case_3
                                    by sorry
                                  next
                                    case eavesdrop_server_case_4
                                    by sorry
                                  next
                                    case eavesdrop_server_case_5
                                    by sorry
                                  next
                                    case eavesdrop_server_case_6
                                    by sorry
                                  next
                                    case mul_up_case_1
                                    by sorry
                                  next
                                    case mul_up_case_2
                                    by sorry
                                  next
                                    case mul_up_case_3
                                    by sorry
                                  qed
                                next
                                  case forward_case_4
                                  by contradiction /* from formulas */
                                qed
                              next
                                case forward_case_3
                                by sorry
                              next
                                case forward_case_4
                                by sorry
                              next
                                case forward_case_5
                                by sorry
                              next
                                case forward_case_6
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case extract_case_1
                            by sorry
                          next
                            case extract_case_2
                            by sorry
                          qed
                        next
                          case eavesdrop_server_case_01
                          by sorry
                        next
                          case eavesdrop_server_case_02
                          by sorry
                        next
                          case eavesdrop_server_case_03
                          by sorry
                        next
                          case eavesdrop_server_case_04
                          by sorry
                        next
                          case eavesdrop_server_case_05
                          by sorry
                        next
                          case eavesdrop_server_case_06
                          by sorry
                        next
                          case eavesdrop_server_case_07
                          by sorry
                        next
                          case eavesdrop_server_case_08
                          by sorry
                        next
                          case eavesdrop_server_case_09
                          by sorry
                        next
                          case eavesdrop_server_case_10
                          by sorry
                        next
                          case eavesdrop_server_case_11
                          by sorry
                        next
                          case eavesdrop_server_case_12
                          by sorry
                        next
                          case mul_up_case_01
                          by sorry
                        next
                          case mul_up_case_02
                          by sorry
                        next
                          case mul_up_case_03
                          by sorry
                        next
                          case mul_up_case_04
                          by sorry
                        next
                          case mul_up_case_05
                          by sorry
                        next
                          case mul_up_case_06
                          by sorry
                        next
                          case mul_up_case_07
                          by sorry
                        next
                          case mul_up_case_08
                          by sorry
                        next
                          case mul_up_case_09
                          by sorry
                        next
                          case mul_up_case_10
                          by sorry
                        next
                          case mul_up_case_11
                          by sorry
                        next
                          case mul_up_case_12
                          by sorry
                        next
                          case mul_up_case_13
                          by sorry
                        qed
                      qed
                    qed
                  next
                    case solve_dlog
                    by sorry
                  qed
                next
                  case solve_dlog
                  by sorry
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma senc_share_secrecy [reuse, heuristic={senc_share_secrecy},
                          hide_lemma=types]:
  all-traces
  "∀ s_enc_share cid sid #i.
    (Secret( 'senc_share', s_enc_share, cid, sid ) @ #i) ⇒
    ((¬(∃ #j. !KU( s_enc_share ) @ #j)) ∨
     (∃ #j. !Compromised( sid ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ s_enc_share cid sid #i.
  (Secret( 'senc_share', s_enc_share, cid, sid ) @ #i)
 ∧
  (∃ #j. (!KU( s_enc_share ) @ #j)) ∧
  (∀ #j. (!Compromised( sid ) @ #j) ⇒ ⊥)"
*/
simplify
solve( Secret( 'senc_share', s_enc_share, cid, sid ) @ #i )
  case client_register_case_1
  solve( splitEqs(0) )
    case split
    solve( !KU( ~s_enc1 ) @ #j )
      case adversary_recv_case_1
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, 
                    <$cid, ~koprf1, ~s_enc1, 
                     pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>, 
                    pk(x)>
             ) ▶₁ #vr.4 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        by contradiction /* from formulas */
      qed
    next
      case adversary_recv_case_2
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, ~s_enc1, pk(x)>
             ) ▶₁ #vr.4 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        solve( SCIn( 'adv', $server,
                     revealSign(h(mul(factors, hpw)),
                                KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))
               ) ▶₁ #vr.2 )
          case forward_case_1
          by contradiction /* from formulas */
        next
          case forward_case_2
          solve( !KU( revealSign(h(mul(factors, hpw)),
                                 KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))
                 ) @ #vk )
            case adversary_recv_case_1
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_2
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_3
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_4
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_5
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_6
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case c_revealSign
            solve( !KU( KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>),
                            '1')
                   ) @ #vk.2 )
              case c_KDF
              solve( !KU( h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)
                     ) @ #vk.3 )
                case c_h
                solve( !KU( ~pw ) @ #vk.6 )
                  case bruteforce
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case eavesdrop_server_case_01
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_02
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_03
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_04
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_05
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_06
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_07
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_08
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_09
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_10
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_11
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_12
            by contradiction /* from formulas */
          qed
        next
          case forward_case_3
          by contradiction /* from formulas */
        next
          case forward_case_4
          by contradiction /* from formulas */
        next
          case forward_case_5
          by contradiction /* from formulas */
        next
          case forward_case_6
          by contradiction /* from formulas */
        next
          case forward_case_7
          by contradiction /* from formulas */
        next
          case forward_case_8
          by contradiction /* from formulas */
        next
          case forward_case_9
          by contradiction /* from formulas */
        qed
      next
        case forward_case_4
        by contradiction /* from formulas */
      qed
    next
      case eavesdrop_server_case_1
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, 
                    <$cid, ~koprf1, ~s_enc1, 
                     pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>, 
                    pk(x)>
             ) ▶₁ #vr.6 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        by contradiction /* from formulas */
      qed
    next
      case eavesdrop_server_case_2
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, ~s_enc1, pk(x)>
             ) ▶₁ #vr.6 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        by contradiction /* from formulas */
      next
        case forward_case_4
        by contradiction /* from formulas */
      qed
    next
      case eavesdrop_server_case_3
      by contradiction /* from formulas */
    qed
  qed
next
  case client_register_case_2
  solve( splitEqs(0) )
    case split
    solve( !KU( ~s_enc2 ) @ #j )
      case adversary_recv_case_1
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, 
                    <$cid, ~koprf2, ~s_enc2, 
                     pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>, 
                    pk(x)>
             ) ▶₁ #vr.4 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        by contradiction /* from formulas */
      qed
    next
      case adversary_recv_case_2
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, ~s_enc2, pk(x)>
             ) ▶₁ #vr.4 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        solve( SCIn( 'adv', $server,
                     revealSign(h(mul(factors, hpw)),
                                KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))
               ) ▶₁ #vr.2 )
          case forward_case_1
          by contradiction /* from formulas */
        next
          case forward_case_2
          solve( !KU( revealSign(h(mul(factors, hpw)),
                                 KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))
                 ) @ #vk )
            case adversary_recv_case_1
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_2
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_3
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_4
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_5
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_6
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case c_revealSign
            solve( !KU( KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>),
                            '2')
                   ) @ #vk.2 )
              case c_KDF
              solve( !KU( h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)
                     ) @ #vk.3 )
                case c_h
                solve( !KU( ~pw ) @ #vk.6 )
                  case bruteforce
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case eavesdrop_server_case_01
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_02
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_03
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_04
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_05
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_06
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_07
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_08
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_09
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_10
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_11
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_12
            by contradiction /* from formulas */
          qed
        next
          case forward_case_3
          by contradiction /* from formulas */
        next
          case forward_case_4
          by contradiction /* from formulas */
        next
          case forward_case_5
          by contradiction /* from formulas */
        next
          case forward_case_6
          by contradiction /* from formulas */
        next
          case forward_case_7
          by contradiction /* from formulas */
        next
          case forward_case_8
          by contradiction /* from formulas */
        next
          case forward_case_9
          by contradiction /* from formulas */
        qed
      next
        case forward_case_4
        by contradiction /* from formulas */
      qed
    next
      case eavesdrop_server_case_1
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, 
                    <$cid, ~koprf2, ~s_enc2, 
                     pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>, 
                    pk(x)>
             ) ▶₁ #vr.6 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        by contradiction /* from formulas */
      qed
    next
      case eavesdrop_server_case_2
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, ~s_enc2, pk(x)>
             ) ▶₁ #vr.6 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        by contradiction /* from formulas */
      next
        case forward_case_4
        by contradiction /* from formulas */
      qed
    next
      case eavesdrop_server_case_3
      by contradiction /* from formulas */
    qed
  qed
next
  case client_register_case_3
  solve( splitEqs(0) )
    case split
    solve( !KU( ~s_enc3 ) @ #j )
      case adversary_recv_case_1
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, 
                    <$cid, ~koprf3, ~s_enc3, 
                     pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>, 
                    pk(x)>
             ) ▶₁ #vr.4 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        by contradiction /* from formulas */
      qed
    next
      case adversary_recv_case_2
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, ~s_enc3, pk(x)>
             ) ▶₁ #vr.4 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        solve( SCIn( 'adv', $server,
                     revealSign(h(mul(factors, hpw)),
                                KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))
               ) ▶₁ #vr.2 )
          case forward_case_1
          by contradiction /* from formulas */
        next
          case forward_case_2
          solve( !KU( revealSign(h(mul(factors, hpw)),
                                 KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))
                 ) @ #vk )
            case adversary_recv_case_1
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_2
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_3
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_4
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_5
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case adversary_recv_case_6
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.18 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case c_revealSign
            solve( !KU( KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>),
                            '3')
                   ) @ #vk.2 )
              case c_KDF
              solve( !KU( h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)
                     ) @ #vk.3 )
                case c_h
                solve( !KU( ~pw ) @ #vk.6 )
                  case bruteforce
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case eavesdrop_server_case_01
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_02
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_03
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_04
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_05
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_06
            solve( SCIn( $client.2, $server.1,
                         <$cid.1, koprf_share, 
                          revealSign(h(mul(~b, h(~pw))),
                                     KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3')), 
                          pk(x)>
                   ) ▶₁ #vr.20 )
              case forward_case_1
              by contradiction /* cyclic */
            next
              case forward_case_2
              by contradiction /* cyclic */
            next
              case forward_case_3
              by contradiction /* from formulas */
            qed
          next
            case eavesdrop_server_case_07
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_08
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_09
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_10
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_11
            by contradiction /* from formulas */
          next
            case eavesdrop_server_case_12
            by contradiction /* from formulas */
          qed
        next
          case forward_case_3
          by contradiction /* from formulas */
        next
          case forward_case_4
          by contradiction /* from formulas */
        next
          case forward_case_5
          by contradiction /* from formulas */
        next
          case forward_case_6
          by contradiction /* from formulas */
        next
          case forward_case_7
          by contradiction /* from formulas */
        next
          case forward_case_8
          by contradiction /* from formulas */
        next
          case forward_case_9
          by contradiction /* from formulas */
        qed
      next
        case forward_case_4
        by contradiction /* from formulas */
      qed
    next
      case eavesdrop_server_case_1
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, 
                    <$cid, ~koprf3, ~s_enc3, 
                     pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>, 
                    pk(x)>
             ) ▶₁ #vr.6 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        by contradiction /* from formulas */
      qed
    next
      case eavesdrop_server_case_2
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, ~s_enc3, pk(x)>
             ) ▶₁ #vr.6 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        by contradiction /* from formulas */
      next
        case forward_case_4
        by contradiction /* from formulas */
      qed
    next
      case eavesdrop_server_case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma senc_secrecy [reuse, heuristic={senc_secrecy}]:
  all-traces
  "∀ s_enc cid sid1 sid2 sid3 #i.
    (Secret( 'senc', s_enc, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    ((¬(∃ #j. !KU( s_enc ) @ #j)) ∨
     (∃ #j #k #l.
       ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
       (!Compromised( sid3 ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ s_enc cid sid1 sid2 sid3 #i.
  (Secret( 'senc', s_enc, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( s_enc ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥)"
*/
simplify
solve( Secret( 'senc', s_enc, cid, <sid1, sid2, sid3> ) @ #i )
  case client_register
  solve( splitEqs(0) )
    case split
    solve( (∀ #j. (!KU( ~s_enc1 ) @ #j) ⇒ ⊥)  ∥
           (∃ #j. (!Compromised( $sid1 ) @ #j)) )
      case case_1
      solve( (∀ #j. (!KU( ~s_enc2 ) @ #j) ⇒ ⊥)  ∥
             (∃ #j. (!Compromised( $sid2 ) @ #j)) )
        case case_1
        solve( (∀ #j. (!KU( ~s_enc3 ) @ #j) ⇒ ⊥)  ∥
               (∃ #j. (!Compromised( $sid3 ) @ #j)) )
          case case_1
          solve( !KU( (~s_enc1⊕~s_enc2⊕~s_enc3) ) @ #j )
            case c_xor_case_1
            by contradiction /* from formulas */
          next
            case c_xor_case_2
            by contradiction /* from formulas */
          next
            case c_xor_case_3
            by contradiction /* from formulas */
          next
            case coerce
            solve( !KD( (~s_enc1⊕~s_enc2⊕~s_enc3) ) ▶₀ #j )
              case adversary_recv
              solve( SCIn( $server, 'adv', t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j, 0) )
              next
                case forward_case_10
                by contradiction /* from formulas */
              next
                case forward_case_11
                by contradiction /* from formulas */
              next
                case forward_case_12
                by contradiction /* from formulas */
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce
              by contradiction /* impossible chain */
            next
              case client_register
              solve( (#vl, 0) ~~> (#j, 0) )
                case d_0_sdec
                by contradiction /* impossible chain */
              qed
            next
              case eavesdrop_server
              solve( !SCKnows( $server, t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j, 0) )
              next
                case forward_case_10
                solve( (#vl, 0) ~~> (#j, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_11
                solve( (#vl, 0) ~~> (#j, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_12
                solve( (#vl, 0) ~~> (#j, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              next
                case forward_case_14
                by contradiction /* cyclic */
              next
                case forward_case_15
                by contradiction /* cyclic */
              next
                case forward_case_16
                by contradiction /* impossible chain */
              next
                case forward_case_17
                by contradiction /* impossible chain */
              next
                case forward_case_18
                by contradiction /* impossible chain */
              next
                case forward_case_19
                by contradiction /* impossible chain */
              next
                case forward_case_20
                by contradiction /* impossible chain */
              next
                case forward_case_21
                by contradiction /* impossible chain */
              next
                case forward_case_22
                by solve( (#vl, 0) ~~> (#j, 0) )
              next
                case forward_case_23
                solve( (#vl, 0) ~~> (#j, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_24
                solve( (#vl, 0) ~~> (#j, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_25
                solve( (#vl, 0) ~~> (#j, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_26
                solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case extract
              solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr)  ∥
                     (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr) )
                case case_1
                by contradiction /* impossible chain */
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case mul_up
              by solve( (#vl, 0) ~~> (#j, 0) )
            next
              case solve_dlog
              solve( !Factor( t ) ▶₀ #vr )
                case client_reconstruct_phase1
                by contradiction /* impossible chain */
              next
                case server_reconstruct_phase1
                solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                       ) ▶₁ #vr.2 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( !KU( (~s_enc1⊕~s_enc2⊕~s_enc3) ) @ #j.1 )
            case c_xor_case_1
            by contradiction /* from formulas */
          next
            case c_xor_case_2
            by contradiction /* from formulas */
          next
            case c_xor_case_3
            solve( !KU( ~s_enc3 ) @ #vk )
              case adversary_recv_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf3, ~s_enc3, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>, 
                            pk(x)>
                     ) ▶₁ #vr.4 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case adversary_recv_case_2
              solve( !KU( (~s_enc1⊕~s_enc2) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc2) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.10)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.10) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.10 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.12 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf3, ~s_enc3, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>, 
                            pk(x)>
                     ) ▶₁ #vr.6 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case eavesdrop_server_case_2
              solve( !KU( (~s_enc1⊕~s_enc2) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc2) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.12 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_3
              solve( !KU( (~s_enc1⊕~s_enc2) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc2) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server, 'adv', t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server, t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.11 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.13 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~s_enc1⊕~s_enc2⊕~s_enc3) ) ▶₀ #j.1 )
              case adversary_recv
              solve( SCIn( $server, 'adv', t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.1, 0) )
              next
                case forward_case_10
                by contradiction /* from formulas */
              next
                case forward_case_11
                by contradiction /* from formulas */
              next
                case forward_case_12
                by contradiction /* from formulas */
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce
              by contradiction /* impossible chain */
            next
              case client_register
              solve( (#vl, 0) ~~> (#j.1, 0) )
                case d_0_sdec
                by contradiction /* impossible chain */
              qed
            next
              case eavesdrop_server
              solve( !SCKnows( $server, t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.1, 0) )
              next
                case forward_case_10
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_11
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_12
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              next
                case forward_case_14
                by contradiction /* cyclic */
              next
                case forward_case_15
                by contradiction /* cyclic */
              next
                case forward_case_16
                by contradiction /* impossible chain */
              next
                case forward_case_17
                by contradiction /* impossible chain */
              next
                case forward_case_18
                by contradiction /* impossible chain */
              next
                case forward_case_19
                by contradiction /* impossible chain */
              next
                case forward_case_20
                by contradiction /* impossible chain */
              next
                case forward_case_21
                by contradiction /* impossible chain */
              next
                case forward_case_22
                by solve( (#vl, 0) ~~> (#j.1, 0) )
              next
                case forward_case_23
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_24
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_25
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_26
                solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case extract
              solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr)  ∥
                     (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr) )
                case case_1
                by contradiction /* impossible chain */
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case mul_up
              by solve( (#vl, 0) ~~> (#j.1, 0) )
            next
              case solve_dlog
              solve( !Factor( t ) ▶₀ #vr )
                case client_reconstruct_phase1
                by contradiction /* impossible chain */
              next
                case server_reconstruct_phase1
                solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                       ) ▶₁ #vr.2 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( (∀ #j. (!KU( ~s_enc3 ) @ #j) ⇒ ⊥)  ∥
               (∃ #j. (!Compromised( $sid3 ) @ #j)) )
          case case_1
          solve( !KU( (~s_enc1⊕~s_enc2⊕~s_enc3) ) @ #j.1 )
            case c_xor_case_1
            solve( !KU( ~s_enc2 ) @ #vk.1 )
              case adversary_recv_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf2, ~s_enc2, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>, 
                            pk(x)>
                     ) ▶₁ #vr.4 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case adversary_recv_case_2
              solve( !KU( (~s_enc1⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.10)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.10) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.10 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.12 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf2, ~s_enc2, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>, 
                            pk(x)>
                     ) ▶₁ #vr.6 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case eavesdrop_server_case_2
              solve( !KU( (~s_enc1⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.12 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_3
              solve( !KU( (~s_enc1⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server, 'adv', t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server, t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.11 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.13 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_xor_case_2
            by contradiction /* from formulas */
          next
            case c_xor_case_3
            by contradiction /* from formulas */
          next
            case coerce
            solve( !KD( (~s_enc1⊕~s_enc2⊕~s_enc3) ) ▶₀ #j.1 )
              case adversary_recv
              solve( SCIn( $server, 'adv', t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.1, 0) )
              next
                case forward_case_10
                by contradiction /* from formulas */
              next
                case forward_case_11
                by contradiction /* from formulas */
              next
                case forward_case_12
                by contradiction /* from formulas */
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce
              by contradiction /* impossible chain */
            next
              case client_register
              solve( (#vl, 0) ~~> (#j.1, 0) )
                case d_0_sdec
                by contradiction /* impossible chain */
              qed
            next
              case eavesdrop_server
              solve( !SCKnows( $server, t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.1, 0) )
              next
                case forward_case_10
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_11
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_12
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              next
                case forward_case_14
                by contradiction /* cyclic */
              next
                case forward_case_15
                by contradiction /* cyclic */
              next
                case forward_case_16
                by contradiction /* impossible chain */
              next
                case forward_case_17
                by contradiction /* impossible chain */
              next
                case forward_case_18
                by contradiction /* impossible chain */
              next
                case forward_case_19
                by contradiction /* impossible chain */
              next
                case forward_case_20
                by contradiction /* impossible chain */
              next
                case forward_case_21
                by contradiction /* impossible chain */
              next
                case forward_case_22
                by solve( (#vl, 0) ~~> (#j.1, 0) )
              next
                case forward_case_23
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_24
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_25
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_26
                solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case extract
              solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr)  ∥
                     (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr) )
                case case_1
                by contradiction /* impossible chain */
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case mul_up
              by solve( (#vl, 0) ~~> (#j.1, 0) )
            next
              case solve_dlog
              solve( !Factor( t ) ▶₀ #vr )
                case client_reconstruct_phase1
                by contradiction /* impossible chain */
              next
                case server_reconstruct_phase1
                solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                       ) ▶₁ #vr.2 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( !KU( (~s_enc1⊕~s_enc2⊕~s_enc3) ) @ #j.2 )
            case c_xor_case_1
            solve( !KU( ~s_enc2 ) @ #vk.1 )
              case adversary_recv_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf2, ~s_enc2, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>, 
                            pk(x)>
                     ) ▶₁ #vr.4 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case adversary_recv_case_2
              solve( !KU( (~s_enc1⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.10)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.10) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.10 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.12 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf2, ~s_enc2, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>, 
                            pk(x)>
                     ) ▶₁ #vr.6 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case eavesdrop_server_case_2
              solve( !KU( (~s_enc1⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.12 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_3
              solve( !KU( (~s_enc1⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server, 'adv', t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server, t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.11 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.13 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_xor_case_2
            by contradiction /* from formulas */
          next
            case c_xor_case_3
            solve( !KU( ~s_enc3 ) @ #vk )
              case adversary_recv_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf3, ~s_enc3, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>, 
                            pk(x)>
                     ) ▶₁ #vr.4 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case adversary_recv_case_2
              solve( !KU( (~s_enc1⊕~s_enc2) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc2) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.10)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.10) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.10 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.12 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf3, ~s_enc3, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>, 
                            pk(x)>
                     ) ▶₁ #vr.6 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case eavesdrop_server_case_2
              solve( !KU( (~s_enc1⊕~s_enc2) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc2) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.12 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_3
              solve( !KU( (~s_enc1⊕~s_enc2) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc2) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server, 'adv', t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server, t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.11 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.13 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~s_enc1⊕~s_enc2⊕~s_enc3) ) ▶₀ #j.2 )
              case adversary_recv
              solve( SCIn( $server, 'adv', t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.2, 0) )
              next
                case forward_case_10
                by contradiction /* from formulas */
              next
                case forward_case_11
                by contradiction /* from formulas */
              next
                case forward_case_12
                by contradiction /* from formulas */
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce
              by contradiction /* impossible chain */
            next
              case client_register
              solve( (#vl, 0) ~~> (#j.2, 0) )
                case d_0_sdec
                by contradiction /* impossible chain */
              qed
            next
              case eavesdrop_server
              solve( !SCKnows( $server, t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.2, 0) )
              next
                case forward_case_10
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_11
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_12
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              next
                case forward_case_14
                by contradiction /* cyclic */
              next
                case forward_case_15
                by contradiction /* cyclic */
              next
                case forward_case_16
                by contradiction /* impossible chain */
              next
                case forward_case_17
                by contradiction /* impossible chain */
              next
                case forward_case_18
                by contradiction /* impossible chain */
              next
                case forward_case_19
                by contradiction /* impossible chain */
              next
                case forward_case_20
                by contradiction /* impossible chain */
              next
                case forward_case_21
                by contradiction /* impossible chain */
              next
                case forward_case_22
                by solve( (#vl, 0) ~~> (#j.2, 0) )
              next
                case forward_case_23
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_24
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_25
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_26
                solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case extract
              solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr)  ∥
                     (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr) )
                case case_1
                by contradiction /* impossible chain */
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case mul_up
              by solve( (#vl, 0) ~~> (#j.2, 0) )
            next
              case solve_dlog
              solve( !Factor( t ) ▶₀ #vr )
                case client_reconstruct_phase1
                by contradiction /* impossible chain */
              next
                case server_reconstruct_phase1
                solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                       ) ▶₁ #vr.2 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( (∀ #j. (!KU( ~s_enc2 ) @ #j) ⇒ ⊥)  ∥
             (∃ #j. (!Compromised( $sid2 ) @ #j)) )
        case case_1
        solve( (∀ #j. (!KU( ~s_enc3 ) @ #j) ⇒ ⊥)  ∥
               (∃ #j. (!Compromised( $sid3 ) @ #j)) )
          case case_1
          solve( !KU( (~s_enc1⊕~s_enc2⊕~s_enc3) ) @ #j.1 )
            case c_xor_case_1
            by contradiction /* from formulas */
          next
            case c_xor_case_2
            solve( !KU( ~s_enc1 ) @ #vk.1 )
              case adversary_recv_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf1, ~s_enc1, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>, 
                            pk(x)>
                     ) ▶₁ #vr.4 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case adversary_recv_case_2
              solve( !KU( (~s_enc2⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc2⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.10)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.10) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.10 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.12 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf1, ~s_enc1, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>, 
                            pk(x)>
                     ) ▶₁ #vr.6 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case eavesdrop_server_case_2
              solve( !KU( (~s_enc2⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc2⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.12 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_3
              solve( !KU( (~s_enc2⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc2⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server, 'adv', t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server, t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.11 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.13 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_xor_case_3
            by contradiction /* from formulas */
          next
            case coerce
            solve( !KD( (~s_enc1⊕~s_enc2⊕~s_enc3) ) ▶₀ #j.1 )
              case adversary_recv
              solve( SCIn( $server, 'adv', t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.1, 0) )
              next
                case forward_case_10
                by contradiction /* from formulas */
              next
                case forward_case_11
                by contradiction /* from formulas */
              next
                case forward_case_12
                by contradiction /* from formulas */
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce
              by contradiction /* impossible chain */
            next
              case client_register
              solve( (#vl, 0) ~~> (#j.1, 0) )
                case d_0_sdec
                by contradiction /* impossible chain */
              qed
            next
              case eavesdrop_server
              solve( !SCKnows( $server, t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.1, 0) )
              next
                case forward_case_10
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_11
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_12
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              next
                case forward_case_14
                by contradiction /* cyclic */
              next
                case forward_case_15
                by contradiction /* cyclic */
              next
                case forward_case_16
                by contradiction /* impossible chain */
              next
                case forward_case_17
                by contradiction /* impossible chain */
              next
                case forward_case_18
                by contradiction /* impossible chain */
              next
                case forward_case_19
                by contradiction /* impossible chain */
              next
                case forward_case_20
                by contradiction /* impossible chain */
              next
                case forward_case_21
                by contradiction /* impossible chain */
              next
                case forward_case_22
                by solve( (#vl, 0) ~~> (#j.1, 0) )
              next
                case forward_case_23
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_24
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_25
                solve( (#vl, 0) ~~> (#j.1, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_26
                solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case extract
              solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr)  ∥
                     (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr) )
                case case_1
                by contradiction /* impossible chain */
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case mul_up
              by solve( (#vl, 0) ~~> (#j.1, 0) )
            next
              case solve_dlog
              solve( !Factor( t ) ▶₀ #vr )
                case client_reconstruct_phase1
                by contradiction /* impossible chain */
              next
                case server_reconstruct_phase1
                solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                       ) ▶₁ #vr.2 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( !KU( (~s_enc1⊕~s_enc2⊕~s_enc3) ) @ #j.2 )
            case c_xor_case_1
            by contradiction /* from formulas */
          next
            case c_xor_case_2
            solve( !KU( ~s_enc1 ) @ #vk.1 )
              case adversary_recv_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf1, ~s_enc1, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>, 
                            pk(x)>
                     ) ▶₁ #vr.4 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case adversary_recv_case_2
              solve( !KU( (~s_enc2⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc2⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.10)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.10) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.10 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.12 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf1, ~s_enc1, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>, 
                            pk(x)>
                     ) ▶₁ #vr.6 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case eavesdrop_server_case_2
              solve( !KU( (~s_enc2⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc2⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.12 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_3
              solve( !KU( (~s_enc2⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc2⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server, 'adv', t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server, t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.11 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.13 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_xor_case_3
            solve( !KU( ~s_enc3 ) @ #vk )
              case adversary_recv_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf3, ~s_enc3, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>, 
                            pk(x)>
                     ) ▶₁ #vr.4 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case adversary_recv_case_2
              solve( !KU( (~s_enc1⊕~s_enc2) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc2) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.10)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.10) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.10 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.12 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf3, ~s_enc3, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>, 
                            pk(x)>
                     ) ▶₁ #vr.6 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case eavesdrop_server_case_2
              solve( !KU( (~s_enc1⊕~s_enc2) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc2) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.12 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_3
              solve( !KU( (~s_enc1⊕~s_enc2) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc2) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server, 'adv', t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server, t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.11 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.13 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case coerce
            solve( !KD( (~s_enc1⊕~s_enc2⊕~s_enc3) ) ▶₀ #j.2 )
              case adversary_recv
              solve( SCIn( $server, 'adv', t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.2, 0) )
              next
                case forward_case_10
                by contradiction /* from formulas */
              next
                case forward_case_11
                by contradiction /* from formulas */
              next
                case forward_case_12
                by contradiction /* from formulas */
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce
              by contradiction /* impossible chain */
            next
              case client_register
              solve( (#vl, 0) ~~> (#j.2, 0) )
                case d_0_sdec
                by contradiction /* impossible chain */
              qed
            next
              case eavesdrop_server
              solve( !SCKnows( $server, t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.2, 0) )
              next
                case forward_case_10
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_11
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_12
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              next
                case forward_case_14
                by contradiction /* cyclic */
              next
                case forward_case_15
                by contradiction /* cyclic */
              next
                case forward_case_16
                by contradiction /* impossible chain */
              next
                case forward_case_17
                by contradiction /* impossible chain */
              next
                case forward_case_18
                by contradiction /* impossible chain */
              next
                case forward_case_19
                by contradiction /* impossible chain */
              next
                case forward_case_20
                by contradiction /* impossible chain */
              next
                case forward_case_21
                by contradiction /* impossible chain */
              next
                case forward_case_22
                by solve( (#vl, 0) ~~> (#j.2, 0) )
              next
                case forward_case_23
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_24
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_25
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_26
                solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case extract
              solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr)  ∥
                     (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr) )
                case case_1
                by contradiction /* impossible chain */
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case mul_up
              by solve( (#vl, 0) ~~> (#j.2, 0) )
            next
              case solve_dlog
              solve( !Factor( t ) ▶₀ #vr )
                case client_reconstruct_phase1
                by contradiction /* impossible chain */
              next
                case server_reconstruct_phase1
                solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                       ) ▶₁ #vr.2 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case case_2
        solve( (∀ #j. (!KU( ~s_enc3 ) @ #j) ⇒ ⊥)  ∥
               (∃ #j. (!Compromised( $sid3 ) @ #j)) )
          case case_1
          solve( !KU( (~s_enc1⊕~s_enc2⊕~s_enc3) ) @ #j.2 )
            case c_xor_case_1
            solve( !KU( ~s_enc2 ) @ #vk.1 )
              case adversary_recv_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf2, ~s_enc2, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>, 
                            pk(x)>
                     ) ▶₁ #vr.4 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case adversary_recv_case_2
              solve( !KU( (~s_enc1⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.10)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.10) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.10 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.12 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf2, ~s_enc2, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>, 
                            pk(x)>
                     ) ▶₁ #vr.6 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case eavesdrop_server_case_2
              solve( !KU( (~s_enc1⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.12 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_3
              solve( !KU( (~s_enc1⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc1⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server, 'adv', t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server, t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.11 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.13 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_xor_case_2
            solve( !KU( ~s_enc1 ) @ #vk.1 )
              case adversary_recv_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf1, ~s_enc1, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>, 
                            pk(x)>
                     ) ▶₁ #vr.4 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case adversary_recv_case_2
              solve( !KU( (~s_enc2⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc2⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.10 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.10)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.10) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.10 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.12 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_1
              solve( SCIn( $client.1, $server,
                           <$cid.1, koprf_share, 
                            <$cid, ~koprf1, ~s_enc1, 
                             pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>, 
                            pk(x)>
                     ) ▶₁ #vr.6 )
                case forward_case_1
                by contradiction /* cyclic */
              next
                case forward_case_2
                by contradiction /* cyclic */
              next
                case forward_case_3
                by contradiction /* from formulas */
              qed
            next
              case eavesdrop_server_case_2
              solve( !KU( (~s_enc2⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc2⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server.1, 'adv', t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server.1, t ) ▶₀ #vr.12 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.3, $server.1,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.3, $sender,
                                 <$cid.2, koprf_share.1, t, pk(x.1)>
                           ) ▶₁ #vr.16 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.12 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.3, $sid, <$cid.2, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.14 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case eavesdrop_server_case_3
              solve( !KU( (~s_enc2⊕~s_enc3) ) @ #vk.1 )
                case c_xor
                by contradiction /* from formulas */
              next
                case coerce
                solve( !KD( (~s_enc2⊕~s_enc3) ) ▶₀ #vk.1 )
                  case adversary_recv
                  solve( SCIn( $server, 'adv', t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    by contradiction /* from formulas */
                  next
                    case forward_case_11
                    by contradiction /* from formulas */
                  next
                    case forward_case_12
                    by contradiction /* from formulas */
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case bruteforce
                  by contradiction /* impossible chain */
                next
                  case client_register
                  solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                    case d_0_sdec
                    by contradiction /* impossible chain */
                  qed
                next
                  case eavesdrop_server
                  solve( !SCKnows( $server, t ) ▶₀ #vr.11 )
                    case forward_case_01
                    by contradiction /* cyclic */
                  next
                    case forward_case_02
                    by contradiction /* cyclic */
                  next
                    case forward_case_03
                    by contradiction /* impossible chain */
                  next
                    case forward_case_04
                    by contradiction /* impossible chain */
                  next
                    case forward_case_05
                    by contradiction /* impossible chain */
                  next
                    case forward_case_06
                    by contradiction /* impossible chain */
                  next
                    case forward_case_07
                    by contradiction /* impossible chain */
                  next
                    case forward_case_08
                    by contradiction /* impossible chain */
                  next
                    case forward_case_09
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_10
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_11
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_12
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_13
                    solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  next
                    case forward_case_14
                    by contradiction /* cyclic */
                  next
                    case forward_case_15
                    by contradiction /* cyclic */
                  next
                    case forward_case_16
                    by contradiction /* impossible chain */
                  next
                    case forward_case_17
                    by contradiction /* impossible chain */
                  next
                    case forward_case_18
                    by contradiction /* impossible chain */
                  next
                    case forward_case_19
                    by contradiction /* impossible chain */
                  next
                    case forward_case_20
                    by contradiction /* impossible chain */
                  next
                    case forward_case_21
                    by contradiction /* impossible chain */
                  next
                    case forward_case_22
                    by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                  next
                    case forward_case_23
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_24
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_25
                    solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                      case d_0_getMessage
                      by contradiction /* impossible chain */
                    qed
                  next
                    case forward_case_26
                    solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                           ) ▶₁ #vr.15 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case extract
                  solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by contradiction /* impossible chain */
                  next
                    case case_2
                    by contradiction /* cyclic */
                  qed
                next
                  case mul_up
                  by solve( (#vl.1, 0) ~~> (#vk.1, 0) )
                next
                  case solve_dlog
                  solve( !Factor( t ) ▶₀ #vr.11 )
                    case client_reconstruct_phase1
                    by contradiction /* impossible chain */
                  next
                    case server_reconstruct_phase1
                    solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                           ) ▶₁ #vr.13 )
                      case forward_case_1
                      by contradiction /* cyclic */
                    next
                      case forward_case_2
                      by contradiction /* cyclic */
                    next
                      case forward_case_3
                      by contradiction /* impossible chain */
                    next
                      case forward_case_4
                      by contradiction /* impossible chain */
                    next
                      case forward_case_5
                      by contradiction /* impossible chain */
                    next
                      case forward_case_6
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_xor_case_3
            by contradiction /* from formulas */
          next
            case coerce
            solve( !KD( (~s_enc1⊕~s_enc2⊕~s_enc3) ) ▶₀ #j.2 )
              case adversary_recv
              solve( SCIn( $server, 'adv', t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.2, 0) )
              next
                case forward_case_10
                by contradiction /* from formulas */
              next
                case forward_case_11
                by contradiction /* from formulas */
              next
                case forward_case_12
                by contradiction /* from formulas */
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case bruteforce
              by contradiction /* impossible chain */
            next
              case client_register
              solve( (#vl, 0) ~~> (#j.2, 0) )
                case d_0_sdec
                by contradiction /* impossible chain */
              qed
            next
              case eavesdrop_server
              solve( !SCKnows( $server, t ) ▶₀ #vr )
                case forward_case_01
                by contradiction /* cyclic */
              next
                case forward_case_02
                by contradiction /* cyclic */
              next
                case forward_case_03
                by contradiction /* impossible chain */
              next
                case forward_case_04
                by contradiction /* impossible chain */
              next
                case forward_case_05
                by contradiction /* impossible chain */
              next
                case forward_case_06
                by contradiction /* impossible chain */
              next
                case forward_case_07
                by contradiction /* impossible chain */
              next
                case forward_case_08
                by contradiction /* impossible chain */
              next
                case forward_case_09
                by solve( (#vl, 0) ~~> (#j.2, 0) )
              next
                case forward_case_10
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_11
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_12
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_13
                solve( SCIn( $client.1, $server, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              next
                case forward_case_14
                by contradiction /* cyclic */
              next
                case forward_case_15
                by contradiction /* cyclic */
              next
                case forward_case_16
                by contradiction /* impossible chain */
              next
                case forward_case_17
                by contradiction /* impossible chain */
              next
                case forward_case_18
                by contradiction /* impossible chain */
              next
                case forward_case_19
                by contradiction /* impossible chain */
              next
                case forward_case_20
                by contradiction /* impossible chain */
              next
                case forward_case_21
                by contradiction /* impossible chain */
              next
                case forward_case_22
                by solve( (#vl, 0) ~~> (#j.2, 0) )
              next
                case forward_case_23
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_24
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_25
                solve( (#vl, 0) ~~> (#j.2, 0) )
                  case d_0_getMessage
                  by contradiction /* impossible chain */
                qed
              next
                case forward_case_26
                solve( SCIn( $client.1, $sender, <$cid.1, koprf_share, t, pk(x)>
                       ) ▶₁ #vr.4 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            next
              case extract
              solve( (∃ #j. (SourceP( t ) @ #j) ∧ #j < #vr)  ∥
                     (∃ #j. (!KU( t ) @ #j) ∧ #j < #vr) )
                case case_1
                by contradiction /* impossible chain */
              next
                case case_2
                by contradiction /* cyclic */
              qed
            next
              case mul_up
              by solve( (#vl, 0) ~~> (#j.2, 0) )
            next
              case solve_dlog
              solve( !Factor( t ) ▶₀ #vr )
                case client_reconstruct_phase1
                by contradiction /* impossible chain */
              next
                case server_reconstruct_phase1
                solve( SCIn( $client.1, $sid, <$cid.1, t, s_enc_share, kvfy>
                       ) ▶₁ #vr.2 )
                  case forward_case_1
                  by contradiction /* cyclic */
                next
                  case forward_case_2
                  by contradiction /* cyclic */
                next
                  case forward_case_3
                  by contradiction /* impossible chain */
                next
                  case forward_case_4
                  by contradiction /* impossible chain */
                next
                  case forward_case_5
                  by contradiction /* impossible chain */
                next
                  case forward_case_6
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        next
          case case_2
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma secrecy [hide_lemma=types, hide_lemma=senc_share_secrecy]:
  all-traces
  "∀ secret cid sid1 sid2 sid3 #i.
    (Secret( 'secret', secret, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    ((¬(∃ #j. !KU( secret ) @ #j)) ∨
     (∃ #j #k #l.
       ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
       (!Compromised( sid3 ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ secret cid sid1 sid2 sid3 #i.
  (Secret( 'secret', secret, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( secret ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥)"
*/
simplify
solve( Secret( 'secret', secret, cid, <sid1, sid2, sid3> ) @ #i )
  case client_register
  solve( (∀ #j. (!KU( z ) @ #j) ⇒ ⊥)  ∥
         (∃ #j #k #l.
           (!Compromised( $sid1 ) @ #j) ∧
           (!Compromised( $sid2 ) @ #k) ∧
           (!Compromised( $sid3 ) @ #l)) )
    case case_1
    solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
      case client_initialise
      solve( !KU( ~secret ) @ #j )
        case client_register
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed

lemma pw_pre_quantum_secrecy [hide_lemma=types,
                              hide_lemma=senc_share_secrecy, hide_lemma=senc_secrecy]:
  all-traces
  "∀ pw cid sid1 sid2 sid3 #i.
    (Secret( 'pw', pw, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    (((¬(∃ #j. !KU( pw ) @ #j)) ∨
      (∃ #j #k #l.
        ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
        (!Compromised( sid3 ) @ #l))) ∨
     (∃ #j #k.
       ((!KU( pw ) @ #j) ∧ (PQAdversaryAction( ) @ #k)) ∧ (#k < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ pw cid sid1 sid2 sid3 #i.
  (Secret( 'pw', pw, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( pw ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥) ∧
  (∀ #j #k.
    (!KU( pw ) @ #j) ∧ (PQAdversaryAction( ) @ #k) ⇒ ¬(#k < #j))"
*/
simplify
solve( Secret( 'pw', pw, cid, <sid1, sid2, sid3> ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !KU( ~pw ) @ #j )
      case bruteforce
      by contradiction /* from formulas */
    qed
  qed
qed

lemma koprf_pre_quantum_secrecy [hide_lemma=types,
                                 hide_lemma=senc_share_secrecy, hide_lemma=senc_secrecy]:
  all-traces
  "∀ koprf cid sid1 sid2 sid3 #i.
    (Secret( 'koprf', koprf, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    (((¬(∃ #j. !KU( koprf ) @ #j)) ∨
      (∃ #j #k #l.
        ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
        (!Compromised( sid3 ) @ #l))) ∨
     (∃ #j #k.
       ((!KU( koprf ) @ #j) ∧ (PQAdversaryAction( ) @ #k)) ∧ (#k < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ koprf cid sid1 sid2 sid3 #i.
  (Secret( 'koprf', koprf, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( koprf ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥) ∧
  (∀ #j #k.
    (!KU( koprf ) @ #j) ∧ (PQAdversaryAction( ) @ #k) ⇒ ¬(#k < #j))"
*/
simplify
solve( Secret( 'koprf', koprf, cid, <sid1, sid2, sid3> ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !KU( ~koprf1 ) @ #vk )
      case adversary_recv
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, 
                    <$cid, ~koprf1, ~s_enc1, 
                     pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>, 
                    pk(x)>
             ) ▶₁ #vr.5 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        by contradiction /* from formulas */
      qed
    next
      case eavesdrop_server_case_1
      solve( SCIn( $client.1, $server,
                   <$cid.1, koprf_share, 
                    <$cid, ~koprf1, ~s_enc1, 
                     pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '1'))>, 
                    pk(x)>
             ) ▶₁ #vr.7 )
        case forward_case_1
        by contradiction /* cyclic */
      next
        case forward_case_2
        by contradiction /* cyclic */
      next
        case forward_case_3
        by contradiction /* from formulas */
      qed
    next
      case eavesdrop_server_case_2
      solve( !KU( ~koprf2 ) @ #vk.1 )
        case adversary_recv
        solve( SCIn( $client.1, $server,
                     <$cid.1, koprf_share, 
                      <$cid, ~koprf2, ~s_enc2, 
                       pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>, 
                      pk(x)>
               ) ▶₁ #vr.14 )
          case forward_case_1
          by contradiction /* cyclic */
        next
          case forward_case_2
          by contradiction /* cyclic */
        next
          case forward_case_3
          by contradiction /* from formulas */
        qed
      next
        case eavesdrop_server_case_1
        solve( SCIn( $client.1, $server,
                     <$cid.1, koprf_share, 
                      <$cid, ~koprf2, ~s_enc2, 
                       pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '2'))>, 
                      pk(x)>
               ) ▶₁ #vr.16 )
          case forward_case_1
          by contradiction /* cyclic */
        next
          case forward_case_2
          by contradiction /* cyclic */
        next
          case forward_case_3
          by contradiction /* from formulas */
        qed
      next
        case eavesdrop_server_case_2
        solve( !KU( ~koprf3 ) @ #vk.2 )
          case adversary_recv
          solve( SCIn( $client.1, $server,
                       <$cid.1, koprf_share, 
                        <$cid, ~koprf3, ~s_enc3, 
                         pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>, 
                        pk(x)>
                 ) ▶₁ #vr.20 )
            case forward_case_1
            by contradiction /* cyclic */
          next
            case forward_case_2
            by contradiction /* cyclic */
          next
            case forward_case_3
            by contradiction /* from formulas */
          qed
        next
          case eavesdrop_server_case_1
          solve( SCIn( $client.1, $server,
                       <$cid.1, koprf_share, 
                        <$cid, ~koprf3, ~s_enc3, 
                         pk(KDF(h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>), '3'))>, 
                        pk(x)>
                 ) ▶₁ #vr.22 )
            case forward_case_1
            by contradiction /* cyclic */
          next
            case forward_case_2
            by contradiction /* cyclic */
          next
            case forward_case_3
            by contradiction /* from formulas */
          qed
        next
          case eavesdrop_server_case_2
          by contradiction /* from formulas */
        next
          case solve_dlog
          by contradiction /* from formulas */
        qed
      next
        case solve_dlog
        by contradiction /* from formulas */
      qed
    next
      case solve_dlog
      by contradiction /* from formulas */
    qed
  qed
qed

lemma kauth_pre_quantum_secrecy [hide_lemma=types,
                                 hide_lemma=senc_share_secrecy, hide_lemma=senc_secrecy]:
  all-traces
  "∀ kauth cid sid1 sid2 sid3 #i.
    (Secret( 'kauth', kauth, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    (((¬(∃ #j. !KU( kauth ) @ #j)) ∨
      (∃ #j #k #l.
        ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
        (!Compromised( sid3 ) @ #l))) ∨
     (∃ #j #k.
       ((!KU( kauth ) @ #j) ∧ (PQAdversaryAction( ) @ #k)) ∧ (#k < #j)))"
/*
guarded formula characterizing all counter-examples:
"∃ kauth cid sid1 sid2 sid3 #i.
  (Secret( 'kauth', kauth, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( kauth ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥) ∧
  (∀ #j #k.
    (!KU( kauth ) @ #j) ∧ (PQAdversaryAction( ) @ #k) ⇒ ¬(#k < #j))"
*/
simplify
solve( Secret( 'kauth', kauth, cid, <sid1, sid2, sid3> ) @ #i )
  case client_register
  solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
    case client_initialise
    solve( !KU( h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>)
           ) @ #j )
      case c_h
      solve( !KU( ~pw ) @ #vk.1 )
        case bruteforce
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma kenc_secrecy [hide_lemma=types,
                    hide_lemma=senc_share_secrecy]:
  all-traces
  "∀ kenc cid sid1 sid2 sid3 #i.
    (Secret( 'kenc', kenc, cid, <sid1, sid2, sid3> ) @ #i) ⇒
    ((¬(∃ #j. !KU( kenc ) @ #j)) ∨
     (∃ #j #k #l.
       ((!Compromised( sid1 ) @ #j) ∧ (!Compromised( sid2 ) @ #k)) ∧
       (!Compromised( sid3 ) @ #l)))"
/*
guarded formula characterizing all counter-examples:
"∃ kenc cid sid1 sid2 sid3 #i.
  (Secret( 'kenc', kenc, cid, <sid1, sid2, sid3> ) @ #i)
 ∧
  (∃ #j. (!KU( kenc ) @ #j)) ∧
  (∀ #j #k #l.
    (!Compromised( sid1 ) @ #j) ∧
    (!Compromised( sid2 ) @ #k) ∧
    (!Compromised( sid3 ) @ #l)
   ⇒
    ⊥)"
*/
simplify
solve( Secret( 'kenc', kenc, cid, <sid1, sid2, sid3> ) @ #i )
  case client_register
  solve( (∀ #j. (!KU( z ) @ #j) ⇒ ⊥)  ∥
         (∃ #j #k #l.
           (!Compromised( $sid1 ) @ #j) ∧
           (!Compromised( $sid2 ) @ #k) ∧
           (!Compromised( $sid3 ) @ #l)) )
    case case_1
    solve( Client_0( $cid, ~pw, ~secret ) ▶₀ #i )
      case client_initialise
      solve( !KU( KDF(z,
                      h(<~pw, mul((~koprf1++~koprf2++~koprf3), h(~pw))>))
             ) @ #j )
        case c_KDF
        by contradiction /* from formulas */
      qed
    qed
  next
    case case_2
    by contradiction /* from formulas */
  qed
qed



























/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.5
Git revision: a6df687a05c2473573749494bdd7752b109f22ae, branch: develop
Compiled at: 2024-12-02 16:31:14.867376732 UTC
*/

end